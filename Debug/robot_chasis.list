
robot_chasis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000941c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  080095e4  080095e4  000195e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098b0  080098b0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080098b0  080098b0  000198b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098b8  080098b8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080098b8  080098b8  000198b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098c0  080098c0  000198c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080098c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017ec  20000078  08009938  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001864  08009938  00021864  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018ece  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003310  00000000  00000000  00038f72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001110  00000000  00000000  0003c288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff0  00000000  00000000  0003d398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024bda  00000000  00000000  0003e388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015432  00000000  00000000  00062f62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8cf3  00000000  00000000  00078394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00151087  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d50  00000000  00000000  001510d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000078 	.word	0x20000078
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080095cc 	.word	0x080095cc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000007c 	.word	0x2000007c
 8000204:	080095cc 	.word	0x080095cc

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295
 8000b18:	f000 b974 	b.w	8000e04 <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9d08      	ldr	r5, [sp, #32]
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	468e      	mov	lr, r1
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d14d      	bne.n	8000bde <__udivmoddi4+0xaa>
 8000b42:	428a      	cmp	r2, r1
 8000b44:	4694      	mov	ip, r2
 8000b46:	d969      	bls.n	8000c1c <__udivmoddi4+0xe8>
 8000b48:	fab2 f282 	clz	r2, r2
 8000b4c:	b152      	cbz	r2, 8000b64 <__udivmoddi4+0x30>
 8000b4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b52:	f1c2 0120 	rsb	r1, r2, #32
 8000b56:	fa20 f101 	lsr.w	r1, r0, r1
 8000b5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000b62:	4094      	lsls	r4, r2
 8000b64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b68:	0c21      	lsrs	r1, r4, #16
 8000b6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b6e:	fa1f f78c 	uxth.w	r7, ip
 8000b72:	fb08 e316 	mls	r3, r8, r6, lr
 8000b76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b7a:	fb06 f107 	mul.w	r1, r6, r7
 8000b7e:	4299      	cmp	r1, r3
 8000b80:	d90a      	bls.n	8000b98 <__udivmoddi4+0x64>
 8000b82:	eb1c 0303 	adds.w	r3, ip, r3
 8000b86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b8a:	f080 811f 	bcs.w	8000dcc <__udivmoddi4+0x298>
 8000b8e:	4299      	cmp	r1, r3
 8000b90:	f240 811c 	bls.w	8000dcc <__udivmoddi4+0x298>
 8000b94:	3e02      	subs	r6, #2
 8000b96:	4463      	add	r3, ip
 8000b98:	1a5b      	subs	r3, r3, r1
 8000b9a:	b2a4      	uxth	r4, r4
 8000b9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ba0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba8:	fb00 f707 	mul.w	r7, r0, r7
 8000bac:	42a7      	cmp	r7, r4
 8000bae:	d90a      	bls.n	8000bc6 <__udivmoddi4+0x92>
 8000bb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb8:	f080 810a 	bcs.w	8000dd0 <__udivmoddi4+0x29c>
 8000bbc:	42a7      	cmp	r7, r4
 8000bbe:	f240 8107 	bls.w	8000dd0 <__udivmoddi4+0x29c>
 8000bc2:	4464      	add	r4, ip
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bca:	1be4      	subs	r4, r4, r7
 8000bcc:	2600      	movs	r6, #0
 8000bce:	b11d      	cbz	r5, 8000bd8 <__udivmoddi4+0xa4>
 8000bd0:	40d4      	lsrs	r4, r2
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd8:	4631      	mov	r1, r6
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d909      	bls.n	8000bf6 <__udivmoddi4+0xc2>
 8000be2:	2d00      	cmp	r5, #0
 8000be4:	f000 80ef 	beq.w	8000dc6 <__udivmoddi4+0x292>
 8000be8:	2600      	movs	r6, #0
 8000bea:	e9c5 0100 	strd	r0, r1, [r5]
 8000bee:	4630      	mov	r0, r6
 8000bf0:	4631      	mov	r1, r6
 8000bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf6:	fab3 f683 	clz	r6, r3
 8000bfa:	2e00      	cmp	r6, #0
 8000bfc:	d14a      	bne.n	8000c94 <__udivmoddi4+0x160>
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d302      	bcc.n	8000c08 <__udivmoddi4+0xd4>
 8000c02:	4282      	cmp	r2, r0
 8000c04:	f200 80f9 	bhi.w	8000dfa <__udivmoddi4+0x2c6>
 8000c08:	1a84      	subs	r4, r0, r2
 8000c0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c0e:	2001      	movs	r0, #1
 8000c10:	469e      	mov	lr, r3
 8000c12:	2d00      	cmp	r5, #0
 8000c14:	d0e0      	beq.n	8000bd8 <__udivmoddi4+0xa4>
 8000c16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c1a:	e7dd      	b.n	8000bd8 <__udivmoddi4+0xa4>
 8000c1c:	b902      	cbnz	r2, 8000c20 <__udivmoddi4+0xec>
 8000c1e:	deff      	udf	#255	; 0xff
 8000c20:	fab2 f282 	clz	r2, r2
 8000c24:	2a00      	cmp	r2, #0
 8000c26:	f040 8092 	bne.w	8000d4e <__udivmoddi4+0x21a>
 8000c2a:	eba1 010c 	sub.w	r1, r1, ip
 8000c2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c32:	fa1f fe8c 	uxth.w	lr, ip
 8000c36:	2601      	movs	r6, #1
 8000c38:	0c20      	lsrs	r0, r4, #16
 8000c3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000c42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c46:	fb0e f003 	mul.w	r0, lr, r3
 8000c4a:	4288      	cmp	r0, r1
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0x12c>
 8000c4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x12a>
 8000c58:	4288      	cmp	r0, r1
 8000c5a:	f200 80cb 	bhi.w	8000df4 <__udivmoddi4+0x2c0>
 8000c5e:	4643      	mov	r3, r8
 8000c60:	1a09      	subs	r1, r1, r0
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c68:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c70:	fb0e fe00 	mul.w	lr, lr, r0
 8000c74:	45a6      	cmp	lr, r4
 8000c76:	d908      	bls.n	8000c8a <__udivmoddi4+0x156>
 8000c78:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c80:	d202      	bcs.n	8000c88 <__udivmoddi4+0x154>
 8000c82:	45a6      	cmp	lr, r4
 8000c84:	f200 80bb 	bhi.w	8000dfe <__udivmoddi4+0x2ca>
 8000c88:	4608      	mov	r0, r1
 8000c8a:	eba4 040e 	sub.w	r4, r4, lr
 8000c8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c92:	e79c      	b.n	8000bce <__udivmoddi4+0x9a>
 8000c94:	f1c6 0720 	rsb	r7, r6, #32
 8000c98:	40b3      	lsls	r3, r6
 8000c9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ca2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ca6:	fa01 f306 	lsl.w	r3, r1, r6
 8000caa:	431c      	orrs	r4, r3
 8000cac:	40f9      	lsrs	r1, r7
 8000cae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000cb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cba:	0c20      	lsrs	r0, r4, #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fb09 1118 	mls	r1, r9, r8, r1
 8000cc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ccc:	4288      	cmp	r0, r1
 8000cce:	fa02 f206 	lsl.w	r2, r2, r6
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b8>
 8000cd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cdc:	f080 8088 	bcs.w	8000df0 <__udivmoddi4+0x2bc>
 8000ce0:	4288      	cmp	r0, r1
 8000ce2:	f240 8085 	bls.w	8000df0 <__udivmoddi4+0x2bc>
 8000ce6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cea:	4461      	add	r1, ip
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cf4:	fb09 1110 	mls	r1, r9, r0, r1
 8000cf8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d00:	458e      	cmp	lr, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1e2>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d0c:	d26c      	bcs.n	8000de8 <__udivmoddi4+0x2b4>
 8000d0e:	458e      	cmp	lr, r1
 8000d10:	d96a      	bls.n	8000de8 <__udivmoddi4+0x2b4>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d1e:	eba1 010e 	sub.w	r1, r1, lr
 8000d22:	42a1      	cmp	r1, r4
 8000d24:	46c8      	mov	r8, r9
 8000d26:	46a6      	mov	lr, r4
 8000d28:	d356      	bcc.n	8000dd8 <__udivmoddi4+0x2a4>
 8000d2a:	d053      	beq.n	8000dd4 <__udivmoddi4+0x2a0>
 8000d2c:	b15d      	cbz	r5, 8000d46 <__udivmoddi4+0x212>
 8000d2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000d32:	eb61 010e 	sbc.w	r1, r1, lr
 8000d36:	fa01 f707 	lsl.w	r7, r1, r7
 8000d3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000d3e:	40f1      	lsrs	r1, r6
 8000d40:	431f      	orrs	r7, r3
 8000d42:	e9c5 7100 	strd	r7, r1, [r5]
 8000d46:	2600      	movs	r6, #0
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	40d8      	lsrs	r0, r3
 8000d54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d58:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5c:	4091      	lsls	r1, r2
 8000d5e:	4301      	orrs	r1, r0
 8000d60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d64:	fa1f fe8c 	uxth.w	lr, ip
 8000d68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d70:	0c0b      	lsrs	r3, r1, #16
 8000d72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d76:	fb00 f60e 	mul.w	r6, r0, lr
 8000d7a:	429e      	cmp	r6, r3
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x260>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d8a:	d22f      	bcs.n	8000dec <__udivmoddi4+0x2b8>
 8000d8c:	429e      	cmp	r6, r3
 8000d8e:	d92d      	bls.n	8000dec <__udivmoddi4+0x2b8>
 8000d90:	3802      	subs	r0, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	1b9b      	subs	r3, r3, r6
 8000d96:	b289      	uxth	r1, r1
 8000d98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb06 f30e 	mul.w	r3, r6, lr
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x28a>
 8000dac:	eb1c 0101 	adds.w	r1, ip, r1
 8000db0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000db4:	d216      	bcs.n	8000de4 <__udivmoddi4+0x2b0>
 8000db6:	428b      	cmp	r3, r1
 8000db8:	d914      	bls.n	8000de4 <__udivmoddi4+0x2b0>
 8000dba:	3e02      	subs	r6, #2
 8000dbc:	4461      	add	r1, ip
 8000dbe:	1ac9      	subs	r1, r1, r3
 8000dc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dc4:	e738      	b.n	8000c38 <__udivmoddi4+0x104>
 8000dc6:	462e      	mov	r6, r5
 8000dc8:	4628      	mov	r0, r5
 8000dca:	e705      	b.n	8000bd8 <__udivmoddi4+0xa4>
 8000dcc:	4606      	mov	r6, r0
 8000dce:	e6e3      	b.n	8000b98 <__udivmoddi4+0x64>
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	e6f8      	b.n	8000bc6 <__udivmoddi4+0x92>
 8000dd4:	454b      	cmp	r3, r9
 8000dd6:	d2a9      	bcs.n	8000d2c <__udivmoddi4+0x1f8>
 8000dd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ddc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000de0:	3801      	subs	r0, #1
 8000de2:	e7a3      	b.n	8000d2c <__udivmoddi4+0x1f8>
 8000de4:	4646      	mov	r6, r8
 8000de6:	e7ea      	b.n	8000dbe <__udivmoddi4+0x28a>
 8000de8:	4620      	mov	r0, r4
 8000dea:	e794      	b.n	8000d16 <__udivmoddi4+0x1e2>
 8000dec:	4640      	mov	r0, r8
 8000dee:	e7d1      	b.n	8000d94 <__udivmoddi4+0x260>
 8000df0:	46d0      	mov	r8, sl
 8000df2:	e77b      	b.n	8000cec <__udivmoddi4+0x1b8>
 8000df4:	3b02      	subs	r3, #2
 8000df6:	4461      	add	r1, ip
 8000df8:	e732      	b.n	8000c60 <__udivmoddi4+0x12c>
 8000dfa:	4630      	mov	r0, r6
 8000dfc:	e709      	b.n	8000c12 <__udivmoddi4+0xde>
 8000dfe:	4464      	add	r4, ip
 8000e00:	3802      	subs	r0, #2
 8000e02:	e742      	b.n	8000c8a <__udivmoddi4+0x156>

08000e04 <__aeabi_idiv0>:
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop

08000e08 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	0a5a      	lsrs	r2, r3, #9
 8000e18:	490f      	ldr	r1, [pc, #60]	; (8000e58 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000e1a:	fba1 1202 	umull	r1, r2, r1, r2
 8000e1e:	09d2      	lsrs	r2, r2, #7
 8000e20:	490e      	ldr	r1, [pc, #56]	; (8000e5c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000e22:	fb01 f202 	mul.w	r2, r1, r2
 8000e26:	1a9b      	subs	r3, r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	0a5b      	lsrs	r3, r3, #9
 8000e30:	4a09      	ldr	r2, [pc, #36]	; (8000e58 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000e32:	fba2 2303 	umull	r2, r3, r2, r3
 8000e36:	09db      	lsrs	r3, r3, #7
 8000e38:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	441a      	add	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	68fa      	ldr	r2, [r7, #12]
 8000e4a:	601a      	str	r2, [r3, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	00044b83 	.word	0x00044b83
 8000e5c:	3b9aca00 	.word	0x3b9aca00

08000e60 <Controll_Init>:
/**
 * @ brief Include all the initial function
 * @ retval None
 * */
void Controll_Init()
{
 8000e60:	b590      	push	{r4, r7, lr}
 8000e62:	b0a9      	sub	sp, #164	; 0xa4
 8000e64:	af26      	add	r7, sp, #152	; 0x98
	Hardware_Info_Init();
 8000e66:	f000 f961 	bl	800112c <Hardware_Info_Init>
	Controll_Timer_Init();
 8000e6a:	f000 f939 	bl	80010e0 <Controll_Timer_Init>
	Motor_Driver_Init(&WheelA, M1_INA_Pin, M1_INA_GPIO_port, M1_INB_Pin, M1_INB_GPIO_port, M1_Encoder_timer, M1_Encoder_timerchannel, M1_PWM_timer, M1_PWM_timerchannel);
	Motor_Driver_Init(&WheelB, M2_INA_Pin, M2_INA_GPIO_port, M2_INB_Pin, M2_INB_GPIO_port, M2_Encoder_timer, M2_Encoder_timerchannel, M2_PWM_timer, M2_PWM_timerchannel);
	Motor_Driver_Init(&WheelC, M3_INA_Pin, M3_INA_GPIO_port, M3_INB_Pin, M3_INB_GPIO_port, M3_Encoder_timer, M3_Encoder_timerchannel, M3_PWM_timer, M3_PWM_timerchannel);
#endif
#ifdef DRV8874
	Motor_Driver_Init(&WheelA, M1_PHASE_Pin, M1_PHASE_GPIO_port, M1_Encoder_timer, M1_Encoder_timerchannel, M1_PWM_timer, M1_PWM_timerchannel);
 8000e6e:	4c62      	ldr	r4, [pc, #392]	; (8000ff8 <Controll_Init+0x198>)
 8000e70:	2300      	movs	r3, #0
 8000e72:	9324      	str	r3, [sp, #144]	; 0x90
 8000e74:	4a61      	ldr	r2, [pc, #388]	; (8000ffc <Controll_Init+0x19c>)
 8000e76:	ab12      	add	r3, sp, #72	; 0x48
 8000e78:	4611      	mov	r1, r2
 8000e7a:	2248      	movs	r2, #72	; 0x48
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f008 fa0d 	bl	800929c <memcpy>
 8000e82:	2304      	movs	r3, #4
 8000e84:	9311      	str	r3, [sp, #68]	; 0x44
 8000e86:	4668      	mov	r0, sp
 8000e88:	1d23      	adds	r3, r4, #4
 8000e8a:	2244      	movs	r2, #68	; 0x44
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f008 fa05 	bl	800929c <memcpy>
 8000e92:	6823      	ldr	r3, [r4, #0]
 8000e94:	2202      	movs	r2, #2
 8000e96:	495a      	ldr	r1, [pc, #360]	; (8001000 <Controll_Init+0x1a0>)
 8000e98:	485a      	ldr	r0, [pc, #360]	; (8001004 <Controll_Init+0x1a4>)
 8000e9a:	f000 f8f0 	bl	800107e <Motor_Driver_Init>
	Motor_Driver_Init(&WheelB, M2_PHASE_Pin, M2_PHASE_GPIO_port, M2_Encoder_timer, M2_Encoder_timerchannel, M2_PWM_timer, M2_PWM_timerchannel);
 8000e9e:	4c5a      	ldr	r4, [pc, #360]	; (8001008 <Controll_Init+0x1a8>)
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	9324      	str	r3, [sp, #144]	; 0x90
 8000ea4:	4a55      	ldr	r2, [pc, #340]	; (8000ffc <Controll_Init+0x19c>)
 8000ea6:	ab12      	add	r3, sp, #72	; 0x48
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	2248      	movs	r2, #72	; 0x48
 8000eac:	4618      	mov	r0, r3
 8000eae:	f008 f9f5 	bl	800929c <memcpy>
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	9311      	str	r3, [sp, #68]	; 0x44
 8000eb6:	4668      	mov	r0, sp
 8000eb8:	1d23      	adds	r3, r4, #4
 8000eba:	2244      	movs	r2, #68	; 0x44
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f008 f9ed 	bl	800929c <memcpy>
 8000ec2:	6823      	ldr	r3, [r4, #0]
 8000ec4:	2204      	movs	r2, #4
 8000ec6:	4951      	ldr	r1, [pc, #324]	; (800100c <Controll_Init+0x1ac>)
 8000ec8:	4851      	ldr	r0, [pc, #324]	; (8001010 <Controll_Init+0x1b0>)
 8000eca:	f000 f8d8 	bl	800107e <Motor_Driver_Init>
	Motor_Driver_Init(&WheelC, M3_PHASE_Pin, M3_PHASE_GPIO_port, M3_Encoder_timer, M3_Encoder_timerchannel, M3_PWM_timer, M3_PWM_timerchannel);
 8000ece:	4c51      	ldr	r4, [pc, #324]	; (8001014 <Controll_Init+0x1b4>)
 8000ed0:	230c      	movs	r3, #12
 8000ed2:	9324      	str	r3, [sp, #144]	; 0x90
 8000ed4:	4a50      	ldr	r2, [pc, #320]	; (8001018 <Controll_Init+0x1b8>)
 8000ed6:	ab12      	add	r3, sp, #72	; 0x48
 8000ed8:	4611      	mov	r1, r2
 8000eda:	2248      	movs	r2, #72	; 0x48
 8000edc:	4618      	mov	r0, r3
 8000ede:	f008 f9dd 	bl	800929c <memcpy>
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	9311      	str	r3, [sp, #68]	; 0x44
 8000ee6:	4668      	mov	r0, sp
 8000ee8:	1d23      	adds	r3, r4, #4
 8000eea:	2244      	movs	r2, #68	; 0x44
 8000eec:	4619      	mov	r1, r3
 8000eee:	f008 f9d5 	bl	800929c <memcpy>
 8000ef2:	6823      	ldr	r3, [r4, #0]
 8000ef4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ef8:	4948      	ldr	r1, [pc, #288]	; (800101c <Controll_Init+0x1bc>)
 8000efa:	4849      	ldr	r0, [pc, #292]	; (8001020 <Controll_Init+0x1c0>)
 8000efc:	f000 f8bf 	bl	800107e <Motor_Driver_Init>
#endif

	Pid_Param_Init(&WheelA, M1_KP, M1_KI, M1_KD);
 8000f00:	ed9f 2b2d 	vldr	d2, [pc, #180]	; 8000fb8 <Controll_Init+0x158>
 8000f04:	ed9f 1b2e 	vldr	d1, [pc, #184]	; 8000fc0 <Controll_Init+0x160>
 8000f08:	ed9f 0b2f 	vldr	d0, [pc, #188]	; 8000fc8 <Controll_Init+0x168>
 8000f0c:	483d      	ldr	r0, [pc, #244]	; (8001004 <Controll_Init+0x1a4>)
 8000f0e:	f000 f897 	bl	8001040 <Pid_Param_Init>
	Pid_Param_Init(&WheelB, M2_KP, M2_KI, M2_KD);
 8000f12:	ed9f 2b29 	vldr	d2, [pc, #164]	; 8000fb8 <Controll_Init+0x158>
 8000f16:	ed9f 1b2e 	vldr	d1, [pc, #184]	; 8000fd0 <Controll_Init+0x170>
 8000f1a:	ed9f 0b2f 	vldr	d0, [pc, #188]	; 8000fd8 <Controll_Init+0x178>
 8000f1e:	483c      	ldr	r0, [pc, #240]	; (8001010 <Controll_Init+0x1b0>)
 8000f20:	f000 f88e 	bl	8001040 <Pid_Param_Init>
	Pid_Param_Init(&WheelC, M3_KP, M3_KI, M3_KD);
 8000f24:	ed9f 2b24 	vldr	d2, [pc, #144]	; 8000fb8 <Controll_Init+0x158>
 8000f28:	ed9f 1b2d 	vldr	d1, [pc, #180]	; 8000fe0 <Controll_Init+0x180>
 8000f2c:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 8000fe8 <Controll_Init+0x188>
 8000f30:	483b      	ldr	r0, [pc, #236]	; (8001020 <Controll_Init+0x1c0>)
 8000f32:	f000 f885 	bl	8001040 <Pid_Param_Init>

	i = 0;
 8000f36:	4b3b      	ldr	r3, [pc, #236]	; (8001024 <Controll_Init+0x1c4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
	limit_integral = 0.3;
 8000f3c:	493a      	ldr	r1, [pc, #232]	; (8001028 <Controll_Init+0x1c8>)
 8000f3e:	a32c      	add	r3, pc, #176	; (adr r3, 8000ff0 <Controll_Init+0x190>)
 8000f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f44:	e9c1 2300 	strd	r2, r3, [r1]
	pwm_arr = M1_PWM_timer.Init.Period;
 8000f48:	4b2c      	ldr	r3, [pc, #176]	; (8000ffc <Controll_Init+0x19c>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff faa5 	bl	800049c <__aeabi_ui2d>
 8000f52:	4602      	mov	r2, r0
 8000f54:	460b      	mov	r3, r1
 8000f56:	4935      	ldr	r1, [pc, #212]	; (800102c <Controll_Init+0x1cc>)
 8000f58:	e9c1 2300 	strd	r2, r3, [r1]

	// PCLK1_freq, APB1 timer frequency
	int32_t PCLK1_freq = HAL_RCC_GetPCLK1Freq();
 8000f5c:	f005 f8a0 	bl	80060a0 <HAL_RCC_GetPCLK1Freq>
 8000f60:	4603      	mov	r3, r0
 8000f62:	607b      	str	r3, [r7, #4]
	if((RCC->CFGR & RCC_CFGR_PPRE1) != 0)
 8000f64:	4b32      	ldr	r3, [pc, #200]	; (8001030 <Controll_Init+0x1d0>)
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d002      	beq.n	8000f76 <Controll_Init+0x116>
	{
		PCLK1_freq *=2;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	607b      	str	r3, [r7, #4]
	}

	int32_t timer_interrupt_freq = PCLK1_freq / (Encoder_Interrupt_timer.Init.Prescaler + 1) / Encoder_Interrupt_timer.Init.Period;
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	4b2e      	ldr	r3, [pc, #184]	; (8001034 <Controll_Init+0x1d4>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f82:	4b2c      	ldr	r3, [pc, #176]	; (8001034 <Controll_Init+0x1d4>)
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8a:	603b      	str	r3, [r7, #0]

	control_period = (double)1 / timer_interrupt_freq;
 8000f8c:	6838      	ldr	r0, [r7, #0]
 8000f8e:	f7ff fa95 	bl	80004bc <__aeabi_i2d>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	f04f 0000 	mov.w	r0, #0
 8000f9a:	4927      	ldr	r1, [pc, #156]	; (8001038 <Controll_Init+0x1d8>)
 8000f9c:	f7ff fc22 	bl	80007e4 <__aeabi_ddiv>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	4925      	ldr	r1, [pc, #148]	; (800103c <Controll_Init+0x1dc>)
 8000fa6:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd90      	pop	{r4, r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	f3af 8000 	nop.w
	...
 8000fc0:	f73bc018 	.word	0xf73bc018
 8000fc4:	40555fb6 	.word	0x40555fb6
 8000fc8:	251956d0 	.word	0x251956d0
 8000fcc:	3fff6881 	.word	0x3fff6881
 8000fd0:	dd57047f 	.word	0xdd57047f
 8000fd4:	4050ac7c 	.word	0x4050ac7c
 8000fd8:	f39f76ec 	.word	0xf39f76ec
 8000fdc:	3ff8251b 	.word	0x3ff8251b
 8000fe0:	caf1a15d 	.word	0xcaf1a15d
 8000fe4:	40699953 	.word	0x40699953
 8000fe8:	0341c871 	.word	0x0341c871
 8000fec:	40168866 	.word	0x40168866
 8000ff0:	33333333 	.word	0x33333333
 8000ff4:	3fd33333 	.word	0x3fd33333
 8000ff8:	2000159c 	.word	0x2000159c
 8000ffc:	20001704 	.word	0x20001704
 8001000:	40020400 	.word	0x40020400
 8001004:	200000e8 	.word	0x200000e8
 8001008:	20001674 	.word	0x20001674
 800100c:	40020800 	.word	0x40020800
 8001010:	200001e8 	.word	0x200001e8
 8001014:	2000162c 	.word	0x2000162c
 8001018:	200016bc 	.word	0x200016bc
 800101c:	40020000 	.word	0x40020000
 8001020:	200002e8 	.word	0x200002e8
 8001024:	200003e8 	.word	0x200003e8
 8001028:	200000d0 	.word	0x200000d0
 800102c:	200000d8 	.word	0x200000d8
 8001030:	40023800 	.word	0x40023800
 8001034:	200015e4 	.word	0x200015e4
 8001038:	3ff00000 	.word	0x3ff00000
 800103c:	200000e0 	.word	0x200000e0

08001040 <Pid_Param_Init>:
/**
 * @ brief assign the pid gain value into the PID_Controll object
 * @ retval None
 * */
void Pid_Param_Init(PID_Controll *Wheel_, double kp, double ki, double kd)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	; 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	61f8      	str	r0, [r7, #28]
 8001048:	ed87 0b04 	vstr	d0, [r7, #16]
 800104c:	ed87 1b02 	vstr	d1, [r7, #8]
 8001050:	ed87 2b00 	vstr	d2, [r7]
	Wheel_->Kp = kp;
 8001054:	69f9      	ldr	r1, [r7, #28]
 8001056:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800105a:	e9c1 2300 	strd	r2, r3, [r1]
	Wheel_->Ki = ki;
 800105e:	69f9      	ldr	r1, [r7, #28]
 8001060:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001064:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Wheel_->Kd = kd;
 8001068:	69f9      	ldr	r1, [r7, #28]
 800106a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800106e:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001072:	bf00      	nop
 8001074:	3724      	adds	r7, #36	; 0x24
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <Motor_Driver_Init>:
#ifdef DRV8874
void Motor_Driver_Init(PID_Controll *Wheel_,
		GPIO_TypeDef *PHASE_pin_type_, uint16_t PHASE_pin_num_,
		TIM_HandleTypeDef encoder_timer_, uint32_t encoder_timer_channel_,
		TIM_HandleTypeDef pwm_timer_, uint32_t pwm_timer_channel_)
{
 800107e:	b082      	sub	sp, #8
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	61fb      	str	r3, [r7, #28]
 800108c:	4613      	mov	r3, r2
 800108e:	80fb      	strh	r3, [r7, #6]
	Wheel_->PHASE_pin_type = PHASE_pin_type_;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	661a      	str	r2, [r3, #96]	; 0x60
	Wheel_->PHASE_pin_Num = PHASE_pin_num_;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	88fa      	ldrh	r2, [r7, #6]
 800109a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	Wheel_->encoder_timer = encoder_timer_;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3368      	adds	r3, #104	; 0x68
 80010a2:	f107 011c 	add.w	r1, r7, #28
 80010a6:	2248      	movs	r2, #72	; 0x48
 80010a8:	4618      	mov	r0, r3
 80010aa:	f008 f8f7 	bl	800929c <memcpy>
	Wheel_->encoder_timer_channel = encoder_timer_channel_;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80010b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	Wheel_->pwm_timer = pwm_timer_;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	33b4      	adds	r3, #180	; 0xb4
 80010ba:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80010be:	2248      	movs	r2, #72	; 0x48
 80010c0:	4618      	mov	r0, r3
 80010c2:	f008 f8eb 	bl	800929c <memcpy>
	Wheel_->pwm_timer_channel = pwm_timer_channel_;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80010cc:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
}
 80010d0:	bf00      	nop
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010da:	b002      	add	sp, #8
 80010dc:	4770      	bx	lr
	...

080010e0 <Controll_Timer_Init>:
 * @ brief initialize the timers that encoder and pwm used
 * @ all the definition in the function are in "control.h"
 * @ retval None
 * */
void Controll_Timer_Init()
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&M1_Encoder_timer, M1_Encoder_timerchannel);
 80010e4:	2104      	movs	r1, #4
 80010e6:	480c      	ldr	r0, [pc, #48]	; (8001118 <Controll_Timer_Init+0x38>)
 80010e8:	f005 ff4e 	bl	8006f88 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&M1_PWM_timer, M1_PWM_timerchannel);
 80010ec:	2100      	movs	r1, #0
 80010ee:	480b      	ldr	r0, [pc, #44]	; (800111c <Controll_Timer_Init+0x3c>)
 80010f0:	f005 fddc 	bl	8006cac <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&M2_Encoder_timer, M2_Encoder_timerchannel);
 80010f4:	2104      	movs	r1, #4
 80010f6:	480a      	ldr	r0, [pc, #40]	; (8001120 <Controll_Timer_Init+0x40>)
 80010f8:	f005 ff46 	bl	8006f88 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&M2_PWM_timer, M2_PWM_timerchannel);
 80010fc:	2104      	movs	r1, #4
 80010fe:	4807      	ldr	r0, [pc, #28]	; (800111c <Controll_Timer_Init+0x3c>)
 8001100:	f005 fdd4 	bl	8006cac <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&M3_Encoder_timer, M3_Encoder_timerchannel);
 8001104:	2104      	movs	r1, #4
 8001106:	4807      	ldr	r0, [pc, #28]	; (8001124 <Controll_Timer_Init+0x44>)
 8001108:	f005 ff3e 	bl	8006f88 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&M3_PWM_timer, M3_PWM_timerchannel);
 800110c:	210c      	movs	r1, #12
 800110e:	4806      	ldr	r0, [pc, #24]	; (8001128 <Controll_Timer_Init+0x48>)
 8001110:	f005 fdcc 	bl	8006cac <HAL_TIM_PWM_Start>
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	2000159c 	.word	0x2000159c
 800111c:	20001704 	.word	0x20001704
 8001120:	20001674 	.word	0x20001674
 8001124:	2000162c 	.word	0x2000162c
 8001128:	200016bc 	.word	0x200016bc

0800112c <Hardware_Info_Init>:
/**
 * @ brief assign the hardware value for motor and chassis radius error
 * @ retval None
 * */
void Hardware_Info_Init()
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
	radius_error_a = 1.0;
 8001130:	490e      	ldr	r1, [pc, #56]	; (800116c <Hardware_Info_Init+0x40>)
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <Hardware_Info_Init+0x44>)
 8001138:	e9c1 2300 	strd	r2, r3, [r1]
	radius_error_b = 1.0;
 800113c:	490d      	ldr	r1, [pc, #52]	; (8001174 <Hardware_Info_Init+0x48>)
 800113e:	f04f 0200 	mov.w	r2, #0
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <Hardware_Info_Init+0x44>)
 8001144:	e9c1 2300 	strd	r2, r3, [r1]
	radius_error_c = 1.0;
 8001148:	490b      	ldr	r1, [pc, #44]	; (8001178 <Hardware_Info_Init+0x4c>)
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <Hardware_Info_Init+0x44>)
 8001150:	e9c1 2300 	strd	r2, r3, [r1]
	radius_error_chassis = 1.0;
 8001154:	4909      	ldr	r1, [pc, #36]	; (800117c <Hardware_Info_Init+0x50>)
 8001156:	f04f 0200 	mov.w	r2, #0
 800115a:	4b05      	ldr	r3, [pc, #20]	; (8001170 <Hardware_Info_Init+0x44>)
 800115c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20000098 	.word	0x20000098
 8001170:	3ff00000 	.word	0x3ff00000
 8001174:	200000a0 	.word	0x200000a0
 8001178:	200000a8 	.word	0x200000a8
 800117c:	200000b0 	.word	0x200000b0

08001180 <PID_Controller>:
 * @ brief PID control for the motor
 * @ param Wheel_ the object declare for each motor (WheelA, WheelB, WheelC)
 * @ retval None
 * */
void PID_Controller(PID_Controll *Wheel_)
{
 8001180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001184:	b094      	sub	sp, #80	; 0x50
 8001186:	af00      	add	r7, sp, #0
 8001188:	64f8      	str	r0, [r7, #76]	; 0x4c
	Wheel_->CountNum = __HAL_TIM_GetCounter(&Wheel_->encoder_timer);
 800118a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800118c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800118e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001190:	b21b      	sxth	r3, r3
 8001192:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001194:	8313      	strh	r3, [r2, #24]
	Wheel_->rps = (double)Wheel_->CountNum / (4 * encoder_resolution * speed_reduction_ratio * control_period);
 8001196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001198:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f98d 	bl	80004bc <__aeabi_i2d>
 80011a2:	4604      	mov	r4, r0
 80011a4:	460d      	mov	r5, r1
 80011a6:	4ba2      	ldr	r3, [pc, #648]	; (8001430 <PID_Controller+0x2b0>)
 80011a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011ac:	a39e      	add	r3, pc, #632	; (adr r3, 8001428 <PID_Controller+0x2a8>)
 80011ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b2:	f7ff f9ed 	bl	8000590 <__aeabi_dmul>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4620      	mov	r0, r4
 80011bc:	4629      	mov	r1, r5
 80011be:	f7ff fb11 	bl	80007e4 <__aeabi_ddiv>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4610      	mov	r0, r2
 80011c8:	4619      	mov	r1, r3
 80011ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011cc:	e9c3 0108 	strd	r0, r1, [r3, #32]
	__HAL_TIM_SetCounter(&Wheel_->encoder_timer ,0);
 80011d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011d2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80011d4:	2300      	movs	r3, #0
 80011d6:	6253      	str	r3, [r2, #36]	; 0x24
//		{
//			sssss[i] = Wheel_->rps;
//			i++;
//		}

	Wheel_->err = Wheel_->goal - Wheel_->rps;
 80011d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011da:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80011de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80011e4:	f7ff f81c 	bl	8000220 <__aeabi_dsub>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011f2:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
	Wheel_->propotional = (double)Wheel_->err * Wheel_->Kp;
 80011f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011f8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80011fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001202:	f7ff f9c5 	bl	8000590 <__aeabi_dmul>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4610      	mov	r0, r2
 800120c:	4619      	mov	r1, r3
 800120e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001210:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
	Wheel_->integral += (double)Wheel_->err * Wheel_->Ki * control_period;
 8001214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001216:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 800121a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800121c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001222:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001226:	f7ff f9b3 	bl	8000590 <__aeabi_dmul>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	4b7f      	ldr	r3, [pc, #508]	; (8001430 <PID_Controller+0x2b0>)
 8001234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001238:	f7ff f9aa 	bl	8000590 <__aeabi_dmul>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4620      	mov	r0, r4
 8001242:	4629      	mov	r1, r5
 8001244:	f7fe ffee 	bl	8000224 <__adddf3>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001252:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
	Wheel_->integral = (Wheel_->integral > limit_integral)? limit_integral : Wheel_->integral;
 8001256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001258:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800125c:	4b75      	ldr	r3, [pc, #468]	; (8001434 <PID_Controller+0x2b4>)
 800125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001262:	f7ff fc25 	bl	8000ab0 <__aeabi_dcmpgt>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <PID_Controller+0xf4>
 800126c:	4b71      	ldr	r3, [pc, #452]	; (8001434 <PID_Controller+0x2b4>)
 800126e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001272:	e002      	b.n	800127a <PID_Controller+0xfa>
 8001274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001276:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800127a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800127c:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
	Wheel_->integral = (Wheel_->integral < (-1) * limit_integral)? (-1) * limit_integral : Wheel_->integral;
 8001280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001282:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8001286:	4b6b      	ldr	r3, [pc, #428]	; (8001434 <PID_Controller+0x2b4>)
 8001288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128c:	4692      	mov	sl, r2
 800128e:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8001292:	4652      	mov	r2, sl
 8001294:	465b      	mov	r3, fp
 8001296:	f7ff fbed 	bl	8000a74 <__aeabi_dcmplt>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d006      	beq.n	80012ae <PID_Controller+0x12e>
 80012a0:	4b64      	ldr	r3, [pc, #400]	; (8001434 <PID_Controller+0x2b4>)
 80012a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a6:	4690      	mov	r8, r2
 80012a8:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80012ac:	e002      	b.n	80012b4 <PID_Controller+0x134>
 80012ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012b0:	e9d3 8912 	ldrd	r8, r9, [r3, #72]	; 0x48
 80012b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012b6:	e9c3 8912 	strd	r8, r9, [r3, #72]	; 0x48
	Wheel_->differential = (double) Wheel_->Kd * (-1) * (Wheel_->rps - Wheel_->rps_before) / control_period;
 80012ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012bc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80012c0:	643a      	str	r2, [r7, #64]	; 0x40
 80012c2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80012c6:	647b      	str	r3, [r7, #68]	; 0x44
 80012c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012ca:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80012ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012d0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80012d4:	f7fe ffa4 	bl	8000220 <__aeabi_dsub>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80012e0:	f7ff f956 	bl	8000590 <__aeabi_dmul>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4610      	mov	r0, r2
 80012ea:	4619      	mov	r1, r3
 80012ec:	4b50      	ldr	r3, [pc, #320]	; (8001430 <PID_Controller+0x2b0>)
 80012ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f2:	f7ff fa77 	bl	80007e4 <__aeabi_ddiv>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	4610      	mov	r0, r2
 80012fc:	4619      	mov	r1, r3
 80012fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001300:	e9c3 0114 	strd	r0, r1, [r3, #80]	; 0x50

	Wheel_->duty = Wheel_->propotional + Wheel_->integral + Wheel_->differential;
 8001304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001306:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800130a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800130c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001310:	f7fe ff88 	bl	8000224 <__adddf3>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4610      	mov	r0, r2
 800131a:	4619      	mov	r1, r3
 800131c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800131e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001322:	f7fe ff7f 	bl	8000224 <__adddf3>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4610      	mov	r0, r2
 800132c:	4619      	mov	r1, r3
 800132e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001330:	e9c3 0116 	strd	r0, r1, [r3, #88]	; 0x58
	Wheel_->duty = (Wheel_->duty > 1)? 1 : Wheel_->duty;
 8001334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001336:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	4b3e      	ldr	r3, [pc, #248]	; (8001438 <PID_Controller+0x2b8>)
 8001340:	f7ff fbb6 	bl	8000ab0 <__aeabi_dcmpgt>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <PID_Controller+0x1d2>
 800134a:	f04f 0000 	mov.w	r0, #0
 800134e:	493a      	ldr	r1, [pc, #232]	; (8001438 <PID_Controller+0x2b8>)
 8001350:	e002      	b.n	8001358 <PID_Controller+0x1d8>
 8001352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001354:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8001358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800135a:	e9c3 0116 	strd	r0, r1, [r3, #88]	; 0x58
	Wheel_->duty = (Wheel_->duty < -1)? -1 : Wheel_->duty;
 800135e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001360:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	4b34      	ldr	r3, [pc, #208]	; (800143c <PID_Controller+0x2bc>)
 800136a:	f7ff fb83 	bl	8000a74 <__aeabi_dcmplt>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <PID_Controller+0x1fc>
 8001374:	f04f 0000 	mov.w	r0, #0
 8001378:	4930      	ldr	r1, [pc, #192]	; (800143c <PID_Controller+0x2bc>)
 800137a:	e002      	b.n	8001382 <PID_Controller+0x202>
 800137c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800137e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8001382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001384:	e9c3 0116 	strd	r0, r1, [r3, #88]	; 0x58
		HAL_GPIO_WritePin(Wheel_->INB_pin_type, Wheel_->INB_pin_Num, GPIO_PIN_SET);
		__HAL_TIM_SET_COMPARE(&(Wheel_->pwm_timer), Wheel_->pwm_timer_channel, fabs(Wheel_->duty * pwm_arr));
	}
#endif
#ifdef DRV8874
	if(Wheel_->duty >= 0)
 8001388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800138a:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	f04f 0300 	mov.w	r3, #0
 8001396:	f7ff fb81 	bl	8000a9c <__aeabi_dcmpge>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	f000 8086 	beq.w	80014ae <PID_Controller+0x32e>
	{
		HAL_GPIO_WritePin(Wheel_->PHASE_pin_type, Wheel_->PHASE_pin_Num, GPIO_PIN_SET);
 80013a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013a4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80013a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013a8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80013ac:	2201      	movs	r2, #1
 80013ae:	4619      	mov	r1, r3
 80013b0:	f004 fd6a 	bl	8005e88 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&(Wheel_->pwm_timer), Wheel_->pwm_timer_channel, fabs(Wheel_->duty * pwm_arr));
 80013b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013b6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d117      	bne.n	80013ee <PID_Controller+0x26e>
 80013be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013c0:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80013c4:	4b1e      	ldr	r3, [pc, #120]	; (8001440 <PID_Controller+0x2c0>)
 80013c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ca:	f7ff f8e1 	bl	8000590 <__aeabi_dmul>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	63ba      	str	r2, [r7, #56]	; 0x38
 80013d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013dc:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 80013e0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80013e4:	f7ff fb6e 	bl	8000ac4 <__aeabi_d2uiz>
 80013e8:	4603      	mov	r3, r0
 80013ea:	6363      	str	r3, [r4, #52]	; 0x34
 80013ec:	e0d6      	b.n	800159c <PID_Controller+0x41c>
 80013ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013f0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80013f4:	2b04      	cmp	r3, #4
 80013f6:	d125      	bne.n	8001444 <PID_Controller+0x2c4>
 80013f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013fa:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <PID_Controller+0x2c0>)
 8001400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001404:	f7ff f8c4 	bl	8000590 <__aeabi_dmul>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	633a      	str	r2, [r7, #48]	; 0x30
 800140e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001412:	637b      	str	r3, [r7, #52]	; 0x34
 8001414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001416:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 800141a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800141e:	f7ff fb51 	bl	8000ac4 <__aeabi_d2uiz>
 8001422:	4603      	mov	r3, r0
 8001424:	63a3      	str	r3, [r4, #56]	; 0x38
 8001426:	e0b9      	b.n	800159c <PID_Controller+0x41c>
 8001428:	9999999a 	.word	0x9999999a
 800142c:	40cea199 	.word	0x40cea199
 8001430:	200000e0 	.word	0x200000e0
 8001434:	200000d0 	.word	0x200000d0
 8001438:	3ff00000 	.word	0x3ff00000
 800143c:	bff00000 	.word	0xbff00000
 8001440:	200000d8 	.word	0x200000d8
 8001444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001446:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800144a:	2b08      	cmp	r3, #8
 800144c:	d117      	bne.n	800147e <PID_Controller+0x2fe>
 800144e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001450:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8001454:	4b57      	ldr	r3, [pc, #348]	; (80015b4 <PID_Controller+0x434>)
 8001456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145a:	f7ff f899 	bl	8000590 <__aeabi_dmul>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	62ba      	str	r2, [r7, #40]	; 0x28
 8001464:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001468:	62fb      	str	r3, [r7, #44]	; 0x2c
 800146a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800146c:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8001470:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001474:	f7ff fb26 	bl	8000ac4 <__aeabi_d2uiz>
 8001478:	4603      	mov	r3, r0
 800147a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800147c:	e08e      	b.n	800159c <PID_Controller+0x41c>
 800147e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001480:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8001484:	4b4b      	ldr	r3, [pc, #300]	; (80015b4 <PID_Controller+0x434>)
 8001486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148a:	f7ff f881 	bl	8000590 <__aeabi_dmul>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	623a      	str	r2, [r7, #32]
 8001494:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
 800149a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800149c:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 80014a0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80014a4:	f7ff fb0e 	bl	8000ac4 <__aeabi_d2uiz>
 80014a8:	4603      	mov	r3, r0
 80014aa:	6423      	str	r3, [r4, #64]	; 0x40
 80014ac:	e076      	b.n	800159c <PID_Controller+0x41c>
	}
	else
	{
		HAL_GPIO_WritePin(Wheel_->PHASE_pin_type, Wheel_->PHASE_pin_Num, GPIO_PIN_RESET);
 80014ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014b0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80014b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014b4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80014b8:	2200      	movs	r2, #0
 80014ba:	4619      	mov	r1, r3
 80014bc:	f004 fce4 	bl	8005e88 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&(Wheel_->pwm_timer), Wheel_->pwm_timer_channel, fabs(Wheel_->duty * pwm_arr));
 80014c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014c2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d117      	bne.n	80014fa <PID_Controller+0x37a>
 80014ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014cc:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80014d0:	4b38      	ldr	r3, [pc, #224]	; (80015b4 <PID_Controller+0x434>)
 80014d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d6:	f7ff f85b 	bl	8000590 <__aeabi_dmul>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	61ba      	str	r2, [r7, #24]
 80014e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014e4:	61fb      	str	r3, [r7, #28]
 80014e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014e8:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 80014ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014f0:	f7ff fae8 	bl	8000ac4 <__aeabi_d2uiz>
 80014f4:	4603      	mov	r3, r0
 80014f6:	6363      	str	r3, [r4, #52]	; 0x34
 80014f8:	e050      	b.n	800159c <PID_Controller+0x41c>
 80014fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014fc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8001500:	2b04      	cmp	r3, #4
 8001502:	d117      	bne.n	8001534 <PID_Controller+0x3b4>
 8001504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001506:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800150a:	4b2a      	ldr	r3, [pc, #168]	; (80015b4 <PID_Controller+0x434>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff f83e 	bl	8000590 <__aeabi_dmul>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	613a      	str	r2, [r7, #16]
 800151a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001522:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8001526:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800152a:	f7ff facb 	bl	8000ac4 <__aeabi_d2uiz>
 800152e:	4603      	mov	r3, r0
 8001530:	63a3      	str	r3, [r4, #56]	; 0x38
 8001532:	e033      	b.n	800159c <PID_Controller+0x41c>
 8001534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001536:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800153a:	2b08      	cmp	r3, #8
 800153c:	d117      	bne.n	800156e <PID_Controller+0x3ee>
 800153e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001540:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8001544:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <PID_Controller+0x434>)
 8001546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154a:	f7ff f821 	bl	8000590 <__aeabi_dmul>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	60ba      	str	r2, [r7, #8]
 8001554:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800155c:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8001560:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001564:	f7ff faae 	bl	8000ac4 <__aeabi_d2uiz>
 8001568:	4603      	mov	r3, r0
 800156a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800156c:	e016      	b.n	800159c <PID_Controller+0x41c>
 800156e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001570:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <PID_Controller+0x434>)
 8001576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157a:	f7ff f809 	bl	8000590 <__aeabi_dmul>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	603a      	str	r2, [r7, #0]
 8001584:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800158c:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8001590:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001594:	f7ff fa96 	bl	8000ac4 <__aeabi_d2uiz>
 8001598:	4603      	mov	r3, r0
 800159a:	6423      	str	r3, [r4, #64]	; 0x40
	}
#endif


	Wheel_->rps_before = Wheel_->rps;
 800159c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800159e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80015a2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80015a4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 80015a8:	bf00      	nop
 80015aa:	3750      	adds	r7, #80	; 0x50
 80015ac:	46bd      	mov	sp, r7
 80015ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015b2:	bf00      	nop
 80015b4:	200000d8 	.word	0x200000d8

080015b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	4b10      	ldr	r3, [pc, #64]	; (8001604 <MX_DMA_Init+0x4c>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a0f      	ldr	r2, [pc, #60]	; (8001604 <MX_DMA_Init+0x4c>)
 80015c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <MX_DMA_Init+0x4c>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	2100      	movs	r1, #0
 80015de:	2010      	movs	r0, #16
 80015e0:	f003 fd25 	bl	800502e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80015e4:	2010      	movs	r0, #16
 80015e6:	f003 fd3e 	bl	8005066 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2100      	movs	r1, #0
 80015ee:	2011      	movs	r0, #17
 80015f0:	f003 fd1d 	bl	800502e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80015f4:	2011      	movs	r0, #17
 80015f6:	f003 fd36 	bl	8005066 <HAL_NVIC_EnableIRQ>

}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023800 	.word	0x40023800

08001608 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	; 0x28
 800160c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
 800161c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	4b3a      	ldr	r3, [pc, #232]	; (800170c <MX_GPIO_Init+0x104>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a39      	ldr	r2, [pc, #228]	; (800170c <MX_GPIO_Init+0x104>)
 8001628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b37      	ldr	r3, [pc, #220]	; (800170c <MX_GPIO_Init+0x104>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	4b33      	ldr	r3, [pc, #204]	; (800170c <MX_GPIO_Init+0x104>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a32      	ldr	r2, [pc, #200]	; (800170c <MX_GPIO_Init+0x104>)
 8001644:	f043 0304 	orr.w	r3, r3, #4
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b30      	ldr	r3, [pc, #192]	; (800170c <MX_GPIO_Init+0x104>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0304 	and.w	r3, r3, #4
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	4b2c      	ldr	r3, [pc, #176]	; (800170c <MX_GPIO_Init+0x104>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a2b      	ldr	r2, [pc, #172]	; (800170c <MX_GPIO_Init+0x104>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b29      	ldr	r3, [pc, #164]	; (800170c <MX_GPIO_Init+0x104>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	4b25      	ldr	r3, [pc, #148]	; (800170c <MX_GPIO_Init+0x104>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a24      	ldr	r2, [pc, #144]	; (800170c <MX_GPIO_Init+0x104>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b22      	ldr	r3, [pc, #136]	; (800170c <MX_GPIO_Init+0x104>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	210c      	movs	r1, #12
 8001692:	481f      	ldr	r0, [pc, #124]	; (8001710 <MX_GPIO_Init+0x108>)
 8001694:	f004 fbf8 	bl	8005e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	2106      	movs	r1, #6
 800169c:	481d      	ldr	r0, [pc, #116]	; (8001714 <MX_GPIO_Init+0x10c>)
 800169e:	f004 fbf3 	bl	8005e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80016a2:	2200      	movs	r2, #0
 80016a4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80016a8:	481b      	ldr	r0, [pc, #108]	; (8001718 <MX_GPIO_Init+0x110>)
 80016aa:	f004 fbed 	bl	8005e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016ae:	230c      	movs	r3, #12
 80016b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b2:	2301      	movs	r3, #1
 80016b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2300      	movs	r3, #0
 80016bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	4619      	mov	r1, r3
 80016c4:	4812      	ldr	r0, [pc, #72]	; (8001710 <MX_GPIO_Init+0x108>)
 80016c6:	f004 f957 	bl	8005978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80016ca:	2306      	movs	r3, #6
 80016cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ce:	2301      	movs	r3, #1
 80016d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	4619      	mov	r1, r3
 80016e0:	480c      	ldr	r0, [pc, #48]	; (8001714 <MX_GPIO_Init+0x10c>)
 80016e2:	f004 f949 	bl	8005978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016e6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	4806      	ldr	r0, [pc, #24]	; (8001718 <MX_GPIO_Init+0x110>)
 8001700:	f004 f93a 	bl	8005978 <HAL_GPIO_Init>

}
 8001704:	bf00      	nop
 8001706:	3728      	adds	r7, #40	; 0x28
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40023800 	.word	0x40023800
 8001710:	40020800 	.word	0x40020800
 8001714:	40020400 	.word	0x40020400
 8001718:	40020000 	.word	0x40020000

0800171c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001720:	f003 fb14 	bl	8004d4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001724:	f000 f822 	bl	800176c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001728:	f7ff ff6e 	bl	8001608 <MX_GPIO_Init>
  MX_DMA_Init();
 800172c:	f7ff ff44 	bl	80015b8 <MX_DMA_Init>
  MX_TIM3_Init();
 8001730:	f002 fe64 	bl	80043fc <MX_TIM3_Init>
  MX_TIM12_Init();
 8001734:	f002 ffda 	bl	80046ec <MX_TIM12_Init>
  MX_TIM2_Init();
 8001738:	f002 fe0c 	bl	8004354 <MX_TIM2_Init>
  MX_TIM4_Init();
 800173c:	f002 feac 	bl	8004498 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001740:	f002 fefe 	bl	8004540 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001744:	f002 ff50 	bl	80045e8 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8001748:	f003 f9ca 	bl	8004ae0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  a = 0;
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <main+0x48>)
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim3);
 8001752:	4805      	ldr	r0, [pc, #20]	; (8001768 <main+0x4c>)
 8001754:	f005 f9ea 	bl	8006b2c <HAL_TIM_Base_Start_IT>
  Controll_Init();
 8001758:	f7ff fb82 	bl	8000e60 <Controll_Init>
  Rosserial_Init();
 800175c:	f001 fe1a 	bl	8003394 <Rosserial_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001760:	e7fe      	b.n	8001760 <main+0x44>
 8001762:	bf00      	nop
 8001764:	200003ec 	.word	0x200003ec
 8001768:	200015e4 	.word	0x200015e4

0800176c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b094      	sub	sp, #80	; 0x50
 8001770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001772:	f107 031c 	add.w	r3, r7, #28
 8001776:	2234      	movs	r2, #52	; 0x34
 8001778:	2100      	movs	r1, #0
 800177a:	4618      	mov	r0, r3
 800177c:	f007 fd9c 	bl	80092b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001780:	f107 0308 	add.w	r3, r7, #8
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001790:	2300      	movs	r3, #0
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	4b2a      	ldr	r3, [pc, #168]	; (8001840 <SystemClock_Config+0xd4>)
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	4a29      	ldr	r2, [pc, #164]	; (8001840 <SystemClock_Config+0xd4>)
 800179a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800179e:	6413      	str	r3, [r2, #64]	; 0x40
 80017a0:	4b27      	ldr	r3, [pc, #156]	; (8001840 <SystemClock_Config+0xd4>)
 80017a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a8:	607b      	str	r3, [r7, #4]
 80017aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80017ac:	2300      	movs	r3, #0
 80017ae:	603b      	str	r3, [r7, #0]
 80017b0:	4b24      	ldr	r3, [pc, #144]	; (8001844 <SystemClock_Config+0xd8>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017b8:	4a22      	ldr	r2, [pc, #136]	; (8001844 <SystemClock_Config+0xd8>)
 80017ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	4b20      	ldr	r3, [pc, #128]	; (8001844 <SystemClock_Config+0xd8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017c8:	603b      	str	r3, [r7, #0]
 80017ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017cc:	2301      	movs	r3, #1
 80017ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80017d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80017d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017d6:	2302      	movs	r3, #2
 80017d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017e0:	2308      	movs	r3, #8
 80017e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80017e4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80017e8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80017ea:	2304      	movs	r3, #4
 80017ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80017ee:	2302      	movs	r3, #2
 80017f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017f2:	2302      	movs	r3, #2
 80017f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017f6:	f107 031c 	add.w	r3, r7, #28
 80017fa:	4618      	mov	r0, r3
 80017fc:	f004 fea8 	bl	8006550 <HAL_RCC_OscConfig>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001806:	f000 f875 	bl	80018f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800180a:	230f      	movs	r3, #15
 800180c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800180e:	2302      	movs	r3, #2
 8001810:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800181a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800181c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001820:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001822:	f107 0308 	add.w	r3, r7, #8
 8001826:	2102      	movs	r1, #2
 8001828:	4618      	mov	r0, r3
 800182a:	f004 fb47 	bl	8005ebc <HAL_RCC_ClockConfig>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001834:	f000 f85e 	bl	80018f4 <Error_Handler>
  }
}
 8001838:	bf00      	nop
 800183a:	3750      	adds	r7, #80	; 0x50
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40023800 	.word	0x40023800
 8001844:	40007000 	.word	0x40007000

08001848 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim3.Instance)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d110      	bne.n	800187e <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		WheelA.goal = 0.0;
 800185c:	490b      	ldr	r1, [pc, #44]	; (800188c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	f04f 0300 	mov.w	r3, #0
 8001866:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
//		WheelB.goal = 0.0;
//		WheelC.goal = 0.0;

		a++;
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	3301      	adds	r3, #1
 8001870:	4a07      	ldr	r2, [pc, #28]	; (8001890 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001872:	6013      	str	r3, [r2, #0]
		Rosserial_Spin();
 8001874:	f001 fd9e 	bl	80033b4 <Rosserial_Spin>
//			linearvelocity_x = 0.0;
//			linearvelocity_y = 0.0;
//			angularvelocity = 0.0;
//		}
//		Forward_Kinematics(linearvelocity_x, linearvelocity_y, angularvelocity);
		PID_Controller(&WheelA);
 8001878:	4804      	ldr	r0, [pc, #16]	; (800188c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800187a:	f7ff fc81 	bl	8001180 <PID_Controller>
//		PID_Controller(&WheelB);
//		PID_Controller(&WheelC);
	}

}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200015e4 	.word	0x200015e4
 800188c:	200000e8 	.word	0x200000e8
 8001890:	200003ec 	.word	0x200003ec

08001894 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a11      	ldr	r2, [pc, #68]	; (80018e4 <HAL_UART_ErrorCallback+0x50>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d11b      	bne.n	80018dc <HAL_UART_ErrorCallback+0x48>
	{
		linearvelocity_x = 0;
 80018a4:	4910      	ldr	r1, [pc, #64]	; (80018e8 <HAL_UART_ErrorCallback+0x54>)
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	f04f 0300 	mov.w	r3, #0
 80018ae:	e9c1 2300 	strd	r2, r3, [r1]
		linearvelocity_y = 0;
 80018b2:	490e      	ldr	r1, [pc, #56]	; (80018ec <HAL_UART_ErrorCallback+0x58>)
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	e9c1 2300 	strd	r2, r3, [r1]
		angularvelocity = 0;
 80018c0:	490b      	ldr	r1, [pc, #44]	; (80018f0 <HAL_UART_ErrorCallback+0x5c>)
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_UART_DeInit(&huart2);
 80018ce:	4805      	ldr	r0, [pc, #20]	; (80018e4 <HAL_UART_ErrorCallback+0x50>)
 80018d0:	f006 fae1 	bl	8007e96 <HAL_UART_DeInit>
		MX_USART2_UART_Init();
 80018d4:	f003 f904 	bl	8004ae0 <MX_USART2_UART_Init>
		Rosserial_GetHardware();
 80018d8:	f001 fd76 	bl	80033c8 <Rosserial_GetHardware>
	}
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	2000174c 	.word	0x2000174c
 80018e8:	200000b8 	.word	0x200000b8
 80018ec:	200000c0 	.word	0x200000c0
 80018f0:	200000c8 	.word	0x200000c8

080018f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f8:	b672      	cpsid	i
}
 80018fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018fc:	e7fe      	b.n	80018fc <Error_Handler+0x8>

080018fe <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4618      	mov	r0, r3
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	4a04      	ldr	r2, [pc, #16]	; (800193c <_ZN3ros3MsgC1Ev+0x1c>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4618      	mov	r0, r3
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	08009880 	.word	0x08009880

08001940 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
      data()
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff ffe8 	bl	8001920 <_ZN3ros3MsgC1Ev>
 8001950:	4a06      	ldr	r2, [pc, #24]	; (800196c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	3304      	adds	r3, #4
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff ffcf 	bl	80018fe <_ZN3ros4TimeC1Ev>
    {
    }
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	08009868 	.word	0x08009868

08001970 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6859      	ldr	r1, [r3, #4]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	4413      	add	r3, r2
 8001988:	b2ca      	uxtb	r2, r1
 800198a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	0a19      	lsrs	r1, r3, #8
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	3301      	adds	r3, #1
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	4413      	add	r3, r2
 800199a:	b2ca      	uxtb	r2, r1
 800199c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	0c19      	lsrs	r1, r3, #16
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	3302      	adds	r3, #2
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	4413      	add	r3, r2
 80019ac:	b2ca      	uxtb	r2, r1
 80019ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	0e19      	lsrs	r1, r3, #24
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	3303      	adds	r3, #3
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	4413      	add	r3, r2
 80019be:	b2ca      	uxtb	r2, r1
 80019c0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	3304      	adds	r3, #4
 80019c6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6899      	ldr	r1, [r3, #8]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	4413      	add	r3, r2
 80019d2:	b2ca      	uxtb	r2, r1
 80019d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	0a19      	lsrs	r1, r3, #8
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	3301      	adds	r3, #1
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	4413      	add	r3, r2
 80019e4:	b2ca      	uxtb	r2, r1
 80019e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	0c19      	lsrs	r1, r3, #16
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	3302      	adds	r3, #2
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	4413      	add	r3, r2
 80019f6:	b2ca      	uxtb	r2, r1
 80019f8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	0e19      	lsrs	r1, r3, #24
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	3303      	adds	r3, #3
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	4413      	add	r3, r2
 8001a08:	b2ca      	uxtb	r2, r1
 8001a0a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	3304      	adds	r3, #4
 8001a10:	60fb      	str	r3, [r7, #12]
      return offset;
 8001a12:	68fb      	ldr	r3, [r7, #12]
    }
 8001a14:	4618      	mov	r0, r3
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	4413      	add	r3, r2
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	461a      	mov	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	3301      	adds	r3, #1
 8001a44:	6839      	ldr	r1, [r7, #0]
 8001a46:	440b      	add	r3, r1
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	021b      	lsls	r3, r3, #8
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	3302      	adds	r3, #2
 8001a5a:	6839      	ldr	r1, [r7, #0]
 8001a5c:	440b      	add	r3, r1
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	041b      	lsls	r3, r3, #16
 8001a62:	431a      	orrs	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	3303      	adds	r3, #3
 8001a70:	6839      	ldr	r1, [r7, #0]
 8001a72:	440b      	add	r3, r1
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	061b      	lsls	r3, r3, #24
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	3304      	adds	r3, #4
 8001a82:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	4413      	add	r3, r2
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	6839      	ldr	r1, [r7, #0]
 8001a9c:	440b      	add	r3, r1
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	021b      	lsls	r3, r3, #8
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	3302      	adds	r3, #2
 8001ab0:	6839      	ldr	r1, [r7, #0]
 8001ab2:	440b      	add	r3, r1
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	041b      	lsls	r3, r3, #16
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	3303      	adds	r3, #3
 8001ac6:	6839      	ldr	r1, [r7, #0]
 8001ac8:	440b      	add	r3, r1
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	061b      	lsls	r3, r3, #24
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	3304      	adds	r3, #4
 8001ad8:	60fb      	str	r3, [r7, #12]
     return offset;
 8001ada:	68fb      	ldr	r3, [r7, #12]
    }
 8001adc:	4618      	mov	r0, r3
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	080095e4 	.word	0x080095e4

08001b04 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	4b03      	ldr	r3, [pc, #12]	; (8001b1c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	080095f4 	.word	0x080095f4

08001b20 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fef8 	bl	8001920 <_ZN3ros3MsgC1Ev>
 8001b30:	4a0b      	ldr	r2, [pc, #44]	; (8001b60 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	809a      	strh	r2, [r3, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a09      	ldr	r2, [pc, #36]	; (8001b64 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a07      	ldr	r2, [pc, #28]	; (8001b64 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001b46:	60da      	str	r2, [r3, #12]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a06      	ldr	r2, [pc, #24]	; (8001b64 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001b4c:	611a      	str	r2, [r3, #16]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	615a      	str	r2, [r3, #20]
    {
    }
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	08009850 	.word	0x08009850
 8001b64:	08009618 	.word	0x08009618

08001b68 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b088      	sub	sp, #32
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	8899      	ldrh	r1, [r3, #4]
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	4413      	add	r3, r2
 8001b80:	b2ca      	uxtb	r2, r1
 8001b82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	889b      	ldrh	r3, [r3, #4]
 8001b88:	0a1b      	lsrs	r3, r3, #8
 8001b8a:	b299      	uxth	r1, r3
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	b2ca      	uxtb	r2, r1
 8001b96:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	3302      	adds	r3, #2
 8001b9c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe fb30 	bl	8000208 <strlen>
 8001ba8:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	4413      	add	r3, r2
 8001bb0:	69b9      	ldr	r1, [r7, #24]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f001 fc16 	bl	80033e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	3304      	adds	r3, #4
 8001bbc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	18d0      	adds	r0, r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f007 fb66 	bl	800929c <memcpy>
      offset += length_topic_name;
 8001bd0:	69fa      	ldr	r2, [r7, #28]
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fb13 	bl	8000208 <strlen>
 8001be2:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	4413      	add	r3, r2
 8001bea:	6979      	ldr	r1, [r7, #20]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f001 fbf9 	bl	80033e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	18d0      	adds	r0, r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	4619      	mov	r1, r3
 8001c06:	f007 fb49 	bl	800929c <memcpy>
      offset += length_message_type;
 8001c0a:	69fa      	ldr	r2, [r7, #28]
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	4413      	add	r3, r2
 8001c10:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe faf6 	bl	8000208 <strlen>
 8001c1c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	4413      	add	r3, r2
 8001c24:	6939      	ldr	r1, [r7, #16]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f001 fbdc 	bl	80033e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	3304      	adds	r3, #4
 8001c30:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	18d0      	adds	r0, r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4619      	mov	r1, r3
 8001c40:	f007 fb2c 	bl	800929c <memcpy>
      offset += length_md5sum;
 8001c44:	69fa      	ldr	r2, [r7, #28]
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4413      	add	r3, r2
 8001c4a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001c52:	68f9      	ldr	r1, [r7, #12]
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	4413      	add	r3, r2
 8001c5a:	b2ca      	uxtb	r2, r1
 8001c5c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	0a19      	lsrs	r1, r3, #8
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	3301      	adds	r3, #1
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	4413      	add	r3, r2
 8001c6a:	b2ca      	uxtb	r2, r1
 8001c6c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	0c19      	lsrs	r1, r3, #16
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	3302      	adds	r3, #2
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	4413      	add	r3, r2
 8001c7a:	b2ca      	uxtb	r2, r1
 8001c7c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	0e19      	lsrs	r1, r3, #24
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3303      	adds	r3, #3
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	4413      	add	r3, r2
 8001c8a:	b2ca      	uxtb	r2, r1
 8001c8c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3304      	adds	r3, #4
 8001c92:	61fb      	str	r3, [r7, #28]
      return offset;
 8001c94:	69fb      	ldr	r3, [r7, #28]
    }
 8001c96:	4618      	mov	r0, r3
 8001c98:	3720      	adds	r7, #32
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b08a      	sub	sp, #40	; 0x28
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	889b      	ldrh	r3, [r3, #4]
 8001cbe:	b21a      	sxth	r2, r3
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	6839      	ldr	r1, [r7, #0]
 8001cc6:	440b      	add	r3, r1
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	021b      	lsls	r3, r3, #8
 8001ccc:	b21b      	sxth	r3, r3
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	b21b      	sxth	r3, r3
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	3302      	adds	r3, #2
 8001cdc:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	441a      	add	r2, r3
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	4611      	mov	r1, r2
 8001cea:	4618      	mov	r0, r3
 8001cec:	f001 fb98 	bl	8003420 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	4413      	add	r3, r2
 8001d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d20c      	bcs.n	8001d20 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	441a      	add	r2, r3
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	6839      	ldr	r1, [r7, #0]
 8001d12:	440b      	add	r3, r1
 8001d14:	7812      	ldrb	r2, [r2, #0]
 8001d16:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1e:	e7ec      	b.n	8001cfa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	4413      	add	r3, r2
 8001d26:	3b01      	subs	r3, #1
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	441a      	add	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	4413      	add	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	441a      	add	r2, r3
 8001d4a:	f107 0310 	add.w	r3, r7, #16
 8001d4e:	4611      	mov	r1, r2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f001 fb65 	bl	8003420 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	623b      	str	r3, [r7, #32]
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4413      	add	r3, r2
 8001d66:	6a3a      	ldr	r2, [r7, #32]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d20c      	bcs.n	8001d86 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
 8001d70:	441a      	add	r2, r3
 8001d72:	6a3b      	ldr	r3, [r7, #32]
 8001d74:	3b01      	subs	r3, #1
 8001d76:	6839      	ldr	r1, [r7, #0]
 8001d78:	440b      	add	r3, r1
 8001d7a:	7812      	ldrb	r2, [r2, #0]
 8001d7c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001d7e:	6a3b      	ldr	r3, [r7, #32]
 8001d80:	3301      	adds	r3, #1
 8001d82:	623b      	str	r3, [r7, #32]
 8001d84:	e7ec      	b.n	8001d60 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	4413      	add	r3, r2
 8001d92:	2200      	movs	r2, #0
 8001d94:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	441a      	add	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4413      	add	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	441a      	add	r2, r3
 8001db0:	f107 030c 	add.w	r3, r7, #12
 8001db4:	4611      	mov	r1, r2
 8001db6:	4618      	mov	r0, r3
 8001db8:	f001 fb32 	bl	8003420 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	3304      	adds	r3, #4
 8001dc0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	61fb      	str	r3, [r7, #28]
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4413      	add	r3, r2
 8001dcc:	69fa      	ldr	r2, [r7, #28]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d20c      	bcs.n	8001dec <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	441a      	add	r2, r3
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	6839      	ldr	r1, [r7, #0]
 8001dde:	440b      	add	r3, r1
 8001de0:	7812      	ldrb	r2, [r2, #0]
 8001de2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	3301      	adds	r3, #1
 8001de8:	61fb      	str	r3, [r7, #28]
 8001dea:	e7ec      	b.n	8001dc6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	4413      	add	r3, r2
 8001df2:	3b01      	subs	r3, #1
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	4413      	add	r3, r2
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	441a      	add	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	6839      	ldr	r1, [r7, #0]
 8001e1a:	440a      	add	r2, r1
 8001e1c:	7812      	ldrb	r2, [r2, #0]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	3301      	adds	r3, #1
 8001e28:	6839      	ldr	r1, [r7, #0]
 8001e2a:	440b      	add	r3, r1
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	021b      	lsls	r3, r3, #8
 8001e30:	4313      	orrs	r3, r2
 8001e32:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e34:	68ba      	ldr	r2, [r7, #8]
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	3302      	adds	r3, #2
 8001e3a:	6839      	ldr	r1, [r7, #0]
 8001e3c:	440b      	add	r3, r1
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	041b      	lsls	r3, r3, #16
 8001e42:	4313      	orrs	r3, r2
 8001e44:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	3303      	adds	r3, #3
 8001e4c:	6839      	ldr	r1, [r7, #0]
 8001e4e:	440b      	add	r3, r1
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	061b      	lsls	r3, r3, #24
 8001e54:	4313      	orrs	r3, r2
 8001e56:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001e58:	68ba      	ldr	r2, [r7, #8]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	3304      	adds	r3, #4
 8001e62:	61bb      	str	r3, [r7, #24]
     return offset;
 8001e64:	69bb      	ldr	r3, [r7, #24]
    }
 8001e66:	4618      	mov	r0, r3
 8001e68:	3728      	adds	r7, #40	; 0x28
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	4b03      	ldr	r3, [pc, #12]	; (8001e88 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	0800961c 	.word	0x0800961c

08001e8c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	4b03      	ldr	r3, [pc, #12]	; (8001ea4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	08009638 	.word	0x08009638

08001ea8 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff fd34 	bl	8001920 <_ZN3ros3MsgC1Ev>
 8001eb8:	4a06      	ldr	r2, [pc, #24]	; (8001ed4 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	711a      	strb	r2, [r3, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a04      	ldr	r2, [pc, #16]	; (8001ed8 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001ec8:	609a      	str	r2, [r3, #8]
    {
    }
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	08009838 	.word	0x08009838
 8001ed8:	08009618 	.word	0x08009618

08001edc <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	4413      	add	r3, r2
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	7912      	ldrb	r2, [r2, #4]
 8001ef4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe f981 	bl	8000208 <strlen>
 8001f06:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	68b9      	ldr	r1, [r7, #8]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f001 fa67 	bl	80033e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	18d0      	adds	r0, r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f007 f9b7 	bl	800929c <memcpy>
      offset += length_msg;
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	4413      	add	r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]
      return offset;
 8001f36:	68fb      	ldr	r3, [r7, #12]
    }
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	4413      	add	r3, r2
 8001f54:	781a      	ldrb	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	441a      	add	r2, r3
 8001f66:	f107 030c 	add.w	r3, r7, #12
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f001 fa57 	bl	8003420 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	3304      	adds	r3, #4
 8001f76:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	4413      	add	r3, r2
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d20c      	bcs.n	8001fa2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	441a      	add	r2, r3
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	3b01      	subs	r3, #1
 8001f92:	6839      	ldr	r1, [r7, #0]
 8001f94:	440b      	add	r3, r1
 8001f96:	7812      	ldrb	r2, [r2, #0]
 8001f98:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	e7ec      	b.n	8001f7c <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	4413      	add	r3, r2
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	441a      	add	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
     return offset;
 8001fc6:	693b      	ldr	r3, [r7, #16]
    }
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	0800965c 	.word	0x0800965c

08001fec <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	4b03      	ldr	r3, [pc, #12]	; (8002004 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	08009670 	.word	0x08009670

08002008 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff fc84 	bl	8001920 <_ZN3ros3MsgC1Ev>
 8002018:	4a0c      	ldr	r2, [pc, #48]	; (800204c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	605a      	str	r2, [r3, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	60da      	str	r2, [r3, #12]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	611a      	str	r2, [r3, #16]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	619a      	str	r2, [r3, #24]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	61da      	str	r2, [r3, #28]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4618      	mov	r0, r3
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	08009820 	.word	0x08009820

08002050 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002050:	b580      	push	{r7, lr}
 8002052:	b08a      	sub	sp, #40	; 0x28
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6859      	ldr	r1, [r3, #4]
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	4413      	add	r3, r2
 8002068:	b2ca      	uxtb	r2, r1
 800206a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	0a19      	lsrs	r1, r3, #8
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	3301      	adds	r3, #1
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	4413      	add	r3, r2
 800207a:	b2ca      	uxtb	r2, r1
 800207c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	0c19      	lsrs	r1, r3, #16
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	3302      	adds	r3, #2
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	4413      	add	r3, r2
 800208c:	b2ca      	uxtb	r2, r1
 800208e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	0e19      	lsrs	r1, r3, #24
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	3303      	adds	r3, #3
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	4413      	add	r3, r2
 800209e:	b2ca      	uxtb	r2, r1
 80020a0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	3304      	adds	r3, #4
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80020a8:	2300      	movs	r3, #0
 80020aa:	623b      	str	r3, [r7, #32]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	6a3a      	ldr	r2, [r7, #32]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d22b      	bcs.n	800210e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	6a3b      	ldr	r3, [r7, #32]
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80020c4:	6939      	ldr	r1, [r7, #16]
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	4413      	add	r3, r2
 80020cc:	b2ca      	uxtb	r2, r1
 80020ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	0a19      	lsrs	r1, r3, #8
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	3301      	adds	r3, #1
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	4413      	add	r3, r2
 80020dc:	b2ca      	uxtb	r2, r1
 80020de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	0c19      	lsrs	r1, r3, #16
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	3302      	adds	r3, #2
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	4413      	add	r3, r2
 80020ec:	b2ca      	uxtb	r2, r1
 80020ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	0e19      	lsrs	r1, r3, #24
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	3303      	adds	r3, #3
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	4413      	add	r3, r2
 80020fc:	b2ca      	uxtb	r2, r1
 80020fe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	3304      	adds	r3, #4
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002106:	6a3b      	ldr	r3, [r7, #32]
 8002108:	3301      	adds	r3, #1
 800210a:	623b      	str	r3, [r7, #32]
 800210c:	e7ce      	b.n	80020ac <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6919      	ldr	r1, [r3, #16]
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	4413      	add	r3, r2
 8002118:	b2ca      	uxtb	r2, r1
 800211a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	0a19      	lsrs	r1, r3, #8
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	3301      	adds	r3, #1
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	4413      	add	r3, r2
 800212a:	b2ca      	uxtb	r2, r1
 800212c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	0c19      	lsrs	r1, r3, #16
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	3302      	adds	r3, #2
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	4413      	add	r3, r2
 800213c:	b2ca      	uxtb	r2, r1
 800213e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	0e19      	lsrs	r1, r3, #24
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	3303      	adds	r3, #3
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	4413      	add	r3, r2
 800214e:	b2ca      	uxtb	r2, r1
 8002150:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	3304      	adds	r3, #4
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002158:	2300      	movs	r3, #0
 800215a:	61fb      	str	r3, [r7, #28]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	69fa      	ldr	r2, [r7, #28]
 8002162:	429a      	cmp	r2, r3
 8002164:	d22b      	bcs.n	80021be <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	699a      	ldr	r2, [r3, #24]
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002174:	68f9      	ldr	r1, [r7, #12]
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	4413      	add	r3, r2
 800217c:	b2ca      	uxtb	r2, r1
 800217e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	0a19      	lsrs	r1, r3, #8
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	3301      	adds	r3, #1
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	4413      	add	r3, r2
 800218c:	b2ca      	uxtb	r2, r1
 800218e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	0c19      	lsrs	r1, r3, #16
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	3302      	adds	r3, #2
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	4413      	add	r3, r2
 800219c:	b2ca      	uxtb	r2, r1
 800219e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	0e19      	lsrs	r1, r3, #24
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	3303      	adds	r3, #3
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	4413      	add	r3, r2
 80021ac:	b2ca      	uxtb	r2, r1
 80021ae:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	3304      	adds	r3, #4
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3301      	adds	r3, #1
 80021ba:	61fb      	str	r3, [r7, #28]
 80021bc:	e7ce      	b.n	800215c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69d9      	ldr	r1, [r3, #28]
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	4413      	add	r3, r2
 80021c8:	b2ca      	uxtb	r2, r1
 80021ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69db      	ldr	r3, [r3, #28]
 80021d0:	0a19      	lsrs	r1, r3, #8
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	3301      	adds	r3, #1
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	4413      	add	r3, r2
 80021da:	b2ca      	uxtb	r2, r1
 80021dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	0c19      	lsrs	r1, r3, #16
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	3302      	adds	r3, #2
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	4413      	add	r3, r2
 80021ec:	b2ca      	uxtb	r2, r1
 80021ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	0e19      	lsrs	r1, r3, #24
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	3303      	adds	r3, #3
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	4413      	add	r3, r2
 80021fe:	b2ca      	uxtb	r2, r1
 8002200:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	3304      	adds	r3, #4
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002208:	2300      	movs	r3, #0
 800220a:	61bb      	str	r3, [r7, #24]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	429a      	cmp	r2, r3
 8002214:	d228      	bcs.n	8002268 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f7fd fff0 	bl	8000208 <strlen>
 8002228:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	4413      	add	r3, r2
 8002230:	6979      	ldr	r1, [r7, #20]
 8002232:	4618      	mov	r0, r3
 8002234:	f001 f8d6 	bl	80033e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	3304      	adds	r3, #4
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	18d0      	adds	r0, r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	4619      	mov	r1, r3
 8002254:	f007 f822 	bl	800929c <memcpy>
      offset += length_stringsi;
 8002258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	4413      	add	r3, r2
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	3301      	adds	r3, #1
 8002264:	61bb      	str	r3, [r7, #24]
 8002266:	e7d1      	b.n	800220c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800226a:	4618      	mov	r0, r3
 800226c:	3728      	adds	r7, #40	; 0x28
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002272:	b580      	push	{r7, lr}
 8002274:	b08e      	sub	sp, #56	; 0x38
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	4413      	add	r3, r2
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800228a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800228c:	3301      	adds	r3, #1
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	4413      	add	r3, r2
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	021b      	lsls	r3, r3, #8
 8002296:	6a3a      	ldr	r2, [r7, #32]
 8002298:	4313      	orrs	r3, r2
 800229a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800229c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800229e:	3302      	adds	r3, #2
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	4413      	add	r3, r2
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	041b      	lsls	r3, r3, #16
 80022a8:	6a3a      	ldr	r2, [r7, #32]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80022ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022b0:	3303      	adds	r3, #3
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	4413      	add	r3, r2
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	061b      	lsls	r3, r3, #24
 80022ba:	6a3a      	ldr	r2, [r7, #32]
 80022bc:	4313      	orrs	r3, r2
 80022be:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80022c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c2:	3304      	adds	r3, #4
 80022c4:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	6a3a      	ldr	r2, [r7, #32]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d90a      	bls.n	80022e6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	6a3b      	ldr	r3, [r7, #32]
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4619      	mov	r1, r3
 80022da:	4610      	mov	r0, r2
 80022dc:	f006 fff4 	bl	80092c8 <realloc>
 80022e0:	4602      	mov	r2, r0
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a3a      	ldr	r2, [r7, #32]
 80022ea:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80022ec:	2300      	movs	r3, #0
 80022ee:	633b      	str	r3, [r7, #48]	; 0x30
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d236      	bcs.n	8002368 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002302:	6839      	ldr	r1, [r7, #0]
 8002304:	440a      	add	r2, r1
 8002306:	7812      	ldrb	r2, [r2, #0]
 8002308:	4313      	orrs	r3, r2
 800230a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002310:	3301      	adds	r3, #1
 8002312:	6839      	ldr	r1, [r7, #0]
 8002314:	440b      	add	r3, r1
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	021b      	lsls	r3, r3, #8
 800231a:	4313      	orrs	r3, r2
 800231c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002322:	3302      	adds	r3, #2
 8002324:	6839      	ldr	r1, [r7, #0]
 8002326:	440b      	add	r3, r1
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	041b      	lsls	r3, r3, #16
 800232c:	4313      	orrs	r3, r2
 800232e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002334:	3303      	adds	r3, #3
 8002336:	6839      	ldr	r1, [r7, #0]
 8002338:	440b      	add	r3, r1
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	061b      	lsls	r3, r3, #24
 800233e:	4313      	orrs	r3, r2
 8002340:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800234a:	3304      	adds	r3, #4
 800234c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68da      	ldr	r2, [r3, #12]
 8002352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	3208      	adds	r2, #8
 800235c:	6812      	ldr	r2, [r2, #0]
 800235e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002362:	3301      	adds	r3, #1
 8002364:	633b      	str	r3, [r7, #48]	; 0x30
 8002366:	e7c3      	b.n	80022f0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	4413      	add	r3, r2
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002374:	3301      	adds	r3, #1
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	4413      	add	r3, r2
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	021b      	lsls	r3, r3, #8
 800237e:	69fa      	ldr	r2, [r7, #28]
 8002380:	4313      	orrs	r3, r2
 8002382:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002386:	3302      	adds	r3, #2
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	4413      	add	r3, r2
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	041b      	lsls	r3, r3, #16
 8002390:	69fa      	ldr	r2, [r7, #28]
 8002392:	4313      	orrs	r3, r2
 8002394:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002398:	3303      	adds	r3, #3
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	4413      	add	r3, r2
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	061b      	lsls	r3, r3, #24
 80023a2:	69fa      	ldr	r2, [r7, #28]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80023a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023aa:	3304      	adds	r3, #4
 80023ac:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	69fa      	ldr	r2, [r7, #28]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d90a      	bls.n	80023ce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699a      	ldr	r2, [r3, #24]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4619      	mov	r1, r3
 80023c2:	4610      	mov	r0, r2
 80023c4:	f006 ff80 	bl	80092c8 <realloc>
 80023c8:	4602      	mov	r2, r0
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69fa      	ldr	r2, [r7, #28]
 80023d2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80023d4:	2300      	movs	r3, #0
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023de:	429a      	cmp	r2, r3
 80023e0:	d236      	bcs.n	8002450 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023ea:	6839      	ldr	r1, [r7, #0]
 80023ec:	440a      	add	r2, r1
 80023ee:	7812      	ldrb	r2, [r2, #0]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f8:	3301      	adds	r3, #1
 80023fa:	6839      	ldr	r1, [r7, #0]
 80023fc:	440b      	add	r3, r1
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	021b      	lsls	r3, r3, #8
 8002402:	4313      	orrs	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800240a:	3302      	adds	r3, #2
 800240c:	6839      	ldr	r1, [r7, #0]
 800240e:	440b      	add	r3, r1
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	041b      	lsls	r3, r3, #16
 8002414:	4313      	orrs	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800241c:	3303      	adds	r3, #3
 800241e:	6839      	ldr	r1, [r7, #0]
 8002420:	440b      	add	r3, r1
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	061b      	lsls	r3, r3, #24
 8002426:	4313      	orrs	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002432:	3304      	adds	r3, #4
 8002434:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699a      	ldr	r2, [r3, #24]
 800243a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	3214      	adds	r2, #20
 8002444:	6812      	ldr	r2, [r2, #0]
 8002446:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244a:	3301      	adds	r3, #1
 800244c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800244e:	e7c3      	b.n	80023d8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	4413      	add	r3, r2
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800245a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800245c:	3301      	adds	r3, #1
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	4413      	add	r3, r2
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	021b      	lsls	r3, r3, #8
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800246c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800246e:	3302      	adds	r3, #2
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	4413      	add	r3, r2
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	041b      	lsls	r3, r3, #16
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800247e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002480:	3303      	adds	r3, #3
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	4413      	add	r3, r2
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	061b      	lsls	r3, r3, #24
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002492:	3304      	adds	r3, #4
 8002494:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	429a      	cmp	r2, r3
 800249e:	d90a      	bls.n	80024b6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4619      	mov	r1, r3
 80024aa:	4610      	mov	r0, r2
 80024ac:	f006 ff0c 	bl	80092c8 <realloc>
 80024b0:	4602      	mov	r2, r0
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80024bc:	2300      	movs	r3, #0
 80024be:	62bb      	str	r3, [r7, #40]	; 0x28
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d23f      	bcs.n	800254a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80024ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	441a      	add	r2, r3
 80024d0:	f107 030c 	add.w	r3, r7, #12
 80024d4:	4611      	mov	r1, r2
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 ffa2 	bl	8003420 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80024dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024de:	3304      	adds	r3, #4
 80024e0:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80024e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
 80024e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4413      	add	r3, r2
 80024ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d20c      	bcs.n	800250c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	441a      	add	r2, r3
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	3b01      	subs	r3, #1
 80024fc:	6839      	ldr	r1, [r7, #0]
 80024fe:	440b      	add	r3, r1
 8002500:	7812      	ldrb	r2, [r2, #0]
 8002502:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	3301      	adds	r3, #1
 8002508:	627b      	str	r3, [r7, #36]	; 0x24
 800250a:	e7ec      	b.n	80024e6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800250c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4413      	add	r3, r2
 8002512:	3b01      	subs	r3, #1
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	4413      	add	r3, r2
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800251c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800251e:	3b01      	subs	r3, #1
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	441a      	add	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002528:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	4413      	add	r3, r2
 800252e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	3220      	adds	r2, #32
 800253e:	6812      	ldr	r2, [r2, #0]
 8002540:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002544:	3301      	adds	r3, #1
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28
 8002548:	e7ba      	b.n	80024c0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800254a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800254c:	4618      	mov	r0, r3
 800254e:	3738      	adds	r7, #56	; 0x38
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	4b03      	ldr	r3, [pc, #12]	; (800256c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800255e:	4618      	mov	r0, r3
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	08009774 	.word	0x08009774

08002570 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	4b03      	ldr	r3, [pc, #12]	; (8002588 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800257a:	4618      	mov	r0, r3
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	08009694 	.word	0x08009694

0800258c <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
  }
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 1024;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80025ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025be:	4618      	mov	r0, r3
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
	...

080025cc <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 1024;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a0a      	ldr	r2, [pc, #40]	; (8002600 <_ZN13STM32HardwareC1Ev+0x34>)
 80025d8:	605a      	str	r2, [r3, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
    }
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4618      	mov	r0, r3
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	2000174c 	.word	0x2000174c

08002604 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 f804 	bl	800261a <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002612:	bf00      	nop
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
    	HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6858      	ldr	r0, [r3, #4]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3308      	adds	r3, #8
 800262a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800262e:	4619      	mov	r1, r3
 8002630:	f005 fcde 	bl	8007ff0 <HAL_UART_Receive_DMA>
    }
 8002634:	bf00      	nop
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <_ZN13STM32Hardware4readEv>:

    int read(){
 800263c:	b590      	push	{r4, r7, lr}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002644:	f04f 33ff 	mov.w	r3, #4294967295
 8002648:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f8d3 4408 	ldr.w	r4, [r3, #1032]	; 0x408
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7ff ffa7 	bl	80025a4 <_ZN13STM32Hardware10getRdmaIndEv>
 8002656:	4603      	mov	r3, r0
 8002658:	429c      	cmp	r4, r3
 800265a:	bf14      	ite	ne
 800265c:	2301      	movne	r3, #1
 800265e:	2300      	moveq	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d012      	beq.n	800268c <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800266c:	1c59      	adds	r1, r3, #1
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	4413      	add	r3, r2
 8002678:	7a1b      	ldrb	r3, [r3, #8]
 800267a:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002682:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
      }
      return c;
 800268c:	68fb      	ldr	r3, [r7, #12]
    }
 800268e:	4618      	mov	r0, r3
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	bd90      	pop	{r4, r7, pc}
	...

08002698 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b20      	cmp	r3, #32
 80026ac:	d108      	bne.n	80026c0 <_ZN13STM32Hardware5flushEv+0x28>
 80026ae:	4b28      	ldr	r3, [pc, #160]	; (8002750 <_ZN13STM32Hardware5flushEv+0xb8>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	f083 0301 	eor.w	r3, r3, #1
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <_ZN13STM32Hardware5flushEv+0x28>
 80026bc:	2301      	movs	r3, #1
 80026be:	e000      	b.n	80026c2 <_ZN13STM32Hardware5flushEv+0x2a>
 80026c0:	2300      	movs	r3, #0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d040      	beq.n	8002748 <_ZN13STM32Hardware5flushEv+0xb0>
        mutex = true;
 80026c6:	4b22      	ldr	r3, [pc, #136]	; (8002750 <_ZN13STM32Hardware5flushEv+0xb8>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 80026d8:	429a      	cmp	r2, r3
 80026da:	d032      	beq.n	8002742 <_ZN13STM32Hardware5flushEv+0xaa>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d20a      	bcs.n	8002702 <_ZN13STM32Hardware5flushEv+0x6a>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	b29b      	uxth	r3, r3
 8002700:	e006      	b.n	8002710 <_ZN13STM32Hardware5flushEv+0x78>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 8002708:	b29b      	uxth	r3, r3
 800270a:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800270e:	b29b      	uxth	r3, r3
 8002710:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6858      	ldr	r0, [r3, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
 800271c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	4413      	add	r3, r2
 8002724:	3304      	adds	r3, #4
 8002726:	89fa      	ldrh	r2, [r7, #14]
 8002728:	4619      	mov	r1, r3
 800272a:	f005 fbe3 	bl	8007ef4 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 8002734:	89fb      	ldrh	r3, [r7, #14]
 8002736:	4413      	add	r3, r2
 8002738:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
        }
        mutex = false;
 8002742:	4b03      	ldr	r3, [pc, #12]	; (8002750 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002744:	2200      	movs	r2, #0
 8002746:	701a      	strb	r2, [r3, #0]
      }
    }
 8002748:	bf00      	nop
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	200003f0 	.word	0x200003f0

08002754 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
      int n = length;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800276a:	bfa8      	it	ge
 800276c:	f44f 6380 	movge.w	r3, #1024	; 0x400
 8002770:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002778:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	4293      	cmp	r3, r2
 8002780:	bf28      	it	cs
 8002782:	4613      	movcs	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 800278c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	4413      	add	r3, r2
 8002794:	3304      	adds	r3, #4
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	68b9      	ldr	r1, [r7, #8]
 800279a:	4618      	mov	r0, r3
 800279c:	f006 fd7e 	bl	800929c <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	4413      	add	r3, r2
 80027aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c

      if(n != n_tail){
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d00b      	beq.n	80027d4 <_ZN13STM32Hardware5writeEPhi+0x80>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f203 400c 	addw	r0, r3, #1036	; 0x40c
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	18d1      	adds	r1, r2, r3
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	461a      	mov	r2, r3
 80027d0:	f006 fd64 	bl	800929c <memcpy>
      }

      flush();
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f7ff ff5f 	bl	8002698 <_ZN13STM32Hardware5flushEv>
    }
 80027da:	bf00      	nop
 80027dc:	3718      	adds	r7, #24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	f002 fb15 	bl	8004e18 <HAL_GetTick>
 80027ee:	4603      	mov	r3, r0
 80027f0:	4618      	mov	r0, r3
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff f88c 	bl	8001920 <_ZN3ros3MsgC1Ev>
 8002808:	4a0e      	ldr	r2, [pc, #56]	; (8002844 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	f04f 0300 	mov.w	r3, #0
 8002826:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	f04f 0300 	mov.w	r3, #0
 8002834:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	080097dc 	.word	0x080097dc

08002848 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002848:	b480      	push	{r7}
 800284a:	b08b      	sub	sp, #44	; 0x2c
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002852:	2300      	movs	r3, #0
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800285c:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002860:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002864:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002866:	6838      	ldr	r0, [r7, #0]
 8002868:	4401      	add	r1, r0
 800286a:	b2d3      	uxtb	r3, r2
 800286c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800286e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	f04f 0300 	mov.w	r3, #0
 800287a:	0a02      	lsrs	r2, r0, #8
 800287c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002880:	0a0b      	lsrs	r3, r1, #8
 8002882:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002884:	3101      	adds	r1, #1
 8002886:	6838      	ldr	r0, [r7, #0]
 8002888:	4401      	add	r1, r0
 800288a:	b2d3      	uxtb	r3, r2
 800288c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800288e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	f04f 0300 	mov.w	r3, #0
 800289a:	0c02      	lsrs	r2, r0, #16
 800289c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80028a0:	0c0b      	lsrs	r3, r1, #16
 80028a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028a4:	3102      	adds	r1, #2
 80028a6:	6838      	ldr	r0, [r7, #0]
 80028a8:	4401      	add	r1, r0
 80028aa:	b2d3      	uxtb	r3, r2
 80028ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80028ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	f04f 0300 	mov.w	r3, #0
 80028ba:	0e02      	lsrs	r2, r0, #24
 80028bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80028c0:	0e0b      	lsrs	r3, r1, #24
 80028c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028c4:	3103      	adds	r1, #3
 80028c6:	6838      	ldr	r0, [r7, #0]
 80028c8:	4401      	add	r1, r0
 80028ca:	b2d3      	uxtb	r3, r2
 80028cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80028ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80028d2:	f04f 0200 	mov.w	r2, #0
 80028d6:	f04f 0300 	mov.w	r3, #0
 80028da:	000a      	movs	r2, r1
 80028dc:	2300      	movs	r3, #0
 80028de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028e0:	3104      	adds	r1, #4
 80028e2:	6838      	ldr	r0, [r7, #0]
 80028e4:	4401      	add	r1, r0
 80028e6:	b2d3      	uxtb	r3, r2
 80028e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80028ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	f04f 0300 	mov.w	r3, #0
 80028f6:	0a0a      	lsrs	r2, r1, #8
 80028f8:	2300      	movs	r3, #0
 80028fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028fc:	3105      	adds	r1, #5
 80028fe:	6838      	ldr	r0, [r7, #0]
 8002900:	4401      	add	r1, r0
 8002902:	b2d3      	uxtb	r3, r2
 8002904:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002906:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	0c0a      	lsrs	r2, r1, #16
 8002914:	2300      	movs	r3, #0
 8002916:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002918:	3106      	adds	r1, #6
 800291a:	6838      	ldr	r0, [r7, #0]
 800291c:	4401      	add	r1, r0
 800291e:	b2d3      	uxtb	r3, r2
 8002920:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002922:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002926:	f04f 0200 	mov.w	r2, #0
 800292a:	f04f 0300 	mov.w	r3, #0
 800292e:	0e0a      	lsrs	r2, r1, #24
 8002930:	2300      	movs	r3, #0
 8002932:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002934:	3107      	adds	r1, #7
 8002936:	6838      	ldr	r0, [r7, #0]
 8002938:	4401      	add	r1, r0
 800293a:	b2d3      	uxtb	r3, r2
 800293c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	3308      	adds	r3, #8
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800294a:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800294e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002952:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002954:	6838      	ldr	r0, [r7, #0]
 8002956:	4401      	add	r1, r0
 8002958:	b2d3      	uxtb	r3, r2
 800295a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 800295c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	f04f 0300 	mov.w	r3, #0
 8002968:	0a02      	lsrs	r2, r0, #8
 800296a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800296e:	0a0b      	lsrs	r3, r1, #8
 8002970:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002972:	3101      	adds	r1, #1
 8002974:	6838      	ldr	r0, [r7, #0]
 8002976:	4401      	add	r1, r0
 8002978:	b2d3      	uxtb	r3, r2
 800297a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 800297c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002980:	f04f 0200 	mov.w	r2, #0
 8002984:	f04f 0300 	mov.w	r3, #0
 8002988:	0c02      	lsrs	r2, r0, #16
 800298a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800298e:	0c0b      	lsrs	r3, r1, #16
 8002990:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002992:	3102      	adds	r1, #2
 8002994:	6838      	ldr	r0, [r7, #0]
 8002996:	4401      	add	r1, r0
 8002998:	b2d3      	uxtb	r3, r2
 800299a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 800299c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	f04f 0300 	mov.w	r3, #0
 80029a8:	0e02      	lsrs	r2, r0, #24
 80029aa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80029ae:	0e0b      	lsrs	r3, r1, #24
 80029b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029b2:	3103      	adds	r1, #3
 80029b4:	6838      	ldr	r0, [r7, #0]
 80029b6:	4401      	add	r1, r0
 80029b8:	b2d3      	uxtb	r3, r2
 80029ba:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80029bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80029c0:	f04f 0200 	mov.w	r2, #0
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	000a      	movs	r2, r1
 80029ca:	2300      	movs	r3, #0
 80029cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029ce:	3104      	adds	r1, #4
 80029d0:	6838      	ldr	r0, [r7, #0]
 80029d2:	4401      	add	r1, r0
 80029d4:	b2d3      	uxtb	r3, r2
 80029d6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80029d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	f04f 0300 	mov.w	r3, #0
 80029e4:	0a0a      	lsrs	r2, r1, #8
 80029e6:	2300      	movs	r3, #0
 80029e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029ea:	3105      	adds	r1, #5
 80029ec:	6838      	ldr	r0, [r7, #0]
 80029ee:	4401      	add	r1, r0
 80029f0:	b2d3      	uxtb	r3, r2
 80029f2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80029f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	f04f 0300 	mov.w	r3, #0
 8002a00:	0c0a      	lsrs	r2, r1, #16
 8002a02:	2300      	movs	r3, #0
 8002a04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a06:	3106      	adds	r1, #6
 8002a08:	6838      	ldr	r0, [r7, #0]
 8002a0a:	4401      	add	r1, r0
 8002a0c:	b2d3      	uxtb	r3, r2
 8002a0e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002a10:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	f04f 0300 	mov.w	r3, #0
 8002a1c:	0e0a      	lsrs	r2, r1, #24
 8002a1e:	2300      	movs	r3, #0
 8002a20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a22:	3107      	adds	r1, #7
 8002a24:	6838      	ldr	r0, [r7, #0]
 8002a26:	4401      	add	r1, r0
 8002a28:	b2d3      	uxtb	r3, r2
 8002a2a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	3308      	adds	r3, #8
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002a38:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002a3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a42:	6838      	ldr	r0, [r7, #0]
 8002a44:	4401      	add	r1, r0
 8002a46:	b2d3      	uxtb	r3, r2
 8002a48:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002a4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	0a02      	lsrs	r2, r0, #8
 8002a58:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002a5c:	0a0b      	lsrs	r3, r1, #8
 8002a5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a60:	3101      	adds	r1, #1
 8002a62:	6838      	ldr	r0, [r7, #0]
 8002a64:	4401      	add	r1, r0
 8002a66:	b2d3      	uxtb	r3, r2
 8002a68:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002a6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	f04f 0300 	mov.w	r3, #0
 8002a76:	0c02      	lsrs	r2, r0, #16
 8002a78:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002a7c:	0c0b      	lsrs	r3, r1, #16
 8002a7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a80:	3102      	adds	r1, #2
 8002a82:	6838      	ldr	r0, [r7, #0]
 8002a84:	4401      	add	r1, r0
 8002a86:	b2d3      	uxtb	r3, r2
 8002a88:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002a8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	f04f 0300 	mov.w	r3, #0
 8002a96:	0e02      	lsrs	r2, r0, #24
 8002a98:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002a9c:	0e0b      	lsrs	r3, r1, #24
 8002a9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aa0:	3103      	adds	r1, #3
 8002aa2:	6838      	ldr	r0, [r7, #0]
 8002aa4:	4401      	add	r1, r0
 8002aa6:	b2d3      	uxtb	r3, r2
 8002aa8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002aaa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	f04f 0300 	mov.w	r3, #0
 8002ab6:	000a      	movs	r2, r1
 8002ab8:	2300      	movs	r3, #0
 8002aba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002abc:	3104      	adds	r1, #4
 8002abe:	6838      	ldr	r0, [r7, #0]
 8002ac0:	4401      	add	r1, r0
 8002ac2:	b2d3      	uxtb	r3, r2
 8002ac4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002ac6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002aca:	f04f 0200 	mov.w	r2, #0
 8002ace:	f04f 0300 	mov.w	r3, #0
 8002ad2:	0a0a      	lsrs	r2, r1, #8
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ad8:	3105      	adds	r1, #5
 8002ada:	6838      	ldr	r0, [r7, #0]
 8002adc:	4401      	add	r1, r0
 8002ade:	b2d3      	uxtb	r3, r2
 8002ae0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002ae2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ae6:	f04f 0200 	mov.w	r2, #0
 8002aea:	f04f 0300 	mov.w	r3, #0
 8002aee:	0c0a      	lsrs	r2, r1, #16
 8002af0:	2300      	movs	r3, #0
 8002af2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002af4:	3106      	adds	r1, #6
 8002af6:	6838      	ldr	r0, [r7, #0]
 8002af8:	4401      	add	r1, r0
 8002afa:	b2d3      	uxtb	r3, r2
 8002afc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002afe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b02:	f04f 0200 	mov.w	r2, #0
 8002b06:	f04f 0300 	mov.w	r3, #0
 8002b0a:	0e0a      	lsrs	r2, r1, #24
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b10:	3107      	adds	r1, #7
 8002b12:	6838      	ldr	r0, [r7, #0]
 8002b14:	4401      	add	r1, r0
 8002b16:	b2d3      	uxtb	r3, r2
 8002b18:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	3308      	adds	r3, #8
 8002b1e:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002b22:	4618      	mov	r0, r3
 8002b24:	372c      	adds	r7, #44	; 0x2c
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002b2e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002b32:	b0eb      	sub	sp, #428	; 0x1ac
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8002b3a:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	f04f 0300 	mov.w	r3, #0
 8002b4c:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002b50:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002b54:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002b58:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b5c:	4413      	add	r3, r2
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2200      	movs	r2, #0
 8002b64:	461c      	mov	r4, r3
 8002b66:	4615      	mov	r5, r2
 8002b68:	ea40 0804 	orr.w	r8, r0, r4
 8002b6c:	ea41 0905 	orr.w	r9, r1, r5
 8002b70:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002b74:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002b78:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b82:	4413      	add	r3, r2
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2200      	movs	r2, #0
 8002b8a:	469a      	mov	sl, r3
 8002b8c:	4693      	mov	fp, r2
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	f04f 0300 	mov.w	r3, #0
 8002b96:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002b9a:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002b9e:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002ba2:	ea40 0402 	orr.w	r4, r0, r2
 8002ba6:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002baa:	430b      	orrs	r3, r1
 8002bac:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002bb0:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002bb4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002bb8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002bbc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002bc0:	1c9a      	adds	r2, r3, #2
 8002bc2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002bc6:	4413      	add	r3, r2
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002bd2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002be2:	464c      	mov	r4, r9
 8002be4:	0423      	lsls	r3, r4, #16
 8002be6:	4644      	mov	r4, r8
 8002be8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002bec:	4644      	mov	r4, r8
 8002bee:	0422      	lsls	r2, r4, #16
 8002bf0:	ea40 0402 	orr.w	r4, r0, r2
 8002bf4:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002bf8:	430b      	orrs	r3, r1
 8002bfa:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002bfe:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002c02:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002c06:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002c0a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c0e:	1cda      	adds	r2, r3, #3
 8002c10:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c14:	4413      	add	r3, r2
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002c20:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002c24:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002c28:	4623      	mov	r3, r4
 8002c2a:	0a1b      	lsrs	r3, r3, #8
 8002c2c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002c30:	4623      	mov	r3, r4
 8002c32:	061b      	lsls	r3, r3, #24
 8002c34:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002c38:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002c3c:	4623      	mov	r3, r4
 8002c3e:	4303      	orrs	r3, r0
 8002c40:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002c44:	462b      	mov	r3, r5
 8002c46:	430b      	orrs	r3, r1
 8002c48:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002c4c:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002c50:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002c54:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002c58:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c5c:	1d1a      	adds	r2, r3, #4
 8002c5e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c62:	4413      	add	r3, r2
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002c6e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8002c7e:	0023      	movs	r3, r4
 8002c80:	2200      	movs	r2, #0
 8002c82:	ea40 0402 	orr.w	r4, r0, r2
 8002c86:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8002c8a:	430b      	orrs	r3, r1
 8002c8c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002c90:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002c94:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002c98:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002c9c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ca0:	1d5a      	adds	r2, r3, #5
 8002ca2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ca6:	4413      	add	r3, r2
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	2200      	movs	r2, #0
 8002cae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002cb2:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	f04f 0300 	mov.w	r3, #0
 8002cbe:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8002cc2:	0223      	lsls	r3, r4, #8
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	ea40 0402 	orr.w	r4, r0, r2
 8002cca:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8002cce:	430b      	orrs	r3, r1
 8002cd0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002cd4:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002cd8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002cdc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002ce0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ce4:	1d9a      	adds	r2, r3, #6
 8002ce6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cea:	4413      	add	r3, r2
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002cf6:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8002d06:	0423      	lsls	r3, r4, #16
 8002d08:	2200      	movs	r2, #0
 8002d0a:	ea40 0402 	orr.w	r4, r0, r2
 8002d0e:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8002d12:	430b      	orrs	r3, r1
 8002d14:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002d18:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8002d1c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002d20:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002d24:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d28:	1dda      	adds	r2, r3, #7
 8002d2a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d2e:	4413      	add	r3, r2
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2200      	movs	r2, #0
 8002d36:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002d3a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8002d4a:	0623      	lsls	r3, r4, #24
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	ea40 0402 	orr.w	r4, r0, r2
 8002d52:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8002d56:	430b      	orrs	r3, r1
 8002d58:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002d5c:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002d60:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002d64:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002d68:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002d6c:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002d70:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d74:	3308      	adds	r3, #8
 8002d76:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002d86:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002d8a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002d8e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d92:	4413      	add	r3, r2
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002d9e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002da2:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002da6:	4623      	mov	r3, r4
 8002da8:	4303      	orrs	r3, r0
 8002daa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002dae:	462b      	mov	r3, r5
 8002db0:	430b      	orrs	r3, r1
 8002db2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002db6:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002dba:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002dbe:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002dc2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002dc6:	1c5a      	adds	r2, r3, #1
 8002dc8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002dcc:	4413      	add	r3, r2
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002dd8:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002de8:	464c      	mov	r4, r9
 8002dea:	0223      	lsls	r3, r4, #8
 8002dec:	4644      	mov	r4, r8
 8002dee:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002df2:	4644      	mov	r4, r8
 8002df4:	0222      	lsls	r2, r4, #8
 8002df6:	ea40 0402 	orr.w	r4, r0, r2
 8002dfa:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002dfe:	430b      	orrs	r3, r1
 8002e00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002e04:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002e08:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002e0c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002e10:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e14:	1c9a      	adds	r2, r3, #2
 8002e16:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e1a:	4413      	add	r3, r2
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2200      	movs	r2, #0
 8002e22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002e36:	464c      	mov	r4, r9
 8002e38:	0423      	lsls	r3, r4, #16
 8002e3a:	4644      	mov	r4, r8
 8002e3c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002e40:	4644      	mov	r4, r8
 8002e42:	0422      	lsls	r2, r4, #16
 8002e44:	ea40 0402 	orr.w	r4, r0, r2
 8002e48:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e52:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002e56:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e5a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002e5e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e62:	1cda      	adds	r2, r3, #3
 8002e64:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e68:	4413      	add	r3, r2
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e74:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002e78:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002e7c:	4623      	mov	r3, r4
 8002e7e:	0a1b      	lsrs	r3, r3, #8
 8002e80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002e84:	4623      	mov	r3, r4
 8002e86:	061b      	lsls	r3, r3, #24
 8002e88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e8c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002e90:	4623      	mov	r3, r4
 8002e92:	4303      	orrs	r3, r0
 8002e94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e98:	462b      	mov	r3, r5
 8002e9a:	430b      	orrs	r3, r1
 8002e9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ea0:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002ea4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002ea8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002eac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002eb0:	1d1a      	adds	r2, r3, #4
 8002eb2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002eb6:	4413      	add	r3, r2
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ec2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002ec6:	f04f 0200 	mov.w	r2, #0
 8002eca:	f04f 0300 	mov.w	r3, #0
 8002ece:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002ed2:	0023      	movs	r3, r4
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	ea40 0402 	orr.w	r4, r0, r2
 8002eda:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8002ede:	430b      	orrs	r3, r1
 8002ee0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002ee4:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002ee8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002eec:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002ef0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ef4:	1d5a      	adds	r2, r3, #5
 8002ef6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002efa:	4413      	add	r3, r2
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2200      	movs	r2, #0
 8002f02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f06:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002f16:	0223      	lsls	r3, r4, #8
 8002f18:	2200      	movs	r2, #0
 8002f1a:	ea40 0402 	orr.w	r4, r0, r2
 8002f1e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002f22:	430b      	orrs	r3, r1
 8002f24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f28:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002f2c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002f30:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002f34:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f38:	1d9a      	adds	r2, r3, #6
 8002f3a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f3e:	4413      	add	r3, r2
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2200      	movs	r2, #0
 8002f46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8002f5a:	0423      	lsls	r3, r4, #16
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	ea40 0402 	orr.w	r4, r0, r2
 8002f62:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002f66:	430b      	orrs	r3, r1
 8002f68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f6c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002f70:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002f74:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002f78:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f7c:	1dda      	adds	r2, r3, #7
 8002f7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f82:	4413      	add	r3, r2
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f92:	f04f 0200 	mov.w	r2, #0
 8002f96:	f04f 0300 	mov.w	r3, #0
 8002f9a:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8002f9e:	0623      	lsls	r3, r4, #24
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	ea40 0402 	orr.w	r4, r0, r2
 8002fa6:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002faa:	430b      	orrs	r3, r1
 8002fac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002fb0:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002fb4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002fb8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002fbc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002fc0:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002fc4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fc8:	3308      	adds	r3, #8
 8002fca:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002fda:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002fde:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002fe2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002fe6:	4413      	add	r3, r2
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2200      	movs	r2, #0
 8002fee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ff2:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002ff6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002ffa:	4623      	mov	r3, r4
 8002ffc:	4303      	orrs	r3, r0
 8002ffe:	67bb      	str	r3, [r7, #120]	; 0x78
 8003000:	462b      	mov	r3, r5
 8003002:	430b      	orrs	r3, r1
 8003004:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003006:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800300a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800300e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003012:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003016:	1c5a      	adds	r2, r3, #1
 8003018:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800301c:	4413      	add	r3, r2
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2200      	movs	r2, #0
 8003024:	673b      	str	r3, [r7, #112]	; 0x70
 8003026:	677a      	str	r2, [r7, #116]	; 0x74
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003034:	464c      	mov	r4, r9
 8003036:	0223      	lsls	r3, r4, #8
 8003038:	4644      	mov	r4, r8
 800303a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800303e:	4644      	mov	r4, r8
 8003040:	0222      	lsls	r2, r4, #8
 8003042:	ea40 0402 	orr.w	r4, r0, r2
 8003046:	66bc      	str	r4, [r7, #104]	; 0x68
 8003048:	430b      	orrs	r3, r1
 800304a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800304c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003050:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003054:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003058:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800305c:	1c9a      	adds	r2, r3, #2
 800305e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003062:	4413      	add	r3, r2
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2200      	movs	r2, #0
 800306a:	663b      	str	r3, [r7, #96]	; 0x60
 800306c:	667a      	str	r2, [r7, #100]	; 0x64
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800307a:	464c      	mov	r4, r9
 800307c:	0423      	lsls	r3, r4, #16
 800307e:	4644      	mov	r4, r8
 8003080:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003084:	4644      	mov	r4, r8
 8003086:	0422      	lsls	r2, r4, #16
 8003088:	ea40 0402 	orr.w	r4, r0, r2
 800308c:	65bc      	str	r4, [r7, #88]	; 0x58
 800308e:	430b      	orrs	r3, r1
 8003090:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003092:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003096:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800309a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800309e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80030a2:	1cda      	adds	r2, r3, #3
 80030a4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80030a8:	4413      	add	r3, r2
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2200      	movs	r2, #0
 80030b0:	653b      	str	r3, [r7, #80]	; 0x50
 80030b2:	657a      	str	r2, [r7, #84]	; 0x54
 80030b4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80030b8:	4623      	mov	r3, r4
 80030ba:	0a1b      	lsrs	r3, r3, #8
 80030bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030be:	4623      	mov	r3, r4
 80030c0:	061b      	lsls	r3, r3, #24
 80030c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80030c4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80030c8:	4623      	mov	r3, r4
 80030ca:	4303      	orrs	r3, r0
 80030cc:	643b      	str	r3, [r7, #64]	; 0x40
 80030ce:	462b      	mov	r3, r5
 80030d0:	430b      	orrs	r3, r1
 80030d2:	647b      	str	r3, [r7, #68]	; 0x44
 80030d4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80030d8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80030dc:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80030e0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80030e4:	1d1a      	adds	r2, r3, #4
 80030e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80030ea:	4413      	add	r3, r2
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2200      	movs	r2, #0
 80030f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80030f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003100:	0023      	movs	r3, r4
 8003102:	2200      	movs	r2, #0
 8003104:	ea40 0402 	orr.w	r4, r0, r2
 8003108:	633c      	str	r4, [r7, #48]	; 0x30
 800310a:	430b      	orrs	r3, r1
 800310c:	637b      	str	r3, [r7, #52]	; 0x34
 800310e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003112:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003116:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800311a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800311e:	1d5a      	adds	r2, r3, #5
 8003120:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003124:	4413      	add	r3, r2
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2200      	movs	r2, #0
 800312c:	62bb      	str	r3, [r7, #40]	; 0x28
 800312e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003130:	f04f 0200 	mov.w	r2, #0
 8003134:	f04f 0300 	mov.w	r3, #0
 8003138:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800313a:	0223      	lsls	r3, r4, #8
 800313c:	2200      	movs	r2, #0
 800313e:	ea40 0402 	orr.w	r4, r0, r2
 8003142:	623c      	str	r4, [r7, #32]
 8003144:	430b      	orrs	r3, r1
 8003146:	627b      	str	r3, [r7, #36]	; 0x24
 8003148:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800314c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003150:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003154:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003158:	3306      	adds	r3, #6
 800315a:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800315e:	4413      	add	r3, r2
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2200      	movs	r2, #0
 8003166:	61bb      	str	r3, [r7, #24]
 8003168:	61fa      	str	r2, [r7, #28]
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	69bc      	ldr	r4, [r7, #24]
 8003174:	0423      	lsls	r3, r4, #16
 8003176:	2200      	movs	r2, #0
 8003178:	ea40 0402 	orr.w	r4, r0, r2
 800317c:	613c      	str	r4, [r7, #16]
 800317e:	430b      	orrs	r3, r1
 8003180:	617b      	str	r3, [r7, #20]
 8003182:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003186:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800318a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800318e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003192:	3307      	adds	r3, #7
 8003194:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003198:	4413      	add	r3, r2
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2200      	movs	r2, #0
 80031a0:	60bb      	str	r3, [r7, #8]
 80031a2:	60fa      	str	r2, [r7, #12]
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	f04f 0300 	mov.w	r3, #0
 80031ac:	68bc      	ldr	r4, [r7, #8]
 80031ae:	0623      	lsls	r3, r4, #24
 80031b0:	2200      	movs	r2, #0
 80031b2:	ea40 0402 	orr.w	r4, r0, r2
 80031b6:	603c      	str	r4, [r7, #0]
 80031b8:	430b      	orrs	r3, r1
 80031ba:	607b      	str	r3, [r7, #4]
 80031bc:	e9d7 3400 	ldrd	r3, r4, [r7]
 80031c0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 80031c4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80031c8:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 80031cc:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 80031d0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80031d4:	3308      	adds	r3, #8
 80031d6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 80031da:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 80031de:	4618      	mov	r0, r3
 80031e0:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 80031e4:	46bd      	mov	sp, r7
 80031e6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80031ea:	4770      	bx	lr

080031ec <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	4b03      	ldr	r3, [pc, #12]	; (8003204 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 80031f6:	4618      	mov	r0, r3
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	080096b8 	.word	0x080096b8

08003208 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	4b03      	ldr	r3, [pc, #12]	; (8003220 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8003212:	4618      	mov	r0, r3
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	080096d0 	.word	0x080096d0

08003224 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4618      	mov	r0, r3
 8003230:	f7fe fb76 	bl	8001920 <_ZN3ros3MsgC1Ev>
 8003234:	4a08      	ldr	r2, [pc, #32]	; (8003258 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	3308      	adds	r3, #8
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff fada 	bl	80027f8 <_ZN13geometry_msgs7Vector3C1Ev>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3328      	adds	r3, #40	; 0x28
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff fad5 	bl	80027f8 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4618      	mov	r0, r3
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	080097c4 	.word	0x080097c4

0800325c <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f103 0008 	add.w	r0, r3, #8
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	4413      	add	r3, r2
 8003276:	4619      	mov	r1, r3
 8003278:	f7ff fae6 	bl	8002848 <_ZNK13geometry_msgs7Vector39serializeEPh>
 800327c:	4602      	mov	r2, r0
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	4413      	add	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	4413      	add	r3, r2
 8003290:	4619      	mov	r1, r3
 8003292:	f7ff fad9 	bl	8002848 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003296:	4602      	mov	r2, r0
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4413      	add	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]
      return offset;
 800329e:	68fb      	ldr	r3, [r7, #12]
    }
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80032b2:	2300      	movs	r3, #0
 80032b4:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f103 0008 	add.w	r0, r3, #8
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	4413      	add	r3, r2
 80032c2:	4619      	mov	r1, r3
 80032c4:	f7ff fc33 	bl	8002b2e <_ZN13geometry_msgs7Vector311deserializeEPh>
 80032c8:	4602      	mov	r2, r0
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4413      	add	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	4413      	add	r3, r2
 80032dc:	4619      	mov	r1, r3
 80032de:	f7ff fc26 	bl	8002b2e <_ZN13geometry_msgs7Vector311deserializeEPh>
 80032e2:	4602      	mov	r2, r0
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4413      	add	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
     return offset;
 80032ea:	68fb      	ldr	r3, [r7, #12]
    }
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	4b03      	ldr	r3, [pc, #12]	; (800330c <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 80032fe:	4618      	mov	r0, r3
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	080096f4 	.word	0x080096f4

08003310 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	4b03      	ldr	r3, [pc, #12]	; (8003328 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 800331a:	4618      	mov	r0, r3
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	08009708 	.word	0x08009708

0800332c <_Z12vel_callbackRKN13geometry_msgs5TwistE>:
#include <ros.h>
#include <rosserial.h>
#include "geometry_msgs/TwistWithCovariance.h"

void vel_callback(const geometry_msgs::Twist &msg)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
	linearvelocity_x = msg.linear.x;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800333a:	490a      	ldr	r1, [pc, #40]	; (8003364 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x38>)
 800333c:	e9c1 2300 	strd	r2, r3, [r1]
	linearvelocity_y = msg.linear.y;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003346:	4908      	ldr	r1, [pc, #32]	; (8003368 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x3c>)
 8003348:	e9c1 2300 	strd	r2, r3, [r1]
	angularvelocity = msg.angular.z;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003352:	4906      	ldr	r1, [pc, #24]	; (800336c <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x40>)
 8003354:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	200000b8 	.word	0x200000b8
 8003368:	200000c0 	.word	0x200000c0
 800336c:	200000c8 	.word	0x200000c8

08003370 <HAL_UART_TxCpltCallback>:
//----------------------------definition of ros----------------------------
ros::NodeHandle nh;
ros::Subscriber<geometry_msgs::Twist> vel_sub("/cmd_vel", vel_callback);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8003378:	4805      	ldr	r0, [pc, #20]	; (8003390 <HAL_UART_TxCpltCallback+0x20>)
 800337a:	f000 f951 	bl	8003620 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 800337e:	4603      	mov	r3, r0
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff f989 	bl	8002698 <_ZN13STM32Hardware5flushEv>
}
 8003386:	bf00      	nop
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	200003f4 	.word	0x200003f4

08003394 <Rosserial_Init>:

void Rosserial_Init(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
    nh.initNode();
 8003398:	4804      	ldr	r0, [pc, #16]	; (80033ac <Rosserial_Init+0x18>)
 800339a:	f000 f94d 	bl	8003638 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>
    nh.subscribe(vel_sub);
 800339e:	4904      	ldr	r1, [pc, #16]	; (80033b0 <Rosserial_Init+0x1c>)
 80033a0:	4802      	ldr	r0, [pc, #8]	; (80033ac <Rosserial_Init+0x18>)
 80033a2:	f000 f972 	bl	800368a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
}
 80033a6:	bf00      	nop
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	200003f4 	.word	0x200003f4
 80033b0:	20001538 	.word	0x20001538

080033b4 <Rosserial_Spin>:

void Rosserial_Spin(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
		nh.spinOnce();
 80033b8:	4802      	ldr	r0, [pc, #8]	; (80033c4 <Rosserial_Spin+0x10>)
 80033ba:	f000 f993 	bl	80036e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>
}
 80033be:	bf00      	nop
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	200003f4 	.word	0x200003f4

080033c8 <Rosserial_GetHardware>:
{
		return nh.config_state();
}

void Rosserial_GetHardware(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
		nh.getHardware()->init();
 80033cc:	4804      	ldr	r0, [pc, #16]	; (80033e0 <Rosserial_GetHardware+0x18>)
 80033ce:	f000 f927 	bl	8003620 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 80033d2:	4603      	mov	r3, r0
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff f915 	bl	8002604 <_ZN13STM32Hardware4initEv>
}
 80033da:	bf00      	nop
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	200003f4 	.word	0x200003f4

080033e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80033ee:	2300      	movs	r3, #0
 80033f0:	60fb      	str	r3, [r7, #12]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2b03      	cmp	r3, #3
 80033f6:	d80d      	bhi.n	8003414 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	fa22 f103 	lsr.w	r1, r2, r3
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4413      	add	r3, r2
 8003408:	b2ca      	uxtb	r2, r1
 800340a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	3301      	adds	r3, #1
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	e7ee      	b.n	80033f2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003414:	bf00      	nop
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003430:	2300      	movs	r3, #0
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2b03      	cmp	r3, #3
 8003438:	d811      	bhi.n	800345e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6839      	ldr	r1, [r7, #0]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	440a      	add	r2, r1
 8003444:	7812      	ldrb	r2, [r2, #0]
 8003446:	4611      	mov	r1, r2
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	00d2      	lsls	r2, r2, #3
 800344c:	fa01 f202 	lsl.w	r2, r1, r2
 8003450:	431a      	orrs	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	3301      	adds	r3, #1
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	e7ea      	b.n	8003434 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800345e:	bf00      	nop
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
	...

0800346c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	4a04      	ldr	r2, [pc, #16]	; (8003488 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4618      	mov	r0, r3
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	0800980c 	.word	0x0800980c

0800348c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff ffe8 	bl	800346c <_ZN3ros15NodeHandleBase_C1Ev>
 800349c:	4a45      	ldr	r2, [pc, #276]	; (80035b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x128>)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3304      	adds	r3, #4
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff f890 	bl	80025cc <_ZN13STM32HardwareC1Ev>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80034be:	3318      	adds	r3, #24
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fe fda1 	bl	8002008 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2b18      	cmp	r3, #24
 80034ce:	d80a      	bhi.n	80034e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x5a>
      publishers[i] = 0;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 80034d8:	2100      	movs	r1, #0
 80034da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	3301      	adds	r3, #1
 80034e2:	617b      	str	r3, [r7, #20]
 80034e4:	e7f1      	b.n	80034ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80034e6:	2300      	movs	r3, #0
 80034e8:	613b      	str	r3, [r7, #16]
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	2b18      	cmp	r3, #24
 80034ee:	d80b      	bhi.n	8003508 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x7c>
      subscribers[i] = 0;
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f203 4322 	addw	r3, r3, #1058	; 0x422
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	2200      	movs	r2, #0
 80034fe:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	3301      	adds	r3, #1
 8003504:	613b      	str	r3, [r7, #16]
 8003506:	e7f0      	b.n	80034ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x5e>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003508:	2300      	movs	r3, #0
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003512:	d20a      	bcs.n	800352a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x9e>
      message_in[i] = 0;
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	4413      	add	r3, r2
 800351a:	f603 0328 	addw	r3, r3, #2088	; 0x828
 800351e:	2200      	movs	r2, #0
 8003520:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	3301      	adds	r3, #1
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	e7f0      	b.n	800350c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800352a:	2300      	movs	r3, #0
 800352c:	60bb      	str	r3, [r7, #8]
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003534:	d20a      	bcs.n	800354c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xc0>
      message_out[i] = 0;
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4413      	add	r3, r2
 800353c:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 8003540:	2200      	movs	r2, #0
 8003542:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	3301      	adds	r3, #1
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	e7f0      	b.n	800352e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xa2>

    req_param_resp.ints_length = 0;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003552:	461a      	mov	r2, r3
 8003554:	2300      	movs	r3, #0
 8003556:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    req_param_resp.ints = NULL;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003560:	461a      	mov	r2, r3
 8003562:	2300      	movs	r3, #0
 8003564:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    req_param_resp.floats_length = 0;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800356e:	461a      	mov	r2, r3
 8003570:	2300      	movs	r3, #0
 8003572:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
    req_param_resp.floats = NULL;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800357c:	461a      	mov	r2, r3
 800357e:	2300      	movs	r3, #0
 8003580:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
    req_param_resp.ints_length = 0;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800358a:	461a      	mov	r2, r3
 800358c:	2300      	movs	r3, #0
 800358e:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    req_param_resp.ints = NULL;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003598:	461a      	mov	r2, r3
 800359a:	2300      	movs	r3, #0
 800359c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124

    spin_timeout_ = 0;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
  }
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4618      	mov	r0, r3
 80035ac:	3718      	adds	r7, #24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	080097b0 	.word	0x080097b0

080035b8 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	4a04      	ldr	r2, [pc, #16]	; (80035d4 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	601a      	str	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4618      	mov	r0, r3
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	080097f4 	.word	0x080097f4

080035d8 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
 80035e4:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff ffe5 	bl	80035b8 <_ZN3ros11Subscriber_C1Ev>
 80035ee:	4a0b      	ldr	r2, [pc, #44]	; (800361c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	3310      	adds	r3, #16
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7ff fe13 	bl	8003224 <_ZN13geometry_msgs5TwistC1Ev>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	659a      	str	r2, [r3, #88]	; 0x58
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	609a      	str	r2, [r3, #8]
  };
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	08009798 	.word	0x08009798

08003620 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>:

  Hardware* getHardware()
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3304      	adds	r3, #4
  }
 800362c:	4618      	mov	r0, r3
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3304      	adds	r3, #4
 8003644:	4618      	mov	r0, r3
 8003646:	f7fe ffdd 	bl	8002604 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003650:	461a      	mov	r2, r3
 8003652:	2300      	movs	r3, #0
 8003654:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    bytes_ = 0;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800365e:	461a      	mov	r2, r3
 8003660:	2300      	movs	r3, #0
 8003662:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    index_ = 0;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800366c:	461a      	mov	r2, r3
 800366e:	2300      	movs	r3, #0
 8003670:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    topic_ = 0;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800367a:	461a      	mov	r2, r3
 800367c:	2300      	movs	r3, #0
 800367e:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
  };
 8003682:	bf00      	nop
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800368a:	b480      	push	{r7}
 800368c:	b085      	sub	sp, #20
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
 8003692:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003694:	2300      	movs	r3, #0
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2b18      	cmp	r3, #24
 800369c:	dc1b      	bgt.n	80036d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f203 4322 	addw	r3, r3, #1058	; 0x422
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10e      	bne.n	80036ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x44>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f203 4322 	addw	r3, r3, #1058	; 0x422
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	605a      	str	r2, [r3, #4]
        return true;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e004      	b.n	80036d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	3301      	adds	r3, #1
 80036d2:	60fb      	str	r3, [r7, #12]
 80036d4:	e7e0      	b.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 80036d6:	2300      	movs	r3, #0
  }
 80036d8:	4618      	mov	r0, r3
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce()
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3304      	adds	r3, #4
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff f876 	bl	80027e2 <_ZN13STM32Hardware4timeEv>
 80036f6:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036fe:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800370a:	4293      	cmp	r3, r2
 800370c:	d905      	bls.n	800371a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x36>
      configured_ = false;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    if (mode_ != MODE_FIRST_FF)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003720:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00e      	beq.n	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800372e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	429a      	cmp	r2, r3
 8003736:	d906      	bls.n	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800373e:	461a      	mov	r2, r3
 8003740:	2300      	movs	r3, #0
 8003742:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      if (spin_timeout_ > 0)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 800374c:	2b00      	cmp	r3, #0
 800374e:	d014      	beq.n	800377a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3304      	adds	r3, #4
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff f844 	bl	80027e2 <_ZN13STM32Hardware4timeEv>
 800375a:	4602      	mov	r2, r0
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	1ad2      	subs	r2, r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 8003766:	429a      	cmp	r2, r3
 8003768:	bf8c      	ite	hi
 800376a:	2301      	movhi	r3, #1
 800376c:	2300      	movls	r3, #0
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
          return SPIN_TIMEOUT;
 8003774:	f06f 0301 	mvn.w	r3, #1
 8003778:	e221      	b.n	8003bbe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
      int data = hardware_.read();
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	3304      	adds	r3, #4
 800377e:	4618      	mov	r0, r3
 8003780:	f7fe ff5c 	bl	800263c <_ZN13STM32Hardware4readEv>
 8003784:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b00      	cmp	r3, #0
 800378a:	f2c0 81fa 	blt.w	8003b82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x49e>
      checksum_ += data;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003794:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4413      	add	r3, r2
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80037a2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037b0:	2b07      	cmp	r3, #7
 80037b2:	d12b      	bne.n	800380c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x128>
        message_in[index_++] = data;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037ba:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80037c6:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	b2d1      	uxtb	r1, r2
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	4413      	add	r3, r2
 80037d2:	460a      	mov	r2, r1
 80037d4:	f883 2828 	strb.w	r2, [r3, #2088]	; 0x828
        bytes_--;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80037e2:	3b01      	subs	r3, #1
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80037ea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1a4      	bne.n	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003802:	461a      	mov	r2, r3
 8003804:	2308      	movs	r3, #8
 8003806:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800380a:	e79c      	b.n	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003812:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d130      	bne.n	800387c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x198>
        if (data == 0xff)
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2bff      	cmp	r3, #255	; 0xff
 800381e:	d112      	bne.n	8003846 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x162>
          mode_++;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003826:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800382a:	3301      	adds	r3, #1
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003832:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	3314      	adds	r3, #20
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003840:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
 8003844:	e77f      	b.n	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3304      	adds	r3, #4
 800384a:	4618      	mov	r0, r3
 800384c:	f7fe ffc9 	bl	80027e2 <_ZN13STM32Hardware4timeEv>
 8003850:	4602      	mov	r2, r0
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	f241 3288 	movw	r2, #5000	; 0x1388
 800385a:	4293      	cmp	r3, r2
 800385c:	bf8c      	ite	hi
 800385e:	2301      	movhi	r3, #1
 8003860:	2300      	movls	r3, #0
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	f43f af6e 	beq.w	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          configured_ = false;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
          return SPIN_TIMEOUT;
 8003876:	f06f 0301 	mvn.w	r3, #1
 800387a:	e1a0      	b.n	8003bbe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
      else if (mode_ == MODE_PROTOCOL_VER)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003882:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003886:	2b01      	cmp	r3, #1
 8003888:	d121      	bne.n	80038ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1ea>
        if (data == PROTOCOL_VER)
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2bfe      	cmp	r3, #254	; 0xfe
 800388e:	d10b      	bne.n	80038a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1c4>
          mode_++;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003896:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800389a:	3301      	adds	r3, #1
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80038a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038a6:	e74e      	b.n	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ae:	461a      	mov	r2, r3
 80038b0:	2300      	movs	r3, #0
 80038b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
          if (configured_ == false)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038bc:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f47f af40 	bne.w	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f97d 	bl	8003bc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
 80038cc:	e73b      	b.n	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d120      	bne.n	800391e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x23a>
        bytes_ = data;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038e2:	461a      	mov	r2, r3
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        index_ = 0;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038f0:	461a      	mov	r2, r3
 80038f2:	2300      	movs	r3, #0
 80038f4:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
        mode_++;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003902:	3301      	adds	r3, #1
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800390a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        checksum_ = data;               /* first byte for calculating size checksum */
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003914:	461a      	mov	r2, r3
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 800391c:	e713      	b.n	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003924:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003928:	2b03      	cmp	r3, #3
 800392a:	d118      	bne.n	800395e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x27a>
        bytes_ += data << 8;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003932:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	021b      	lsls	r3, r3, #8
 800393a:	4413      	add	r3, r2
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003942:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_++;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800394c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003950:	3301      	adds	r3, #1
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003958:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800395c:	e6f3      	b.n	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003964:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003968:	2b04      	cmp	r3, #4
 800396a:	d11f      	bne.n	80039ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2c8>
        if ((checksum_ % 256) == 255)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003972:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003976:	425a      	negs	r2, r3
 8003978:	b2db      	uxtb	r3, r3
 800397a:	b2d2      	uxtb	r2, r2
 800397c:	bf58      	it	pl
 800397e:	4253      	negpl	r3, r2
 8003980:	2bff      	cmp	r3, #255	; 0xff
 8003982:	d10b      	bne.n	800399c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2b8>
          mode_++;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800398a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800398e:	3301      	adds	r3, #1
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003996:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800399a:	e6d4      	b.n	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039a2:	461a      	mov	r2, r3
 80039a4:	2300      	movs	r3, #0
 80039a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80039aa:	e6cc      	b.n	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039b6:	2b05      	cmp	r3, #5
 80039b8:	d119      	bne.n	80039ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x30a>
        topic_ = data;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039c0:	461a      	mov	r2, r3
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
        mode_++;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039d2:	3301      	adds	r3, #1
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80039da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        checksum_ = data;               /* first byte included in checksum */
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039e4:	461a      	mov	r2, r3
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 80039ec:	e6ab      	b.n	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039f8:	2b06      	cmp	r3, #6
 80039fa:	d123      	bne.n	8003a44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x360>
        topic_ += data << 8;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a02:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	021b      	lsls	r3, r3, #8
 8003a0a:	4413      	add	r3, r2
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a12:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
        mode_ = MODE_MESSAGE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	2307      	movs	r3, #7
 8003a20:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        if (bytes_ == 0)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f47f ae89 	bne.w	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	2308      	movs	r3, #8
 8003a3e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a42:	e680      	b.n	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a4e:	2b08      	cmp	r3, #8
 8003a50:	f47f ae79 	bne.w	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        if ((checksum_ % 256) == 255)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a68:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003a6c:	425a      	negs	r2, r3
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	b2d2      	uxtb	r2, r2
 8003a72:	bf58      	it	pl
 8003a74:	4253      	negpl	r3, r2
 8003a76:	2bff      	cmp	r3, #255	; 0xff
 8003a78:	f47f ae65 	bne.w	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a82:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d116      	bne.n	8003ab8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3d4>
            requestSyncTime();
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f89b 	bl	8003bc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 f8b6 	bl	8003c02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            last_sync_receive_time = c_time;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aaa:	461a      	mov	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            return SPIN_ERR;
 8003ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ab6:	e082      	b.n	8003bbe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
          else if (topic_ == TopicInfo::ID_TIME)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003abe:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003ac2:	2b0a      	cmp	r3, #10
 8003ac4:	d107      	bne.n	8003ad6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3f2>
            syncTime(message_in);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f603 0328 	addw	r3, r3, #2088	; 0x828
 8003acc:	4619      	mov	r1, r3
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f97a 	bl	8003dc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>
 8003ad4:	e637      	b.n	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003adc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003ae0:	2b06      	cmp	r3, #6
 8003ae2:	d111      	bne.n	8003b08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x424>
            req_param_resp.deserialize(message_in);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003aea:	3318      	adds	r3, #24
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	f602 0228 	addw	r2, r2, #2088	; 0x828
 8003af2:	4611      	mov	r1, r2
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fe fbbc 	bl	8002272 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 8003b06:	e61e      	b.n	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b0e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003b12:	2b0b      	cmp	r3, #11
 8003b14:	d106      	bne.n	8003b24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x440>
            configured_ = false;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
 8003b22:	e610      	b.n	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b2a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003b2e:	3b64      	subs	r3, #100	; 0x64
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f43f ae02 	beq.w	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b48:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003b4c:	3b64      	subs	r3, #100	; 0x64
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4413      	add	r3, r2
 8003b58:	6858      	ldr	r0, [r3, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b60:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003b64:	3b64      	subs	r3, #100	; 0x64
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	f602 0228 	addw	r2, r2, #2088	; 0x828
 8003b7c:	4611      	mov	r1, r2
 8003b7e:	4798      	blx	r3
    while (true)
 8003b80:	e5e1      	b.n	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        break;
 8003b82:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b8a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d014      	beq.n	8003bbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b98:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d909      	bls.n	8003bbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
      requestSyncTime();
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f80c 	bl	8003bc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    return SPIN_OK;
 8003bbc:	2300      	movs	r3, #0
  }
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b086      	sub	sp, #24
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003bce:	f107 030c 	add.w	r3, r7, #12
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fd feb4 	bl	8001940 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f107 020c 	add.w	r2, r7, #12
 8003be2:	210a      	movs	r1, #10
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	4798      	blx	r3
    rt_time = hardware_.time();
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3304      	adds	r3, #4
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7fe fdf8 	bl	80027e2 <_ZN13STM32Hardware4timeEv>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
  }
 8003bfa:	bf00      	nop
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8003c02:	b590      	push	{r4, r7, lr}
 8003c04:	b08b      	sub	sp, #44	; 0x2c
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003c0a:	f107 030c 	add.w	r3, r7, #12
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fd ff86 	bl	8001b20 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003c14:	2300      	movs	r3, #0
 8003c16:	627b      	str	r3, [r7, #36]	; 0x24
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	2b18      	cmp	r3, #24
 8003c1c:	dc5b      	bgt.n	8003cd6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xd4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c22:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d04f      	beq.n	8003cce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xcc>
      {
        ti.topic_id = publishers[i]->id_;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c32:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c44:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c54:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c5c:	6859      	ldr	r1, [r3, #4]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c62:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	3308      	adds	r3, #8
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4608      	mov	r0, r1
 8003c74:	4798      	blx	r3
 8003c76:	4603      	mov	r3, r0
 8003c78:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c7e:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c86:	6859      	ldr	r1, [r3, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c8c:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	330c      	adds	r3, #12
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4608      	mov	r0, r1
 8003c9e:	4798      	blx	r3
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ca8:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681c      	ldr	r4, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb4:	f202 420a 	addw	r2, r2, #1034	; 0x40a
 8003cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fe fc65 	bl	800258c <_ZN3ros9Publisher15getEndpointTypeEv>
 8003cc2:	4601      	mov	r1, r0
 8003cc4:	f107 030c 	add.w	r3, r7, #12
 8003cc8:	461a      	mov	r2, r3
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd4:	e7a0      	b.n	8003c18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	2b18      	cmp	r3, #24
 8003cde:	dc68      	bgt.n	8003db2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1b0>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d05b      	beq.n	8003daa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1a8>
      {
        ti.topic_id = subscribers[i]->id_;
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	6859      	ldr	r1, [r3, #4]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4413      	add	r3, r2
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3308      	adds	r3, #8
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4608      	mov	r0, r1
 8003d3c:	4798      	blx	r3
 8003d3e:	4603      	mov	r3, r0
 8003d40:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	6859      	ldr	r1, [r3, #4]
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4413      	add	r3, r2
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	330c      	adds	r3, #12
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4608      	mov	r0, r1
 8003d66:	4798      	blx	r3
 8003d68:	4603      	mov	r3, r0
 8003d6a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003d6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d70:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681c      	ldr	r4, [r3, #0]
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	6859      	ldr	r1, [r3, #4]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	f203 4322 	addw	r3, r3, #1058	; 0x422
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3304      	adds	r3, #4
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4608      	mov	r0, r1
 8003d9c:	4798      	blx	r3
 8003d9e:	4601      	mov	r1, r0
 8003da0:	f107 030c 	add.w	r3, r7, #12
 8003da4:	461a      	mov	r2, r3
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	3301      	adds	r3, #1
 8003dae:	627b      	str	r3, [r7, #36]	; 0x24
 8003db0:	e793      	b.n	8003cda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xd8>
      }
    }
    configured_ = true;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
  }
 8003dbe:	bf00      	nop
 8003dc0:	372c      	adds	r7, #44	; 0x2c
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd90      	pop	{r4, r7, pc}
	...

08003dc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003dd2:	f107 0308 	add.w	r3, r7, #8
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7fd fdb2 	bl	8001940 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3304      	adds	r3, #4
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7fe fcfe 	bl	80027e2 <_ZN13STM32Hardware4timeEv>
 8003de6:	4602      	mov	r2, r0
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003df2:	f107 0308 	add.w	r3, r7, #8
 8003df6:	6839      	ldr	r1, [r7, #0]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fd fe11 	bl	8001a20 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	4916      	ldr	r1, [pc, #88]	; (8003e5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8003e04:	fba1 1303 	umull	r1, r3, r1, r3
 8003e08:	099b      	lsrs	r3, r3, #6
 8003e0a:	4413      	add	r3, r2
 8003e0c:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003e0e:	6939      	ldr	r1, [r7, #16]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	4b12      	ldr	r3, [pc, #72]	; (8003e5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8003e14:	fba3 0302 	umull	r0, r3, r3, r2
 8003e18:	099b      	lsrs	r3, r3, #6
 8003e1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e1e:	fb00 f303 	mul.w	r3, r0, r3
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	4a0e      	ldr	r2, [pc, #56]	; (8003e60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x98>)
 8003e26:	fb02 f303 	mul.w	r3, r2, r3
 8003e2a:	440b      	add	r3, r1
 8003e2c:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003e2e:	f107 0308 	add.w	r3, r7, #8
 8003e32:	3304      	adds	r3, #4
 8003e34:	4619      	mov	r1, r3
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f8aa 	bl	8003f90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3304      	adds	r3, #4
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7fe fcce 	bl	80027e2 <_ZN13STM32Hardware4timeEv>
 8003e46:	4602      	mov	r2, r0
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e4e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  }
 8003e52:	bf00      	nop
 8003e54:	3718      	adds	r7, #24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	10624dd3 	.word	0x10624dd3
 8003e60:	000f4240 	.word	0x000f4240

08003e64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b088      	sub	sp, #32
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	2b63      	cmp	r3, #99	; 0x63
 8003e74:	dd0b      	ble.n	8003e8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e7c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8003e80:	f083 0301 	eor.w	r3, r3, #1
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	e079      	b.n	8003f82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	f602 4228 	addw	r2, r2, #3112	; 0xc28
 8003e9a:	3207      	adds	r2, #7
 8003e9c:	4611      	mov	r1, r2
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	4798      	blx	r3
 8003ea2:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	22ff      	movs	r2, #255	; 0xff
 8003ea8:	f883 2c28 	strb.w	r2, [r3, #3112]	; 0xc28
    message_out[1] = PROTOCOL_VER;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	22fe      	movs	r2, #254	; 0xfe
 8003eb0:	f883 2c29 	strb.w	r2, [r3, #3113]	; 0xc29
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f883 2c2a 	strb.w	r2, [r3, #3114]	; 0xc2a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	0a1b      	lsrs	r3, r3, #8
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f883 2c2b 	strb.w	r2, [r3, #3115]	; 0xc2b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f893 2c2a 	ldrb.w	r2, [r3, #3114]	; 0xc2a
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f893 3c2b 	ldrb.w	r3, [r3, #3115]	; 0xc2b
 8003eda:	4413      	add	r3, r2
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f883 2c2c 	strb.w	r2, [r3, #3116]	; 0xc2c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f883 2c2d 	strb.w	r2, [r3, #3117]	; 0xc2d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	b21b      	sxth	r3, r3
 8003ef6:	121b      	asrs	r3, r3, #8
 8003ef8:	b21b      	sxth	r3, r3
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f883 2c2e 	strb.w	r2, [r3, #3118]	; 0xc2e

    /* calculate checksum */
    int chk = 0;
 8003f02:	2300      	movs	r3, #0
 8003f04:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003f06:	2305      	movs	r3, #5
 8003f08:	61bb      	str	r3, [r7, #24]
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	3306      	adds	r3, #6
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	dc0d      	bgt.n	8003f30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xcc>
      chk += message_out[i];
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	461a      	mov	r2, r3
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	4413      	add	r3, r2
 8003f26:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	61bb      	str	r3, [r7, #24]
 8003f2e:	e7ec      	b.n	8003f0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xa6>
    l += 7;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	3307      	adds	r3, #7
 8003f34:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	425a      	negs	r2, r3
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	bf58      	it	pl
 8003f40:	4253      	negpl	r3, r2
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	1c59      	adds	r1, r3, #1
 8003f48:	6179      	str	r1, [r7, #20]
 8003f4a:	43d2      	mvns	r2, r2
 8003f4c:	b2d1      	uxtb	r1, r2
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4413      	add	r3, r2
 8003f52:	460a      	mov	r2, r1
 8003f54:	f883 2c28 	strb.w	r2, [r3, #3112]	; 0xc28

    if (l <= OUTPUT_SIZE)
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f5e:	dc0a      	bgt.n	8003f76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x112>
    {
      hardware_.write(message_out, l);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	1d18      	adds	r0, r3, #4
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	f7fe fbf1 	bl	8002754 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	e005      	b.n	8003f82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003f76:	4905      	ldr	r1, [pc, #20]	; (8003f8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x128>)
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 f849 	bl	8004010 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 8003f7e:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003f82:	4618      	mov	r0, r3
 8003f84:	3720      	adds	r7, #32
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	0800972c 	.word	0x0800972c

08003f90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7fe fc1f 	bl	80027e2 <_ZN13STM32Hardware4timeEv>
 8003fa4:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	4915      	ldr	r1, [pc, #84]	; (8004004 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 8003fae:	fba1 1303 	umull	r1, r3, r1, r3
 8003fb2:	099b      	lsrs	r3, r3, #6
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	1e5a      	subs	r2, r3, #1
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	6859      	ldr	r1, [r3, #4]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	4b0f      	ldr	r3, [pc, #60]	; (8004004 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 8003fc6:	fba3 0302 	umull	r0, r3, r3, r2
 8003fca:	099b      	lsrs	r3, r3, #6
 8003fcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fd0:	fb00 f303 	mul.w	r3, r0, r3
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	4a0c      	ldr	r2, [pc, #48]	; (8004008 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x78>)
 8003fd8:	fb02 f303 	mul.w	r3, r2, r3
 8003fdc:	1aca      	subs	r2, r1, r3
 8003fde:	4b0b      	ldr	r3, [pc, #44]	; (800400c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x7c>)
 8003fe0:	4413      	add	r3, r2
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	f8c2 3820 	str.w	r3, [r2, #2080]	; 0x820
    normalizeSecNSec(sec_offset, nsec_offset);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f603 021c 	addw	r2, r3, #2076	; 0x81c
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	f7fc ff06 	bl	8000e08 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003ffc:	bf00      	nop
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	10624dd3 	.word	0x10624dd3
 8004008:	000f4240 	.word	0x000f4240
 800400c:	3b9aca00 	.word	0x3b9aca00

08004010 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	2103      	movs	r1, #3
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f804 	bl	800402c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>
  }
 8004024:	bf00      	nop
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 800402c:	b580      	push	{r7, lr}
 800402e:	b088      	sub	sp, #32
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	460b      	mov	r3, r1
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800403a:	f107 0314 	add.w	r3, r7, #20
 800403e:	4618      	mov	r0, r3
 8004040:	f7fd ff32 	bl	8001ea8 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004044:	7afb      	ldrb	r3, [r7, #11]
 8004046:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f107 0214 	add.w	r2, r7, #20
 8004056:	2107      	movs	r1, #7
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	4798      	blx	r3
  }
 800405c:	bf00      	nop
 800405e:	3720      	adds	r7, #32
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <_Z41__static_initialization_and_destruction_0ii>:
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d10d      	bne.n	8004090 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800407a:	4293      	cmp	r3, r2
 800407c:	d108      	bne.n	8004090 <_Z41__static_initialization_and_destruction_0ii+0x2c>
ros::NodeHandle nh;
 800407e:	4806      	ldr	r0, [pc, #24]	; (8004098 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8004080:	f7ff fa04 	bl	800348c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> vel_sub("/cmd_vel", vel_callback);
 8004084:	2301      	movs	r3, #1
 8004086:	4a05      	ldr	r2, [pc, #20]	; (800409c <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8004088:	4905      	ldr	r1, [pc, #20]	; (80040a0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 800408a:	4806      	ldr	r0, [pc, #24]	; (80040a4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800408c:	f7ff faa4 	bl	80035d8 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 8004090:	bf00      	nop
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	200003f4 	.word	0x200003f4
 800409c:	0800332d 	.word	0x0800332d
 80040a0:	08009768 	.word	0x08009768
 80040a4:	20001538 	.word	0x20001538

080040a8 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	3310      	adds	r3, #16
 80040b6:	6839      	ldr	r1, [r7, #0]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7ff f8f5 	bl	80032a8 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	3210      	adds	r2, #16
 80040c6:	4610      	mov	r0, r2
 80040c8:	4798      	blx	r3
  }
 80040ca:	bf00      	nop
 80040cc:	3708      	adds	r7, #8
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 80040d2:	b480      	push	{r7}
 80040d4:	b083      	sub	sp, #12
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 80040de:	4618      	mov	r0, r3
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b082      	sub	sp, #8
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	3310      	adds	r3, #16
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7ff f8fc 	bl	80032f4 <_ZN13geometry_msgs5Twist7getTypeEv>
 80040fc:	4603      	mov	r3, r0
  }
 80040fe:	4618      	mov	r0, r3
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004106:	b580      	push	{r7, lr}
 8004108:	b082      	sub	sp, #8
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	3310      	adds	r3, #16
 8004112:	4618      	mov	r0, r3
 8004114:	f7ff f8fc 	bl	8003310 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8004118:	4603      	mov	r3, r0
  }
 800411a:	4618      	mov	r0, r3
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9connectedEv>:
  virtual bool connected()
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
    return configured_;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004130:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
  };
 8004134:	4618      	mov	r0, r3
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <_GLOBAL__sub_I__Z12vel_callbackRKN13geometry_msgs5TwistE>:
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
 8004144:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004148:	2001      	movs	r0, #1
 800414a:	f7ff ff8b 	bl	8004064 <_Z41__static_initialization_and_destruction_0ii>
 800414e:	bd80      	pop	{r7, pc}

08004150 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004156:	2300      	movs	r3, #0
 8004158:	607b      	str	r3, [r7, #4]
 800415a:	4b10      	ldr	r3, [pc, #64]	; (800419c <HAL_MspInit+0x4c>)
 800415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415e:	4a0f      	ldr	r2, [pc, #60]	; (800419c <HAL_MspInit+0x4c>)
 8004160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004164:	6453      	str	r3, [r2, #68]	; 0x44
 8004166:	4b0d      	ldr	r3, [pc, #52]	; (800419c <HAL_MspInit+0x4c>)
 8004168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800416e:	607b      	str	r3, [r7, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004172:	2300      	movs	r3, #0
 8004174:	603b      	str	r3, [r7, #0]
 8004176:	4b09      	ldr	r3, [pc, #36]	; (800419c <HAL_MspInit+0x4c>)
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	4a08      	ldr	r2, [pc, #32]	; (800419c <HAL_MspInit+0x4c>)
 800417c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004180:	6413      	str	r3, [r2, #64]	; 0x40
 8004182:	4b06      	ldr	r3, [pc, #24]	; (800419c <HAL_MspInit+0x4c>)
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418a:	603b      	str	r3, [r7, #0]
 800418c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800418e:	2007      	movs	r0, #7
 8004190:	f000 ff42 	bl	8005018 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004194:	bf00      	nop
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	40023800 	.word	0x40023800

080041a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80041a4:	e7fe      	b.n	80041a4 <NMI_Handler+0x4>

080041a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041a6:	b480      	push	{r7}
 80041a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041aa:	e7fe      	b.n	80041aa <HardFault_Handler+0x4>

080041ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041b0:	e7fe      	b.n	80041b0 <MemManage_Handler+0x4>

080041b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041b2:	b480      	push	{r7}
 80041b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041b6:	e7fe      	b.n	80041b6 <BusFault_Handler+0x4>

080041b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041bc:	e7fe      	b.n	80041bc <UsageFault_Handler+0x4>

080041be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041be:	b480      	push	{r7}
 80041c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041c2:	bf00      	nop
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041d0:	bf00      	nop
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041da:	b480      	push	{r7}
 80041dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041de:	bf00      	nop
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041ec:	f000 fe00 	bl	8004df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041f0:	bf00      	nop
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80041f8:	4802      	ldr	r0, [pc, #8]	; (8004204 <DMA1_Stream5_IRQHandler+0x10>)
 80041fa:	f001 f953 	bl	80054a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80041fe:	bf00      	nop
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	20001790 	.word	0x20001790

08004208 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800420c:	4802      	ldr	r0, [pc, #8]	; (8004218 <DMA1_Stream6_IRQHandler+0x10>)
 800420e:	f001 f949 	bl	80054a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004212:	bf00      	nop
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	200017f0 	.word	0x200017f0

0800421c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004220:	4802      	ldr	r0, [pc, #8]	; (800422c <TIM2_IRQHandler+0x10>)
 8004222:	f002 ff3f 	bl	80070a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004226:	bf00      	nop
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	2000159c 	.word	0x2000159c

08004230 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004234:	4802      	ldr	r0, [pc, #8]	; (8004240 <TIM3_IRQHandler+0x10>)
 8004236:	f002 ff35 	bl	80070a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800423a:	bf00      	nop
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	200015e4 	.word	0x200015e4

08004244 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004248:	4802      	ldr	r0, [pc, #8]	; (8004254 <TIM4_IRQHandler+0x10>)
 800424a:	f002 ff2b 	bl	80070a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800424e:	bf00      	nop
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	2000162c 	.word	0x2000162c

08004258 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800425c:	4802      	ldr	r0, [pc, #8]	; (8004268 <USART2_IRQHandler+0x10>)
 800425e:	f003 fef7 	bl	8008050 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004262:	bf00      	nop
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	2000174c 	.word	0x2000174c

0800426c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004270:	4802      	ldr	r0, [pc, #8]	; (800427c <TIM5_IRQHandler+0x10>)
 8004272:	f002 ff17 	bl	80070a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004276:	bf00      	nop
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	20001674 	.word	0x20001674

08004280 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  return 1;
 8004284:	2301      	movs	r3, #1
}
 8004286:	4618      	mov	r0, r3
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <_kill>:

int _kill(int pid, int sig)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800429a:	f004 ffd5 	bl	8009248 <__errno>
 800429e:	4603      	mov	r3, r0
 80042a0:	2216      	movs	r2, #22
 80042a2:	601a      	str	r2, [r3, #0]
  return -1;
 80042a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <_exit>:

void _exit (int status)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80042b8:	f04f 31ff 	mov.w	r1, #4294967295
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f7ff ffe7 	bl	8004290 <_kill>
  while (1) {}    /* Make sure we hang here */
 80042c2:	e7fe      	b.n	80042c2 <_exit+0x12>

080042c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042cc:	4a14      	ldr	r2, [pc, #80]	; (8004320 <_sbrk+0x5c>)
 80042ce:	4b15      	ldr	r3, [pc, #84]	; (8004324 <_sbrk+0x60>)
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042d8:	4b13      	ldr	r3, [pc, #76]	; (8004328 <_sbrk+0x64>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d102      	bne.n	80042e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042e0:	4b11      	ldr	r3, [pc, #68]	; (8004328 <_sbrk+0x64>)
 80042e2:	4a12      	ldr	r2, [pc, #72]	; (800432c <_sbrk+0x68>)
 80042e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042e6:	4b10      	ldr	r3, [pc, #64]	; (8004328 <_sbrk+0x64>)
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4413      	add	r3, r2
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d207      	bcs.n	8004304 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042f4:	f004 ffa8 	bl	8009248 <__errno>
 80042f8:	4603      	mov	r3, r0
 80042fa:	220c      	movs	r2, #12
 80042fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004302:	e009      	b.n	8004318 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004304:	4b08      	ldr	r3, [pc, #32]	; (8004328 <_sbrk+0x64>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800430a:	4b07      	ldr	r3, [pc, #28]	; (8004328 <_sbrk+0x64>)
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4413      	add	r3, r2
 8004312:	4a05      	ldr	r2, [pc, #20]	; (8004328 <_sbrk+0x64>)
 8004314:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004316:	68fb      	ldr	r3, [r7, #12]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3718      	adds	r7, #24
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	20020000 	.word	0x20020000
 8004324:	00000400 	.word	0x00000400
 8004328:	20001598 	.word	0x20001598
 800432c:	20001868 	.word	0x20001868

08004330 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004334:	4b06      	ldr	r3, [pc, #24]	; (8004350 <SystemInit+0x20>)
 8004336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433a:	4a05      	ldr	r2, [pc, #20]	; (8004350 <SystemInit+0x20>)
 800433c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004340:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004344:	bf00      	nop
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	e000ed00 	.word	0xe000ed00

08004354 <MX_TIM2_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b08c      	sub	sp, #48	; 0x30
 8004358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800435a:	f107 030c 	add.w	r3, r7, #12
 800435e:	2224      	movs	r2, #36	; 0x24
 8004360:	2100      	movs	r1, #0
 8004362:	4618      	mov	r0, r3
 8004364:	f004 ffa8 	bl	80092b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004368:	1d3b      	adds	r3, r7, #4
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004370:	4b21      	ldr	r3, [pc, #132]	; (80043f8 <MX_TIM2_Init+0xa4>)
 8004372:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004376:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004378:	4b1f      	ldr	r3, [pc, #124]	; (80043f8 <MX_TIM2_Init+0xa4>)
 800437a:	2200      	movs	r2, #0
 800437c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800437e:	4b1e      	ldr	r3, [pc, #120]	; (80043f8 <MX_TIM2_Init+0xa4>)
 8004380:	2200      	movs	r2, #0
 8004382:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8004384:	4b1c      	ldr	r3, [pc, #112]	; (80043f8 <MX_TIM2_Init+0xa4>)
 8004386:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800438a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800438c:	4b1a      	ldr	r3, [pc, #104]	; (80043f8 <MX_TIM2_Init+0xa4>)
 800438e:	2200      	movs	r2, #0
 8004390:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004392:	4b19      	ldr	r3, [pc, #100]	; (80043f8 <MX_TIM2_Init+0xa4>)
 8004394:	2200      	movs	r2, #0
 8004396:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004398:	2303      	movs	r3, #3
 800439a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800439c:	2300      	movs	r3, #0
 800439e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80043a0:	2301      	movs	r3, #1
 80043a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80043a4:	2300      	movs	r3, #0
 80043a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80043a8:	2300      	movs	r3, #0
 80043aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80043ac:	2300      	movs	r3, #0
 80043ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80043b0:	2301      	movs	r3, #1
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80043b4:	2300      	movs	r3, #0
 80043b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80043b8:	2300      	movs	r3, #0
 80043ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80043bc:	f107 030c 	add.w	r3, r7, #12
 80043c0:	4619      	mov	r1, r3
 80043c2:	480d      	ldr	r0, [pc, #52]	; (80043f8 <MX_TIM2_Init+0xa4>)
 80043c4:	f002 fd3a 	bl	8006e3c <HAL_TIM_Encoder_Init>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80043ce:	f7fd fa91 	bl	80018f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043d2:	2300      	movs	r3, #0
 80043d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043d6:	2300      	movs	r3, #0
 80043d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80043da:	1d3b      	adds	r3, r7, #4
 80043dc:	4619      	mov	r1, r3
 80043de:	4806      	ldr	r0, [pc, #24]	; (80043f8 <MX_TIM2_Init+0xa4>)
 80043e0:	f003 fc2a 	bl	8007c38 <HAL_TIMEx_MasterConfigSynchronization>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80043ea:	f7fd fa83 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80043ee:	bf00      	nop
 80043f0:	3730      	adds	r7, #48	; 0x30
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	2000159c 	.word	0x2000159c

080043fc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004402:	f107 0308 	add.w	r3, r7, #8
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]
 800440a:	605a      	str	r2, [r3, #4]
 800440c:	609a      	str	r2, [r3, #8]
 800440e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004410:	463b      	mov	r3, r7
 8004412:	2200      	movs	r2, #0
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004418:	4b1d      	ldr	r3, [pc, #116]	; (8004490 <MX_TIM3_Init+0x94>)
 800441a:	4a1e      	ldr	r2, [pc, #120]	; (8004494 <MX_TIM3_Init+0x98>)
 800441c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 13;
 800441e:	4b1c      	ldr	r3, [pc, #112]	; (8004490 <MX_TIM3_Init+0x94>)
 8004420:	220d      	movs	r2, #13
 8004422:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004424:	4b1a      	ldr	r3, [pc, #104]	; (8004490 <MX_TIM3_Init+0x94>)
 8004426:	2200      	movs	r2, #0
 8004428:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000;
 800442a:	4b19      	ldr	r3, [pc, #100]	; (8004490 <MX_TIM3_Init+0x94>)
 800442c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8004430:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004432:	4b17      	ldr	r3, [pc, #92]	; (8004490 <MX_TIM3_Init+0x94>)
 8004434:	2200      	movs	r2, #0
 8004436:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004438:	4b15      	ldr	r3, [pc, #84]	; (8004490 <MX_TIM3_Init+0x94>)
 800443a:	2200      	movs	r2, #0
 800443c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800443e:	4814      	ldr	r0, [pc, #80]	; (8004490 <MX_TIM3_Init+0x94>)
 8004440:	f002 fb24 	bl	8006a8c <HAL_TIM_Base_Init>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800444a:	f7fd fa53 	bl	80018f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800444e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004452:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004454:	f107 0308 	add.w	r3, r7, #8
 8004458:	4619      	mov	r1, r3
 800445a:	480d      	ldr	r0, [pc, #52]	; (8004490 <MX_TIM3_Init+0x94>)
 800445c:	f002 ffec 	bl	8007438 <HAL_TIM_ConfigClockSource>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8004466:	f7fd fa45 	bl	80018f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800446a:	2300      	movs	r3, #0
 800446c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800446e:	2300      	movs	r3, #0
 8004470:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004472:	463b      	mov	r3, r7
 8004474:	4619      	mov	r1, r3
 8004476:	4806      	ldr	r0, [pc, #24]	; (8004490 <MX_TIM3_Init+0x94>)
 8004478:	f003 fbde 	bl	8007c38 <HAL_TIMEx_MasterConfigSynchronization>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8004482:	f7fd fa37 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004486:	bf00      	nop
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	200015e4 	.word	0x200015e4
 8004494:	40000400 	.word	0x40000400

08004498 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b08c      	sub	sp, #48	; 0x30
 800449c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800449e:	f107 030c 	add.w	r3, r7, #12
 80044a2:	2224      	movs	r2, #36	; 0x24
 80044a4:	2100      	movs	r1, #0
 80044a6:	4618      	mov	r0, r3
 80044a8:	f004 ff06 	bl	80092b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044ac:	1d3b      	adds	r3, r7, #4
 80044ae:	2200      	movs	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]
 80044b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80044b4:	4b20      	ldr	r3, [pc, #128]	; (8004538 <MX_TIM4_Init+0xa0>)
 80044b6:	4a21      	ldr	r2, [pc, #132]	; (800453c <MX_TIM4_Init+0xa4>)
 80044b8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80044ba:	4b1f      	ldr	r3, [pc, #124]	; (8004538 <MX_TIM4_Init+0xa0>)
 80044bc:	2200      	movs	r2, #0
 80044be:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044c0:	4b1d      	ldr	r3, [pc, #116]	; (8004538 <MX_TIM4_Init+0xa0>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80044c6:	4b1c      	ldr	r3, [pc, #112]	; (8004538 <MX_TIM4_Init+0xa0>)
 80044c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044cc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044ce:	4b1a      	ldr	r3, [pc, #104]	; (8004538 <MX_TIM4_Init+0xa0>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044d4:	4b18      	ldr	r3, [pc, #96]	; (8004538 <MX_TIM4_Init+0xa0>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80044da:	2303      	movs	r3, #3
 80044dc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80044de:	2300      	movs	r3, #0
 80044e0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80044e2:	2301      	movs	r3, #1
 80044e4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80044e6:	2300      	movs	r3, #0
 80044e8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80044ea:	2300      	movs	r3, #0
 80044ec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80044ee:	2300      	movs	r3, #0
 80044f0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80044f2:	2301      	movs	r3, #1
 80044f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80044f6:	2300      	movs	r3, #0
 80044f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80044fa:	2300      	movs	r3, #0
 80044fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80044fe:	f107 030c 	add.w	r3, r7, #12
 8004502:	4619      	mov	r1, r3
 8004504:	480c      	ldr	r0, [pc, #48]	; (8004538 <MX_TIM4_Init+0xa0>)
 8004506:	f002 fc99 	bl	8006e3c <HAL_TIM_Encoder_Init>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8004510:	f7fd f9f0 	bl	80018f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004514:	2300      	movs	r3, #0
 8004516:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004518:	2300      	movs	r3, #0
 800451a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800451c:	1d3b      	adds	r3, r7, #4
 800451e:	4619      	mov	r1, r3
 8004520:	4805      	ldr	r0, [pc, #20]	; (8004538 <MX_TIM4_Init+0xa0>)
 8004522:	f003 fb89 	bl	8007c38 <HAL_TIMEx_MasterConfigSynchronization>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800452c:	f7fd f9e2 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004530:	bf00      	nop
 8004532:	3730      	adds	r7, #48	; 0x30
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	2000162c 	.word	0x2000162c
 800453c:	40000800 	.word	0x40000800

08004540 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b08c      	sub	sp, #48	; 0x30
 8004544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004546:	f107 030c 	add.w	r3, r7, #12
 800454a:	2224      	movs	r2, #36	; 0x24
 800454c:	2100      	movs	r1, #0
 800454e:	4618      	mov	r0, r3
 8004550:	f004 feb2 	bl	80092b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004554:	1d3b      	adds	r3, r7, #4
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800455c:	4b20      	ldr	r3, [pc, #128]	; (80045e0 <MX_TIM5_Init+0xa0>)
 800455e:	4a21      	ldr	r2, [pc, #132]	; (80045e4 <MX_TIM5_Init+0xa4>)
 8004560:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004562:	4b1f      	ldr	r3, [pc, #124]	; (80045e0 <MX_TIM5_Init+0xa0>)
 8004564:	2200      	movs	r2, #0
 8004566:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004568:	4b1d      	ldr	r3, [pc, #116]	; (80045e0 <MX_TIM5_Init+0xa0>)
 800456a:	2200      	movs	r2, #0
 800456c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800456e:	4b1c      	ldr	r3, [pc, #112]	; (80045e0 <MX_TIM5_Init+0xa0>)
 8004570:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004574:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004576:	4b1a      	ldr	r3, [pc, #104]	; (80045e0 <MX_TIM5_Init+0xa0>)
 8004578:	2200      	movs	r2, #0
 800457a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800457c:	4b18      	ldr	r3, [pc, #96]	; (80045e0 <MX_TIM5_Init+0xa0>)
 800457e:	2200      	movs	r2, #0
 8004580:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004582:	2303      	movs	r3, #3
 8004584:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004586:	2300      	movs	r3, #0
 8004588:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800458a:	2301      	movs	r3, #1
 800458c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800458e:	2300      	movs	r3, #0
 8004590:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004592:	2300      	movs	r3, #0
 8004594:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004596:	2300      	movs	r3, #0
 8004598:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800459a:	2301      	movs	r3, #1
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800459e:	2300      	movs	r3, #0
 80045a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80045a2:	2300      	movs	r3, #0
 80045a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80045a6:	f107 030c 	add.w	r3, r7, #12
 80045aa:	4619      	mov	r1, r3
 80045ac:	480c      	ldr	r0, [pc, #48]	; (80045e0 <MX_TIM5_Init+0xa0>)
 80045ae:	f002 fc45 	bl	8006e3c <HAL_TIM_Encoder_Init>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80045b8:	f7fd f99c 	bl	80018f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045bc:	2300      	movs	r3, #0
 80045be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045c0:	2300      	movs	r3, #0
 80045c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80045c4:	1d3b      	adds	r3, r7, #4
 80045c6:	4619      	mov	r1, r3
 80045c8:	4805      	ldr	r0, [pc, #20]	; (80045e0 <MX_TIM5_Init+0xa0>)
 80045ca:	f003 fb35 	bl	8007c38 <HAL_TIMEx_MasterConfigSynchronization>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d001      	beq.n	80045d8 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80045d4:	f7fd f98e 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80045d8:	bf00      	nop
 80045da:	3730      	adds	r7, #48	; 0x30
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	20001674 	.word	0x20001674
 80045e4:	40000c00 	.word	0x40000c00

080045e8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b092      	sub	sp, #72	; 0x48
 80045ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80045f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045fc:	2200      	movs	r2, #0
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	605a      	str	r2, [r3, #4]
 8004602:	609a      	str	r2, [r3, #8]
 8004604:	60da      	str	r2, [r3, #12]
 8004606:	611a      	str	r2, [r3, #16]
 8004608:	615a      	str	r2, [r3, #20]
 800460a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800460c:	1d3b      	adds	r3, r7, #4
 800460e:	2220      	movs	r2, #32
 8004610:	2100      	movs	r1, #0
 8004612:	4618      	mov	r0, r3
 8004614:	f004 fe50 	bl	80092b8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004618:	4b32      	ldr	r3, [pc, #200]	; (80046e4 <MX_TIM8_Init+0xfc>)
 800461a:	4a33      	ldr	r2, [pc, #204]	; (80046e8 <MX_TIM8_Init+0x100>)
 800461c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800461e:	4b31      	ldr	r3, [pc, #196]	; (80046e4 <MX_TIM8_Init+0xfc>)
 8004620:	2200      	movs	r2, #0
 8004622:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004624:	4b2f      	ldr	r3, [pc, #188]	; (80046e4 <MX_TIM8_Init+0xfc>)
 8004626:	2200      	movs	r2, #0
 8004628:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3000;
 800462a:	4b2e      	ldr	r3, [pc, #184]	; (80046e4 <MX_TIM8_Init+0xfc>)
 800462c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004630:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004632:	4b2c      	ldr	r3, [pc, #176]	; (80046e4 <MX_TIM8_Init+0xfc>)
 8004634:	2200      	movs	r2, #0
 8004636:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004638:	4b2a      	ldr	r3, [pc, #168]	; (80046e4 <MX_TIM8_Init+0xfc>)
 800463a:	2200      	movs	r2, #0
 800463c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800463e:	4b29      	ldr	r3, [pc, #164]	; (80046e4 <MX_TIM8_Init+0xfc>)
 8004640:	2200      	movs	r2, #0
 8004642:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004644:	4827      	ldr	r0, [pc, #156]	; (80046e4 <MX_TIM8_Init+0xfc>)
 8004646:	f002 fae1 	bl	8006c0c <HAL_TIM_PWM_Init>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8004650:	f7fd f950 	bl	80018f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004654:	2300      	movs	r3, #0
 8004656:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004658:	2300      	movs	r3, #0
 800465a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800465c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004660:	4619      	mov	r1, r3
 8004662:	4820      	ldr	r0, [pc, #128]	; (80046e4 <MX_TIM8_Init+0xfc>)
 8004664:	f003 fae8 	bl	8007c38 <HAL_TIMEx_MasterConfigSynchronization>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800466e:	f7fd f941 	bl	80018f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004672:	2360      	movs	r3, #96	; 0x60
 8004674:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004676:	2300      	movs	r3, #0
 8004678:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800467a:	2300      	movs	r3, #0
 800467c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800467e:	2300      	movs	r3, #0
 8004680:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004682:	2300      	movs	r3, #0
 8004684:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004686:	2300      	movs	r3, #0
 8004688:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800468a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800468e:	220c      	movs	r2, #12
 8004690:	4619      	mov	r1, r3
 8004692:	4814      	ldr	r0, [pc, #80]	; (80046e4 <MX_TIM8_Init+0xfc>)
 8004694:	f002 fe0e 	bl	80072b4 <HAL_TIM_PWM_ConfigChannel>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <MX_TIM8_Init+0xba>
  {
    Error_Handler();
 800469e:	f7fd f929 	bl	80018f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80046a2:	2300      	movs	r3, #0
 80046a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80046a6:	2300      	movs	r3, #0
 80046a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80046aa:	2300      	movs	r3, #0
 80046ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80046ae:	2300      	movs	r3, #0
 80046b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80046b2:	2300      	movs	r3, #0
 80046b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80046b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80046bc:	2300      	movs	r3, #0
 80046be:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80046c0:	1d3b      	adds	r3, r7, #4
 80046c2:	4619      	mov	r1, r3
 80046c4:	4807      	ldr	r0, [pc, #28]	; (80046e4 <MX_TIM8_Init+0xfc>)
 80046c6:	f003 fb33 	bl	8007d30 <HAL_TIMEx_ConfigBreakDeadTime>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <MX_TIM8_Init+0xec>
  {
    Error_Handler();
 80046d0:	f7fd f910 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80046d4:	4803      	ldr	r0, [pc, #12]	; (80046e4 <MX_TIM8_Init+0xfc>)
 80046d6:	f000 f99f 	bl	8004a18 <HAL_TIM_MspPostInit>

}
 80046da:	bf00      	nop
 80046dc:	3748      	adds	r7, #72	; 0x48
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	200016bc 	.word	0x200016bc
 80046e8:	40010400 	.word	0x40010400

080046ec <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b088      	sub	sp, #32
 80046f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80046f2:	1d3b      	adds	r3, r7, #4
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	605a      	str	r2, [r3, #4]
 80046fa:	609a      	str	r2, [r3, #8]
 80046fc:	60da      	str	r2, [r3, #12]
 80046fe:	611a      	str	r2, [r3, #16]
 8004700:	615a      	str	r2, [r3, #20]
 8004702:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8004704:	4b1f      	ldr	r3, [pc, #124]	; (8004784 <MX_TIM12_Init+0x98>)
 8004706:	4a20      	ldr	r2, [pc, #128]	; (8004788 <MX_TIM12_Init+0x9c>)
 8004708:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800470a:	4b1e      	ldr	r3, [pc, #120]	; (8004784 <MX_TIM12_Init+0x98>)
 800470c:	2200      	movs	r2, #0
 800470e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004710:	4b1c      	ldr	r3, [pc, #112]	; (8004784 <MX_TIM12_Init+0x98>)
 8004712:	2200      	movs	r2, #0
 8004714:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 3000;
 8004716:	4b1b      	ldr	r3, [pc, #108]	; (8004784 <MX_TIM12_Init+0x98>)
 8004718:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800471c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800471e:	4b19      	ldr	r3, [pc, #100]	; (8004784 <MX_TIM12_Init+0x98>)
 8004720:	2200      	movs	r2, #0
 8004722:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004724:	4b17      	ldr	r3, [pc, #92]	; (8004784 <MX_TIM12_Init+0x98>)
 8004726:	2200      	movs	r2, #0
 8004728:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800472a:	4816      	ldr	r0, [pc, #88]	; (8004784 <MX_TIM12_Init+0x98>)
 800472c:	f002 fa6e 	bl	8006c0c <HAL_TIM_PWM_Init>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8004736:	f7fd f8dd 	bl	80018f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800473a:	2360      	movs	r3, #96	; 0x60
 800473c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800473e:	2300      	movs	r3, #0
 8004740:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004742:	2300      	movs	r3, #0
 8004744:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004746:	2300      	movs	r3, #0
 8004748:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800474a:	1d3b      	adds	r3, r7, #4
 800474c:	2200      	movs	r2, #0
 800474e:	4619      	mov	r1, r3
 8004750:	480c      	ldr	r0, [pc, #48]	; (8004784 <MX_TIM12_Init+0x98>)
 8004752:	f002 fdaf 	bl	80072b4 <HAL_TIM_PWM_ConfigChannel>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d001      	beq.n	8004760 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 800475c:	f7fd f8ca 	bl	80018f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004760:	1d3b      	adds	r3, r7, #4
 8004762:	2204      	movs	r2, #4
 8004764:	4619      	mov	r1, r3
 8004766:	4807      	ldr	r0, [pc, #28]	; (8004784 <MX_TIM12_Init+0x98>)
 8004768:	f002 fda4 	bl	80072b4 <HAL_TIM_PWM_ConfigChannel>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8004772:	f7fd f8bf 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8004776:	4803      	ldr	r0, [pc, #12]	; (8004784 <MX_TIM12_Init+0x98>)
 8004778:	f000 f94e 	bl	8004a18 <HAL_TIM_MspPostInit>

}
 800477c:	bf00      	nop
 800477e:	3720      	adds	r7, #32
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	20001704 	.word	0x20001704
 8004788:	40001800 	.word	0x40001800

0800478c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b08e      	sub	sp, #56	; 0x38
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004794:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]
 800479c:	605a      	str	r2, [r3, #4]
 800479e:	609a      	str	r2, [r3, #8]
 80047a0:	60da      	str	r2, [r3, #12]
 80047a2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ac:	d152      	bne.n	8004854 <HAL_TIM_Encoder_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80047ae:	2300      	movs	r3, #0
 80047b0:	623b      	str	r3, [r7, #32]
 80047b2:	4b64      	ldr	r3, [pc, #400]	; (8004944 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	4a63      	ldr	r2, [pc, #396]	; (8004944 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80047b8:	f043 0301 	orr.w	r3, r3, #1
 80047bc:	6413      	str	r3, [r2, #64]	; 0x40
 80047be:	4b61      	ldr	r3, [pc, #388]	; (8004944 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	623b      	str	r3, [r7, #32]
 80047c8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047ca:	2300      	movs	r3, #0
 80047cc:	61fb      	str	r3, [r7, #28]
 80047ce:	4b5d      	ldr	r3, [pc, #372]	; (8004944 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80047d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d2:	4a5c      	ldr	r2, [pc, #368]	; (8004944 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80047d4:	f043 0301 	orr.w	r3, r3, #1
 80047d8:	6313      	str	r3, [r2, #48]	; 0x30
 80047da:	4b5a      	ldr	r3, [pc, #360]	; (8004944 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80047dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	61fb      	str	r3, [r7, #28]
 80047e4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047e6:	2300      	movs	r3, #0
 80047e8:	61bb      	str	r3, [r7, #24]
 80047ea:	4b56      	ldr	r3, [pc, #344]	; (8004944 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80047ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ee:	4a55      	ldr	r2, [pc, #340]	; (8004944 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80047f0:	f043 0302 	orr.w	r3, r3, #2
 80047f4:	6313      	str	r3, [r2, #48]	; 0x30
 80047f6:	4b53      	ldr	r3, [pc, #332]	; (8004944 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80047f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	61bb      	str	r3, [r7, #24]
 8004800:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004802:	2320      	movs	r3, #32
 8004804:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004806:	2302      	movs	r3, #2
 8004808:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800480a:	2300      	movs	r3, #0
 800480c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800480e:	2300      	movs	r3, #0
 8004810:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004812:	2301      	movs	r3, #1
 8004814:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800481a:	4619      	mov	r1, r3
 800481c:	484a      	ldr	r0, [pc, #296]	; (8004948 <HAL_TIM_Encoder_MspInit+0x1bc>)
 800481e:	f001 f8ab 	bl	8005978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004822:	2308      	movs	r3, #8
 8004824:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004826:	2302      	movs	r3, #2
 8004828:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800482a:	2300      	movs	r3, #0
 800482c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800482e:	2300      	movs	r3, #0
 8004830:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004832:	2301      	movs	r3, #1
 8004834:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800483a:	4619      	mov	r1, r3
 800483c:	4843      	ldr	r0, [pc, #268]	; (800494c <HAL_TIM_Encoder_MspInit+0x1c0>)
 800483e:	f001 f89b 	bl	8005978 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004842:	2200      	movs	r2, #0
 8004844:	2100      	movs	r1, #0
 8004846:	201c      	movs	r0, #28
 8004848:	f000 fbf1 	bl	800502e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800484c:	201c      	movs	r0, #28
 800484e:	f000 fc0a 	bl	8005066 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8004852:	e072      	b.n	800493a <HAL_TIM_Encoder_MspInit+0x1ae>
  else if(tim_encoderHandle->Instance==TIM4)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a3d      	ldr	r2, [pc, #244]	; (8004950 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d134      	bne.n	80048c8 <HAL_TIM_Encoder_MspInit+0x13c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800485e:	2300      	movs	r3, #0
 8004860:	617b      	str	r3, [r7, #20]
 8004862:	4b38      	ldr	r3, [pc, #224]	; (8004944 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	4a37      	ldr	r2, [pc, #220]	; (8004944 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8004868:	f043 0304 	orr.w	r3, r3, #4
 800486c:	6413      	str	r3, [r2, #64]	; 0x40
 800486e:	4b35      	ldr	r3, [pc, #212]	; (8004944 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	f003 0304 	and.w	r3, r3, #4
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800487a:	2300      	movs	r3, #0
 800487c:	613b      	str	r3, [r7, #16]
 800487e:	4b31      	ldr	r3, [pc, #196]	; (8004944 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8004880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004882:	4a30      	ldr	r2, [pc, #192]	; (8004944 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8004884:	f043 0302 	orr.w	r3, r3, #2
 8004888:	6313      	str	r3, [r2, #48]	; 0x30
 800488a:	4b2e      	ldr	r3, [pc, #184]	; (8004944 <HAL_TIM_Encoder_MspInit+0x1b8>)
 800488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	613b      	str	r3, [r7, #16]
 8004894:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004896:	23c0      	movs	r3, #192	; 0xc0
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800489a:	2302      	movs	r3, #2
 800489c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800489e:	2300      	movs	r3, #0
 80048a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048a2:	2300      	movs	r3, #0
 80048a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80048a6:	2302      	movs	r3, #2
 80048a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048ae:	4619      	mov	r1, r3
 80048b0:	4826      	ldr	r0, [pc, #152]	; (800494c <HAL_TIM_Encoder_MspInit+0x1c0>)
 80048b2:	f001 f861 	bl	8005978 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80048b6:	2200      	movs	r2, #0
 80048b8:	2100      	movs	r1, #0
 80048ba:	201e      	movs	r0, #30
 80048bc:	f000 fbb7 	bl	800502e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80048c0:	201e      	movs	r0, #30
 80048c2:	f000 fbd0 	bl	8005066 <HAL_NVIC_EnableIRQ>
}
 80048c6:	e038      	b.n	800493a <HAL_TIM_Encoder_MspInit+0x1ae>
  else if(tim_encoderHandle->Instance==TIM5)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a21      	ldr	r2, [pc, #132]	; (8004954 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d133      	bne.n	800493a <HAL_TIM_Encoder_MspInit+0x1ae>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80048d2:	2300      	movs	r3, #0
 80048d4:	60fb      	str	r3, [r7, #12]
 80048d6:	4b1b      	ldr	r3, [pc, #108]	; (8004944 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	4a1a      	ldr	r2, [pc, #104]	; (8004944 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80048dc:	f043 0308 	orr.w	r3, r3, #8
 80048e0:	6413      	str	r3, [r2, #64]	; 0x40
 80048e2:	4b18      	ldr	r3, [pc, #96]	; (8004944 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048ee:	2300      	movs	r3, #0
 80048f0:	60bb      	str	r3, [r7, #8]
 80048f2:	4b14      	ldr	r3, [pc, #80]	; (8004944 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	4a13      	ldr	r2, [pc, #76]	; (8004944 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80048f8:	f043 0301 	orr.w	r3, r3, #1
 80048fc:	6313      	str	r3, [r2, #48]	; 0x30
 80048fe:	4b11      	ldr	r3, [pc, #68]	; (8004944 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8004900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	60bb      	str	r3, [r7, #8]
 8004908:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800490a:	2303      	movs	r3, #3
 800490c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800490e:	2302      	movs	r3, #2
 8004910:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004912:	2300      	movs	r3, #0
 8004914:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004916:	2300      	movs	r3, #0
 8004918:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800491a:	2302      	movs	r3, #2
 800491c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800491e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004922:	4619      	mov	r1, r3
 8004924:	4808      	ldr	r0, [pc, #32]	; (8004948 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8004926:	f001 f827 	bl	8005978 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800492a:	2200      	movs	r2, #0
 800492c:	2100      	movs	r1, #0
 800492e:	2032      	movs	r0, #50	; 0x32
 8004930:	f000 fb7d 	bl	800502e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004934:	2032      	movs	r0, #50	; 0x32
 8004936:	f000 fb96 	bl	8005066 <HAL_NVIC_EnableIRQ>
}
 800493a:	bf00      	nop
 800493c:	3738      	adds	r7, #56	; 0x38
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	40023800 	.word	0x40023800
 8004948:	40020000 	.word	0x40020000
 800494c:	40020400 	.word	0x40020400
 8004950:	40000800 	.word	0x40000800
 8004954:	40000c00 	.word	0x40000c00

08004958 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a0e      	ldr	r2, [pc, #56]	; (80049a0 <HAL_TIM_Base_MspInit+0x48>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d115      	bne.n	8004996 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800496a:	2300      	movs	r3, #0
 800496c:	60fb      	str	r3, [r7, #12]
 800496e:	4b0d      	ldr	r3, [pc, #52]	; (80049a4 <HAL_TIM_Base_MspInit+0x4c>)
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	4a0c      	ldr	r2, [pc, #48]	; (80049a4 <HAL_TIM_Base_MspInit+0x4c>)
 8004974:	f043 0302 	orr.w	r3, r3, #2
 8004978:	6413      	str	r3, [r2, #64]	; 0x40
 800497a:	4b0a      	ldr	r3, [pc, #40]	; (80049a4 <HAL_TIM_Base_MspInit+0x4c>)
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004986:	2200      	movs	r2, #0
 8004988:	2100      	movs	r1, #0
 800498a:	201d      	movs	r0, #29
 800498c:	f000 fb4f 	bl	800502e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004990:	201d      	movs	r0, #29
 8004992:	f000 fb68 	bl	8005066 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004996:	bf00      	nop
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	40000400 	.word	0x40000400
 80049a4:	40023800 	.word	0x40023800

080049a8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a15      	ldr	r2, [pc, #84]	; (8004a0c <HAL_TIM_PWM_MspInit+0x64>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d10e      	bne.n	80049d8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80049ba:	2300      	movs	r3, #0
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	4b14      	ldr	r3, [pc, #80]	; (8004a10 <HAL_TIM_PWM_MspInit+0x68>)
 80049c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c2:	4a13      	ldr	r2, [pc, #76]	; (8004a10 <HAL_TIM_PWM_MspInit+0x68>)
 80049c4:	f043 0302 	orr.w	r3, r3, #2
 80049c8:	6453      	str	r3, [r2, #68]	; 0x44
 80049ca:	4b11      	ldr	r3, [pc, #68]	; (8004a10 <HAL_TIM_PWM_MspInit+0x68>)
 80049cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	60fb      	str	r3, [r7, #12]
 80049d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 80049d6:	e012      	b.n	80049fe <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM12)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a0d      	ldr	r2, [pc, #52]	; (8004a14 <HAL_TIM_PWM_MspInit+0x6c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d10d      	bne.n	80049fe <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80049e2:	2300      	movs	r3, #0
 80049e4:	60bb      	str	r3, [r7, #8]
 80049e6:	4b0a      	ldr	r3, [pc, #40]	; (8004a10 <HAL_TIM_PWM_MspInit+0x68>)
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	4a09      	ldr	r2, [pc, #36]	; (8004a10 <HAL_TIM_PWM_MspInit+0x68>)
 80049ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049f0:	6413      	str	r3, [r2, #64]	; 0x40
 80049f2:	4b07      	ldr	r3, [pc, #28]	; (8004a10 <HAL_TIM_PWM_MspInit+0x68>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fa:	60bb      	str	r3, [r7, #8]
 80049fc:	68bb      	ldr	r3, [r7, #8]
}
 80049fe:	bf00      	nop
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	40010400 	.word	0x40010400
 8004a10:	40023800 	.word	0x40023800
 8004a14:	40001800 	.word	0x40001800

08004a18 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08a      	sub	sp, #40	; 0x28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a20:	f107 0314 	add.w	r3, r7, #20
 8004a24:	2200      	movs	r2, #0
 8004a26:	601a      	str	r2, [r3, #0]
 8004a28:	605a      	str	r2, [r3, #4]
 8004a2a:	609a      	str	r2, [r3, #8]
 8004a2c:	60da      	str	r2, [r3, #12]
 8004a2e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a25      	ldr	r2, [pc, #148]	; (8004acc <HAL_TIM_MspPostInit+0xb4>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d11f      	bne.n	8004a7a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	613b      	str	r3, [r7, #16]
 8004a3e:	4b24      	ldr	r3, [pc, #144]	; (8004ad0 <HAL_TIM_MspPostInit+0xb8>)
 8004a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a42:	4a23      	ldr	r2, [pc, #140]	; (8004ad0 <HAL_TIM_MspPostInit+0xb8>)
 8004a44:	f043 0304 	orr.w	r3, r3, #4
 8004a48:	6313      	str	r3, [r2, #48]	; 0x30
 8004a4a:	4b21      	ldr	r3, [pc, #132]	; (8004ad0 <HAL_TIM_MspPostInit+0xb8>)
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4e:	f003 0304 	and.w	r3, r3, #4
 8004a52:	613b      	str	r3, [r7, #16]
 8004a54:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004a56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a60:	2300      	movs	r3, #0
 8004a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a64:	2300      	movs	r3, #0
 8004a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a6c:	f107 0314 	add.w	r3, r7, #20
 8004a70:	4619      	mov	r1, r3
 8004a72:	4818      	ldr	r0, [pc, #96]	; (8004ad4 <HAL_TIM_MspPostInit+0xbc>)
 8004a74:	f000 ff80 	bl	8005978 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8004a78:	e023      	b.n	8004ac2 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM12)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a16      	ldr	r2, [pc, #88]	; (8004ad8 <HAL_TIM_MspPostInit+0xc0>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d11e      	bne.n	8004ac2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a84:	2300      	movs	r3, #0
 8004a86:	60fb      	str	r3, [r7, #12]
 8004a88:	4b11      	ldr	r3, [pc, #68]	; (8004ad0 <HAL_TIM_MspPostInit+0xb8>)
 8004a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8c:	4a10      	ldr	r2, [pc, #64]	; (8004ad0 <HAL_TIM_MspPostInit+0xb8>)
 8004a8e:	f043 0302 	orr.w	r3, r3, #2
 8004a92:	6313      	str	r3, [r2, #48]	; 0x30
 8004a94:	4b0e      	ldr	r3, [pc, #56]	; (8004ad0 <HAL_TIM_MspPostInit+0xb8>)
 8004a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	60fb      	str	r3, [r7, #12]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004aa0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004ab2:	2309      	movs	r3, #9
 8004ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ab6:	f107 0314 	add.w	r3, r7, #20
 8004aba:	4619      	mov	r1, r3
 8004abc:	4807      	ldr	r0, [pc, #28]	; (8004adc <HAL_TIM_MspPostInit+0xc4>)
 8004abe:	f000 ff5b 	bl	8005978 <HAL_GPIO_Init>
}
 8004ac2:	bf00      	nop
 8004ac4:	3728      	adds	r7, #40	; 0x28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	40010400 	.word	0x40010400
 8004ad0:	40023800 	.word	0x40023800
 8004ad4:	40020800 	.word	0x40020800
 8004ad8:	40001800 	.word	0x40001800
 8004adc:	40020400 	.word	0x40020400

08004ae0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004ae4:	4b11      	ldr	r3, [pc, #68]	; (8004b2c <MX_USART2_UART_Init+0x4c>)
 8004ae6:	4a12      	ldr	r2, [pc, #72]	; (8004b30 <MX_USART2_UART_Init+0x50>)
 8004ae8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004aea:	4b10      	ldr	r3, [pc, #64]	; (8004b2c <MX_USART2_UART_Init+0x4c>)
 8004aec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004af0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004af2:	4b0e      	ldr	r3, [pc, #56]	; (8004b2c <MX_USART2_UART_Init+0x4c>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004af8:	4b0c      	ldr	r3, [pc, #48]	; (8004b2c <MX_USART2_UART_Init+0x4c>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004afe:	4b0b      	ldr	r3, [pc, #44]	; (8004b2c <MX_USART2_UART_Init+0x4c>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004b04:	4b09      	ldr	r3, [pc, #36]	; (8004b2c <MX_USART2_UART_Init+0x4c>)
 8004b06:	220c      	movs	r2, #12
 8004b08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b0a:	4b08      	ldr	r3, [pc, #32]	; (8004b2c <MX_USART2_UART_Init+0x4c>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b10:	4b06      	ldr	r3, [pc, #24]	; (8004b2c <MX_USART2_UART_Init+0x4c>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004b16:	4805      	ldr	r0, [pc, #20]	; (8004b2c <MX_USART2_UART_Init+0x4c>)
 8004b18:	f003 f970 	bl	8007dfc <HAL_UART_Init>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004b22:	f7fc fee7 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004b26:	bf00      	nop
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	2000174c 	.word	0x2000174c
 8004b30:	40004400 	.word	0x40004400

08004b34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b08a      	sub	sp, #40	; 0x28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b3c:	f107 0314 	add.w	r3, r7, #20
 8004b40:	2200      	movs	r2, #0
 8004b42:	601a      	str	r2, [r3, #0]
 8004b44:	605a      	str	r2, [r3, #4]
 8004b46:	609a      	str	r2, [r3, #8]
 8004b48:	60da      	str	r2, [r3, #12]
 8004b4a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a4d      	ldr	r2, [pc, #308]	; (8004c88 <HAL_UART_MspInit+0x154>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	f040 8093 	bne.w	8004c7e <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b58:	2300      	movs	r3, #0
 8004b5a:	613b      	str	r3, [r7, #16]
 8004b5c:	4b4b      	ldr	r3, [pc, #300]	; (8004c8c <HAL_UART_MspInit+0x158>)
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b60:	4a4a      	ldr	r2, [pc, #296]	; (8004c8c <HAL_UART_MspInit+0x158>)
 8004b62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b66:	6413      	str	r3, [r2, #64]	; 0x40
 8004b68:	4b48      	ldr	r3, [pc, #288]	; (8004c8c <HAL_UART_MspInit+0x158>)
 8004b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b70:	613b      	str	r3, [r7, #16]
 8004b72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b74:	2300      	movs	r3, #0
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	4b44      	ldr	r3, [pc, #272]	; (8004c8c <HAL_UART_MspInit+0x158>)
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7c:	4a43      	ldr	r2, [pc, #268]	; (8004c8c <HAL_UART_MspInit+0x158>)
 8004b7e:	f043 0301 	orr.w	r3, r3, #1
 8004b82:	6313      	str	r3, [r2, #48]	; 0x30
 8004b84:	4b41      	ldr	r3, [pc, #260]	; (8004c8c <HAL_UART_MspInit+0x158>)
 8004b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	60fb      	str	r3, [r7, #12]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004b90:	230c      	movs	r3, #12
 8004b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b94:	2302      	movs	r3, #2
 8004b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004ba0:	2307      	movs	r3, #7
 8004ba2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ba4:	f107 0314 	add.w	r3, r7, #20
 8004ba8:	4619      	mov	r1, r3
 8004baa:	4839      	ldr	r0, [pc, #228]	; (8004c90 <HAL_UART_MspInit+0x15c>)
 8004bac:	f000 fee4 	bl	8005978 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004bb0:	4b38      	ldr	r3, [pc, #224]	; (8004c94 <HAL_UART_MspInit+0x160>)
 8004bb2:	4a39      	ldr	r2, [pc, #228]	; (8004c98 <HAL_UART_MspInit+0x164>)
 8004bb4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004bb6:	4b37      	ldr	r3, [pc, #220]	; (8004c94 <HAL_UART_MspInit+0x160>)
 8004bb8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004bbc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004bbe:	4b35      	ldr	r3, [pc, #212]	; (8004c94 <HAL_UART_MspInit+0x160>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bc4:	4b33      	ldr	r3, [pc, #204]	; (8004c94 <HAL_UART_MspInit+0x160>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004bca:	4b32      	ldr	r3, [pc, #200]	; (8004c94 <HAL_UART_MspInit+0x160>)
 8004bcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bd0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004bd2:	4b30      	ldr	r3, [pc, #192]	; (8004c94 <HAL_UART_MspInit+0x160>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bd8:	4b2e      	ldr	r3, [pc, #184]	; (8004c94 <HAL_UART_MspInit+0x160>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004bde:	4b2d      	ldr	r3, [pc, #180]	; (8004c94 <HAL_UART_MspInit+0x160>)
 8004be0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004be4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004be6:	4b2b      	ldr	r3, [pc, #172]	; (8004c94 <HAL_UART_MspInit+0x160>)
 8004be8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004bec:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004bee:	4b29      	ldr	r3, [pc, #164]	; (8004c94 <HAL_UART_MspInit+0x160>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004bf4:	4827      	ldr	r0, [pc, #156]	; (8004c94 <HAL_UART_MspInit+0x160>)
 8004bf6:	f000 fa5f 	bl	80050b8 <HAL_DMA_Init>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8004c00:	f7fc fe78 	bl	80018f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a23      	ldr	r2, [pc, #140]	; (8004c94 <HAL_UART_MspInit+0x160>)
 8004c08:	639a      	str	r2, [r3, #56]	; 0x38
 8004c0a:	4a22      	ldr	r2, [pc, #136]	; (8004c94 <HAL_UART_MspInit+0x160>)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004c10:	4b22      	ldr	r3, [pc, #136]	; (8004c9c <HAL_UART_MspInit+0x168>)
 8004c12:	4a23      	ldr	r2, [pc, #140]	; (8004ca0 <HAL_UART_MspInit+0x16c>)
 8004c14:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004c16:	4b21      	ldr	r3, [pc, #132]	; (8004c9c <HAL_UART_MspInit+0x168>)
 8004c18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004c1c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c1e:	4b1f      	ldr	r3, [pc, #124]	; (8004c9c <HAL_UART_MspInit+0x168>)
 8004c20:	2240      	movs	r2, #64	; 0x40
 8004c22:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c24:	4b1d      	ldr	r3, [pc, #116]	; (8004c9c <HAL_UART_MspInit+0x168>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004c2a:	4b1c      	ldr	r3, [pc, #112]	; (8004c9c <HAL_UART_MspInit+0x168>)
 8004c2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c30:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c32:	4b1a      	ldr	r3, [pc, #104]	; (8004c9c <HAL_UART_MspInit+0x168>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c38:	4b18      	ldr	r3, [pc, #96]	; (8004c9c <HAL_UART_MspInit+0x168>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004c3e:	4b17      	ldr	r3, [pc, #92]	; (8004c9c <HAL_UART_MspInit+0x168>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004c44:	4b15      	ldr	r3, [pc, #84]	; (8004c9c <HAL_UART_MspInit+0x168>)
 8004c46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c4a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c4c:	4b13      	ldr	r3, [pc, #76]	; (8004c9c <HAL_UART_MspInit+0x168>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004c52:	4812      	ldr	r0, [pc, #72]	; (8004c9c <HAL_UART_MspInit+0x168>)
 8004c54:	f000 fa30 	bl	80050b8 <HAL_DMA_Init>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8004c5e:	f7fc fe49 	bl	80018f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a0d      	ldr	r2, [pc, #52]	; (8004c9c <HAL_UART_MspInit+0x168>)
 8004c66:	635a      	str	r2, [r3, #52]	; 0x34
 8004c68:	4a0c      	ldr	r2, [pc, #48]	; (8004c9c <HAL_UART_MspInit+0x168>)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004c6e:	2200      	movs	r2, #0
 8004c70:	2100      	movs	r1, #0
 8004c72:	2026      	movs	r0, #38	; 0x26
 8004c74:	f000 f9db 	bl	800502e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004c78:	2026      	movs	r0, #38	; 0x26
 8004c7a:	f000 f9f4 	bl	8005066 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004c7e:	bf00      	nop
 8004c80:	3728      	adds	r7, #40	; 0x28
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	40004400 	.word	0x40004400
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	40020000 	.word	0x40020000
 8004c94:	20001790 	.word	0x20001790
 8004c98:	40026088 	.word	0x40026088
 8004c9c:	200017f0 	.word	0x200017f0
 8004ca0:	400260a0 	.word	0x400260a0

08004ca4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a0e      	ldr	r2, [pc, #56]	; (8004cec <HAL_UART_MspDeInit+0x48>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d116      	bne.n	8004ce4 <HAL_UART_MspDeInit+0x40>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8004cb6:	4b0e      	ldr	r3, [pc, #56]	; (8004cf0 <HAL_UART_MspDeInit+0x4c>)
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	4a0d      	ldr	r2, [pc, #52]	; (8004cf0 <HAL_UART_MspDeInit+0x4c>)
 8004cbc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004cc0:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8004cc2:	210c      	movs	r1, #12
 8004cc4:	480b      	ldr	r0, [pc, #44]	; (8004cf4 <HAL_UART_MspDeInit+0x50>)
 8004cc6:	f000 ffeb 	bl	8005ca0 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 faa0 	bl	8005214 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 fa9b 	bl	8005214 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8004cde:	2026      	movs	r0, #38	; 0x26
 8004ce0:	f000 f9cf 	bl	8005082 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8004ce4:	bf00      	nop
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	40004400 	.word	0x40004400
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	40020000 	.word	0x40020000

08004cf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004cf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004cfc:	480d      	ldr	r0, [pc, #52]	; (8004d34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004cfe:	490e      	ldr	r1, [pc, #56]	; (8004d38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004d00:	4a0e      	ldr	r2, [pc, #56]	; (8004d3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d04:	e002      	b.n	8004d0c <LoopCopyDataInit>

08004d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d0a:	3304      	adds	r3, #4

08004d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d10:	d3f9      	bcc.n	8004d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d12:	4a0b      	ldr	r2, [pc, #44]	; (8004d40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004d14:	4c0b      	ldr	r4, [pc, #44]	; (8004d44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d18:	e001      	b.n	8004d1e <LoopFillZerobss>

08004d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d1c:	3204      	adds	r2, #4

08004d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d20:	d3fb      	bcc.n	8004d1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004d22:	f7ff fb05 	bl	8004330 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004d26:	f004 fa95 	bl	8009254 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004d2a:	f7fc fcf7 	bl	800171c <main>
  bx  lr    
 8004d2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004d30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d38:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8004d3c:	080098c4 	.word	0x080098c4
  ldr r2, =_sbss
 8004d40:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8004d44:	20001864 	.word	0x20001864

08004d48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d48:	e7fe      	b.n	8004d48 <ADC_IRQHandler>
	...

08004d4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004d50:	4b0e      	ldr	r3, [pc, #56]	; (8004d8c <HAL_Init+0x40>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a0d      	ldr	r2, [pc, #52]	; (8004d8c <HAL_Init+0x40>)
 8004d56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004d5c:	4b0b      	ldr	r3, [pc, #44]	; (8004d8c <HAL_Init+0x40>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a0a      	ldr	r2, [pc, #40]	; (8004d8c <HAL_Init+0x40>)
 8004d62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d68:	4b08      	ldr	r3, [pc, #32]	; (8004d8c <HAL_Init+0x40>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a07      	ldr	r2, [pc, #28]	; (8004d8c <HAL_Init+0x40>)
 8004d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d74:	2003      	movs	r0, #3
 8004d76:	f000 f94f 	bl	8005018 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d7a:	2000      	movs	r0, #0
 8004d7c:	f000 f808 	bl	8004d90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d80:	f7ff f9e6 	bl	8004150 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	40023c00 	.word	0x40023c00

08004d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d98:	4b12      	ldr	r3, [pc, #72]	; (8004de4 <HAL_InitTick+0x54>)
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	4b12      	ldr	r3, [pc, #72]	; (8004de8 <HAL_InitTick+0x58>)
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	4619      	mov	r1, r3
 8004da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 f975 	bl	800509e <HAL_SYSTICK_Config>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e00e      	b.n	8004ddc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2b0f      	cmp	r3, #15
 8004dc2:	d80a      	bhi.n	8004dda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	6879      	ldr	r1, [r7, #4]
 8004dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dcc:	f000 f92f 	bl	800502e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004dd0:	4a06      	ldr	r2, [pc, #24]	; (8004dec <HAL_InitTick+0x5c>)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	e000      	b.n	8004ddc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	20000000 	.word	0x20000000
 8004de8:	20000008 	.word	0x20000008
 8004dec:	20000004 	.word	0x20000004

08004df0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004df0:	b480      	push	{r7}
 8004df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004df4:	4b06      	ldr	r3, [pc, #24]	; (8004e10 <HAL_IncTick+0x20>)
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	461a      	mov	r2, r3
 8004dfa:	4b06      	ldr	r3, [pc, #24]	; (8004e14 <HAL_IncTick+0x24>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4413      	add	r3, r2
 8004e00:	4a04      	ldr	r2, [pc, #16]	; (8004e14 <HAL_IncTick+0x24>)
 8004e02:	6013      	str	r3, [r2, #0]
}
 8004e04:	bf00      	nop
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	20000008 	.word	0x20000008
 8004e14:	20001850 	.word	0x20001850

08004e18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8004e1c:	4b03      	ldr	r3, [pc, #12]	; (8004e2c <HAL_GetTick+0x14>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	20001850 	.word	0x20001850

08004e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f003 0307 	and.w	r3, r3, #7
 8004e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e40:	4b0c      	ldr	r3, [pc, #48]	; (8004e74 <__NVIC_SetPriorityGrouping+0x44>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e62:	4a04      	ldr	r2, [pc, #16]	; (8004e74 <__NVIC_SetPriorityGrouping+0x44>)
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	60d3      	str	r3, [r2, #12]
}
 8004e68:	bf00      	nop
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	e000ed00 	.word	0xe000ed00

08004e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e7c:	4b04      	ldr	r3, [pc, #16]	; (8004e90 <__NVIC_GetPriorityGrouping+0x18>)
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	0a1b      	lsrs	r3, r3, #8
 8004e82:	f003 0307 	and.w	r3, r3, #7
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	e000ed00 	.word	0xe000ed00

08004e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	db0b      	blt.n	8004ebe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ea6:	79fb      	ldrb	r3, [r7, #7]
 8004ea8:	f003 021f 	and.w	r2, r3, #31
 8004eac:	4907      	ldr	r1, [pc, #28]	; (8004ecc <__NVIC_EnableIRQ+0x38>)
 8004eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eb2:	095b      	lsrs	r3, r3, #5
 8004eb4:	2001      	movs	r0, #1
 8004eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8004eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004ebe:	bf00      	nop
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	e000e100 	.word	0xe000e100

08004ed0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	db12      	blt.n	8004f08 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ee2:	79fb      	ldrb	r3, [r7, #7]
 8004ee4:	f003 021f 	and.w	r2, r3, #31
 8004ee8:	490a      	ldr	r1, [pc, #40]	; (8004f14 <__NVIC_DisableIRQ+0x44>)
 8004eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eee:	095b      	lsrs	r3, r3, #5
 8004ef0:	2001      	movs	r0, #1
 8004ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ef6:	3320      	adds	r3, #32
 8004ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004efc:	f3bf 8f4f 	dsb	sy
}
 8004f00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004f02:	f3bf 8f6f 	isb	sy
}
 8004f06:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr
 8004f14:	e000e100 	.word	0xe000e100

08004f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	4603      	mov	r3, r0
 8004f20:	6039      	str	r1, [r7, #0]
 8004f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	db0a      	blt.n	8004f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	b2da      	uxtb	r2, r3
 8004f30:	490c      	ldr	r1, [pc, #48]	; (8004f64 <__NVIC_SetPriority+0x4c>)
 8004f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f36:	0112      	lsls	r2, r2, #4
 8004f38:	b2d2      	uxtb	r2, r2
 8004f3a:	440b      	add	r3, r1
 8004f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f40:	e00a      	b.n	8004f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	4908      	ldr	r1, [pc, #32]	; (8004f68 <__NVIC_SetPriority+0x50>)
 8004f48:	79fb      	ldrb	r3, [r7, #7]
 8004f4a:	f003 030f 	and.w	r3, r3, #15
 8004f4e:	3b04      	subs	r3, #4
 8004f50:	0112      	lsls	r2, r2, #4
 8004f52:	b2d2      	uxtb	r2, r2
 8004f54:	440b      	add	r3, r1
 8004f56:	761a      	strb	r2, [r3, #24]
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	e000e100 	.word	0xe000e100
 8004f68:	e000ed00 	.word	0xe000ed00

08004f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b089      	sub	sp, #36	; 0x24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f003 0307 	and.w	r3, r3, #7
 8004f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	f1c3 0307 	rsb	r3, r3, #7
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	bf28      	it	cs
 8004f8a:	2304      	movcs	r3, #4
 8004f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	3304      	adds	r3, #4
 8004f92:	2b06      	cmp	r3, #6
 8004f94:	d902      	bls.n	8004f9c <NVIC_EncodePriority+0x30>
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	3b03      	subs	r3, #3
 8004f9a:	e000      	b.n	8004f9e <NVIC_EncodePriority+0x32>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004faa:	43da      	mvns	r2, r3
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	401a      	ands	r2, r3
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	fa01 f303 	lsl.w	r3, r1, r3
 8004fbe:	43d9      	mvns	r1, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fc4:	4313      	orrs	r3, r2
         );
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3724      	adds	r7, #36	; 0x24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
	...

08004fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fe4:	d301      	bcc.n	8004fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e00f      	b.n	800500a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fea:	4a0a      	ldr	r2, [pc, #40]	; (8005014 <SysTick_Config+0x40>)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ff2:	210f      	movs	r1, #15
 8004ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff8:	f7ff ff8e 	bl	8004f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ffc:	4b05      	ldr	r3, [pc, #20]	; (8005014 <SysTick_Config+0x40>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005002:	4b04      	ldr	r3, [pc, #16]	; (8005014 <SysTick_Config+0x40>)
 8005004:	2207      	movs	r2, #7
 8005006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3708      	adds	r7, #8
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	e000e010 	.word	0xe000e010

08005018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f7ff ff05 	bl	8004e30 <__NVIC_SetPriorityGrouping>
}
 8005026:	bf00      	nop
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800502e:	b580      	push	{r7, lr}
 8005030:	b086      	sub	sp, #24
 8005032:	af00      	add	r7, sp, #0
 8005034:	4603      	mov	r3, r0
 8005036:	60b9      	str	r1, [r7, #8]
 8005038:	607a      	str	r2, [r7, #4]
 800503a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800503c:	2300      	movs	r3, #0
 800503e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005040:	f7ff ff1a 	bl	8004e78 <__NVIC_GetPriorityGrouping>
 8005044:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	68b9      	ldr	r1, [r7, #8]
 800504a:	6978      	ldr	r0, [r7, #20]
 800504c:	f7ff ff8e 	bl	8004f6c <NVIC_EncodePriority>
 8005050:	4602      	mov	r2, r0
 8005052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005056:	4611      	mov	r1, r2
 8005058:	4618      	mov	r0, r3
 800505a:	f7ff ff5d 	bl	8004f18 <__NVIC_SetPriority>
}
 800505e:	bf00      	nop
 8005060:	3718      	adds	r7, #24
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b082      	sub	sp, #8
 800506a:	af00      	add	r7, sp, #0
 800506c:	4603      	mov	r3, r0
 800506e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005074:	4618      	mov	r0, r3
 8005076:	f7ff ff0d 	bl	8004e94 <__NVIC_EnableIRQ>
}
 800507a:	bf00      	nop
 800507c:	3708      	adds	r7, #8
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b082      	sub	sp, #8
 8005086:	af00      	add	r7, sp, #0
 8005088:	4603      	mov	r3, r0
 800508a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800508c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005090:	4618      	mov	r0, r3
 8005092:	f7ff ff1d 	bl	8004ed0 <__NVIC_DisableIRQ>
}
 8005096:	bf00      	nop
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b082      	sub	sp, #8
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7ff ff94 	bl	8004fd4 <SysTick_Config>
 80050ac:	4603      	mov	r3, r0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
	...

080050b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80050c0:	2300      	movs	r3, #0
 80050c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80050c4:	f7ff fea8 	bl	8004e18 <HAL_GetTick>
 80050c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d101      	bne.n	80050d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e099      	b.n	8005208 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 0201 	bic.w	r2, r2, #1
 80050f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050f4:	e00f      	b.n	8005116 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050f6:	f7ff fe8f 	bl	8004e18 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b05      	cmp	r3, #5
 8005102:	d908      	bls.n	8005116 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2220      	movs	r2, #32
 8005108:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2203      	movs	r2, #3
 800510e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e078      	b.n	8005208 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1e8      	bne.n	80050f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	4b38      	ldr	r3, [pc, #224]	; (8005210 <HAL_DMA_Init+0x158>)
 8005130:	4013      	ands	r3, r2
 8005132:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005142:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800514e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800515a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	4313      	orrs	r3, r2
 8005166:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	2b04      	cmp	r3, #4
 800516e:	d107      	bne.n	8005180 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005178:	4313      	orrs	r3, r2
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	4313      	orrs	r3, r2
 800517e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f023 0307 	bic.w	r3, r3, #7
 8005196:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	4313      	orrs	r3, r2
 80051a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d117      	bne.n	80051da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00e      	beq.n	80051da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 fb5f 	bl	8005880 <DMA_CheckFifoParam>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d008      	beq.n	80051da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2240      	movs	r2, #64	; 0x40
 80051cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80051d6:	2301      	movs	r3, #1
 80051d8:	e016      	b.n	8005208 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 fb16 	bl	8005814 <DMA_CalcBaseAndBitshift>
 80051e8:	4603      	mov	r3, r0
 80051ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f0:	223f      	movs	r2, #63	; 0x3f
 80051f2:	409a      	lsls	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	f010803f 	.word	0xf010803f

08005214 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e050      	b.n	80052c8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d101      	bne.n	8005236 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005232:	2302      	movs	r3, #2
 8005234:	e048      	b.n	80052c8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0201 	bic.w	r2, r2, #1
 8005244:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2200      	movs	r2, #0
 800524c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2200      	movs	r2, #0
 8005254:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2200      	movs	r2, #0
 800525c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2200      	movs	r2, #0
 8005264:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2200      	movs	r2, #0
 800526c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2221      	movs	r2, #33	; 0x21
 8005274:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 facc 	bl	8005814 <DMA_CalcBaseAndBitshift>
 800527c:	4603      	mov	r3, r0
 800527e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052a8:	223f      	movs	r2, #63	; 0x3f
 80052aa:	409a      	lsls	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
 80052dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052de:	2300      	movs	r3, #0
 80052e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d101      	bne.n	80052f6 <HAL_DMA_Start_IT+0x26>
 80052f2:	2302      	movs	r3, #2
 80052f4:	e040      	b.n	8005378 <HAL_DMA_Start_IT+0xa8>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b01      	cmp	r3, #1
 8005308:	d12f      	bne.n	800536a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2202      	movs	r2, #2
 800530e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	68b9      	ldr	r1, [r7, #8]
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 fa4a 	bl	80057b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005328:	223f      	movs	r2, #63	; 0x3f
 800532a:	409a      	lsls	r2, r3
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f042 0216 	orr.w	r2, r2, #22
 800533e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005344:	2b00      	cmp	r3, #0
 8005346:	d007      	beq.n	8005358 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f042 0208 	orr.w	r2, r2, #8
 8005356:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f042 0201 	orr.w	r2, r2, #1
 8005366:	601a      	str	r2, [r3, #0]
 8005368:	e005      	b.n	8005376 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005372:	2302      	movs	r3, #2
 8005374:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005376:	7dfb      	ldrb	r3, [r7, #23]
}
 8005378:	4618      	mov	r0, r3
 800537a:	3718      	adds	r7, #24
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800538c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800538e:	f7ff fd43 	bl	8004e18 <HAL_GetTick>
 8005392:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d008      	beq.n	80053b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2280      	movs	r2, #128	; 0x80
 80053a4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e052      	b.n	8005458 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 0216 	bic.w	r2, r2, #22
 80053c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	695a      	ldr	r2, [r3, #20]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d103      	bne.n	80053e2 <HAL_DMA_Abort+0x62>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d007      	beq.n	80053f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 0208 	bic.w	r2, r2, #8
 80053f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f022 0201 	bic.w	r2, r2, #1
 8005400:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005402:	e013      	b.n	800542c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005404:	f7ff fd08 	bl	8004e18 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b05      	cmp	r3, #5
 8005410:	d90c      	bls.n	800542c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2220      	movs	r2, #32
 8005416:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2203      	movs	r2, #3
 800541c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e015      	b.n	8005458 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1e4      	bne.n	8005404 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800543e:	223f      	movs	r2, #63	; 0x3f
 8005440:	409a      	lsls	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b02      	cmp	r3, #2
 8005472:	d004      	beq.n	800547e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2280      	movs	r2, #128	; 0x80
 8005478:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e00c      	b.n	8005498 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2205      	movs	r2, #5
 8005482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f022 0201 	bic.w	r2, r2, #1
 8005494:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80054b0:	4b8e      	ldr	r3, [pc, #568]	; (80056ec <HAL_DMA_IRQHandler+0x248>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a8e      	ldr	r2, [pc, #568]	; (80056f0 <HAL_DMA_IRQHandler+0x24c>)
 80054b6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ba:	0a9b      	lsrs	r3, r3, #10
 80054bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ce:	2208      	movs	r2, #8
 80054d0:	409a      	lsls	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	4013      	ands	r3, r2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d01a      	beq.n	8005510 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d013      	beq.n	8005510 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f022 0204 	bic.w	r2, r2, #4
 80054f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054fc:	2208      	movs	r2, #8
 80054fe:	409a      	lsls	r2, r3
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005508:	f043 0201 	orr.w	r2, r3, #1
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005514:	2201      	movs	r2, #1
 8005516:	409a      	lsls	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4013      	ands	r3, r2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d012      	beq.n	8005546 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00b      	beq.n	8005546 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005532:	2201      	movs	r2, #1
 8005534:	409a      	lsls	r2, r3
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553e:	f043 0202 	orr.w	r2, r3, #2
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800554a:	2204      	movs	r2, #4
 800554c:	409a      	lsls	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4013      	ands	r3, r2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d012      	beq.n	800557c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00b      	beq.n	800557c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005568:	2204      	movs	r2, #4
 800556a:	409a      	lsls	r2, r3
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005574:	f043 0204 	orr.w	r2, r3, #4
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005580:	2210      	movs	r2, #16
 8005582:	409a      	lsls	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4013      	ands	r3, r2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d043      	beq.n	8005614 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0308 	and.w	r3, r3, #8
 8005596:	2b00      	cmp	r3, #0
 8005598:	d03c      	beq.n	8005614 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800559e:	2210      	movs	r2, #16
 80055a0:	409a      	lsls	r2, r3
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d018      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d108      	bne.n	80055d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d024      	beq.n	8005614 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	4798      	blx	r3
 80055d2:	e01f      	b.n	8005614 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d01b      	beq.n	8005614 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	4798      	blx	r3
 80055e4:	e016      	b.n	8005614 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d107      	bne.n	8005604 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f022 0208 	bic.w	r2, r2, #8
 8005602:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005608:	2b00      	cmp	r3, #0
 800560a:	d003      	beq.n	8005614 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005618:	2220      	movs	r2, #32
 800561a:	409a      	lsls	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4013      	ands	r3, r2
 8005620:	2b00      	cmp	r3, #0
 8005622:	f000 808f 	beq.w	8005744 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0310 	and.w	r3, r3, #16
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 8087 	beq.w	8005744 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800563a:	2220      	movs	r2, #32
 800563c:	409a      	lsls	r2, r3
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b05      	cmp	r3, #5
 800564c:	d136      	bne.n	80056bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 0216 	bic.w	r2, r2, #22
 800565c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	695a      	ldr	r2, [r3, #20]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800566c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005672:	2b00      	cmp	r3, #0
 8005674:	d103      	bne.n	800567e <HAL_DMA_IRQHandler+0x1da>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800567a:	2b00      	cmp	r3, #0
 800567c:	d007      	beq.n	800568e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 0208 	bic.w	r2, r2, #8
 800568c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005692:	223f      	movs	r2, #63	; 0x3f
 8005694:	409a      	lsls	r2, r3
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d07e      	beq.n	80057b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	4798      	blx	r3
        }
        return;
 80056ba:	e079      	b.n	80057b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d01d      	beq.n	8005706 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10d      	bne.n	80056f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d031      	beq.n	8005744 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	4798      	blx	r3
 80056e8:	e02c      	b.n	8005744 <HAL_DMA_IRQHandler+0x2a0>
 80056ea:	bf00      	nop
 80056ec:	20000000 	.word	0x20000000
 80056f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d023      	beq.n	8005744 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	4798      	blx	r3
 8005704:	e01e      	b.n	8005744 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10f      	bne.n	8005734 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f022 0210 	bic.w	r2, r2, #16
 8005722:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005738:	2b00      	cmp	r3, #0
 800573a:	d003      	beq.n	8005744 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005748:	2b00      	cmp	r3, #0
 800574a:	d032      	beq.n	80057b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b00      	cmp	r3, #0
 8005756:	d022      	beq.n	800579e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2205      	movs	r2, #5
 800575c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 0201 	bic.w	r2, r2, #1
 800576e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	3301      	adds	r3, #1
 8005774:	60bb      	str	r3, [r7, #8]
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	429a      	cmp	r2, r3
 800577a:	d307      	bcc.n	800578c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1f2      	bne.n	8005770 <HAL_DMA_IRQHandler+0x2cc>
 800578a:	e000      	b.n	800578e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800578c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d005      	beq.n	80057b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	4798      	blx	r3
 80057ae:	e000      	b.n	80057b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80057b0:	bf00      	nop
    }
  }
}
 80057b2:	3718      	adds	r7, #24
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
 80057c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80057d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	2b40      	cmp	r3, #64	; 0x40
 80057e4:	d108      	bne.n	80057f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80057f6:	e007      	b.n	8005808 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	60da      	str	r2, [r3, #12]
}
 8005808:	bf00      	nop
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	b2db      	uxtb	r3, r3
 8005822:	3b10      	subs	r3, #16
 8005824:	4a14      	ldr	r2, [pc, #80]	; (8005878 <DMA_CalcBaseAndBitshift+0x64>)
 8005826:	fba2 2303 	umull	r2, r3, r2, r3
 800582a:	091b      	lsrs	r3, r3, #4
 800582c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800582e:	4a13      	ldr	r2, [pc, #76]	; (800587c <DMA_CalcBaseAndBitshift+0x68>)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4413      	add	r3, r2
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	461a      	mov	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2b03      	cmp	r3, #3
 8005840:	d909      	bls.n	8005856 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800584a:	f023 0303 	bic.w	r3, r3, #3
 800584e:	1d1a      	adds	r2, r3, #4
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	659a      	str	r2, [r3, #88]	; 0x58
 8005854:	e007      	b.n	8005866 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800585e:	f023 0303 	bic.w	r3, r3, #3
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800586a:	4618      	mov	r0, r3
 800586c:	3714      	adds	r7, #20
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	aaaaaaab 	.word	0xaaaaaaab
 800587c:	080098a8 	.word	0x080098a8

08005880 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005888:	2300      	movs	r3, #0
 800588a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005890:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d11f      	bne.n	80058da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b03      	cmp	r3, #3
 800589e:	d856      	bhi.n	800594e <DMA_CheckFifoParam+0xce>
 80058a0:	a201      	add	r2, pc, #4	; (adr r2, 80058a8 <DMA_CheckFifoParam+0x28>)
 80058a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a6:	bf00      	nop
 80058a8:	080058b9 	.word	0x080058b9
 80058ac:	080058cb 	.word	0x080058cb
 80058b0:	080058b9 	.word	0x080058b9
 80058b4:	0800594f 	.word	0x0800594f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d046      	beq.n	8005952 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058c8:	e043      	b.n	8005952 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058d2:	d140      	bne.n	8005956 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058d8:	e03d      	b.n	8005956 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058e2:	d121      	bne.n	8005928 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2b03      	cmp	r3, #3
 80058e8:	d837      	bhi.n	800595a <DMA_CheckFifoParam+0xda>
 80058ea:	a201      	add	r2, pc, #4	; (adr r2, 80058f0 <DMA_CheckFifoParam+0x70>)
 80058ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f0:	08005901 	.word	0x08005901
 80058f4:	08005907 	.word	0x08005907
 80058f8:	08005901 	.word	0x08005901
 80058fc:	08005919 	.word	0x08005919
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	73fb      	strb	r3, [r7, #15]
      break;
 8005904:	e030      	b.n	8005968 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d025      	beq.n	800595e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005916:	e022      	b.n	800595e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005920:	d11f      	bne.n	8005962 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005926:	e01c      	b.n	8005962 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	2b02      	cmp	r3, #2
 800592c:	d903      	bls.n	8005936 <DMA_CheckFifoParam+0xb6>
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	2b03      	cmp	r3, #3
 8005932:	d003      	beq.n	800593c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005934:	e018      	b.n	8005968 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	73fb      	strb	r3, [r7, #15]
      break;
 800593a:	e015      	b.n	8005968 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005940:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00e      	beq.n	8005966 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	73fb      	strb	r3, [r7, #15]
      break;
 800594c:	e00b      	b.n	8005966 <DMA_CheckFifoParam+0xe6>
      break;
 800594e:	bf00      	nop
 8005950:	e00a      	b.n	8005968 <DMA_CheckFifoParam+0xe8>
      break;
 8005952:	bf00      	nop
 8005954:	e008      	b.n	8005968 <DMA_CheckFifoParam+0xe8>
      break;
 8005956:	bf00      	nop
 8005958:	e006      	b.n	8005968 <DMA_CheckFifoParam+0xe8>
      break;
 800595a:	bf00      	nop
 800595c:	e004      	b.n	8005968 <DMA_CheckFifoParam+0xe8>
      break;
 800595e:	bf00      	nop
 8005960:	e002      	b.n	8005968 <DMA_CheckFifoParam+0xe8>
      break;   
 8005962:	bf00      	nop
 8005964:	e000      	b.n	8005968 <DMA_CheckFifoParam+0xe8>
      break;
 8005966:	bf00      	nop
    }
  } 
  
  return status; 
 8005968:	7bfb      	ldrb	r3, [r7, #15]
}
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop

08005978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005978:	b480      	push	{r7}
 800597a:	b089      	sub	sp, #36	; 0x24
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005982:	2300      	movs	r3, #0
 8005984:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005986:	2300      	movs	r3, #0
 8005988:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800598a:	2300      	movs	r3, #0
 800598c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800598e:	2300      	movs	r3, #0
 8005990:	61fb      	str	r3, [r7, #28]
 8005992:	e165      	b.n	8005c60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005994:	2201      	movs	r2, #1
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	fa02 f303 	lsl.w	r3, r2, r3
 800599c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	4013      	ands	r3, r2
 80059a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	f040 8154 	bne.w	8005c5a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f003 0303 	and.w	r3, r3, #3
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d005      	beq.n	80059ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d130      	bne.n	8005a2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	2203      	movs	r2, #3
 80059d6:	fa02 f303 	lsl.w	r3, r2, r3
 80059da:	43db      	mvns	r3, r3
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	4013      	ands	r3, r2
 80059e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	68da      	ldr	r2, [r3, #12]
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	fa02 f303 	lsl.w	r3, r2, r3
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a00:	2201      	movs	r2, #1
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	fa02 f303 	lsl.w	r3, r2, r3
 8005a08:	43db      	mvns	r3, r3
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	091b      	lsrs	r3, r3, #4
 8005a16:	f003 0201 	and.w	r2, r3, #1
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f003 0303 	and.w	r3, r3, #3
 8005a34:	2b03      	cmp	r3, #3
 8005a36:	d017      	beq.n	8005a68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	2203      	movs	r2, #3
 8005a44:	fa02 f303 	lsl.w	r3, r2, r3
 8005a48:	43db      	mvns	r3, r3
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	689a      	ldr	r2, [r3, #8]
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	005b      	lsls	r3, r3, #1
 8005a58:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f003 0303 	and.w	r3, r3, #3
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d123      	bne.n	8005abc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	08da      	lsrs	r2, r3, #3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	3208      	adds	r2, #8
 8005a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	f003 0307 	and.w	r3, r3, #7
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	220f      	movs	r2, #15
 8005a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a90:	43db      	mvns	r3, r3
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	4013      	ands	r3, r2
 8005a96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	691a      	ldr	r2, [r3, #16]
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	f003 0307 	and.w	r3, r3, #7
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa8:	69ba      	ldr	r2, [r7, #24]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	08da      	lsrs	r2, r3, #3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	3208      	adds	r2, #8
 8005ab6:	69b9      	ldr	r1, [r7, #24]
 8005ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	005b      	lsls	r3, r3, #1
 8005ac6:	2203      	movs	r2, #3
 8005ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8005acc:	43db      	mvns	r3, r3
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f003 0203 	and.w	r2, r3, #3
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	005b      	lsls	r3, r3, #1
 8005ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 80ae 	beq.w	8005c5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005afe:	2300      	movs	r3, #0
 8005b00:	60fb      	str	r3, [r7, #12]
 8005b02:	4b5d      	ldr	r3, [pc, #372]	; (8005c78 <HAL_GPIO_Init+0x300>)
 8005b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b06:	4a5c      	ldr	r2, [pc, #368]	; (8005c78 <HAL_GPIO_Init+0x300>)
 8005b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8005b0e:	4b5a      	ldr	r3, [pc, #360]	; (8005c78 <HAL_GPIO_Init+0x300>)
 8005b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b16:	60fb      	str	r3, [r7, #12]
 8005b18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b1a:	4a58      	ldr	r2, [pc, #352]	; (8005c7c <HAL_GPIO_Init+0x304>)
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	089b      	lsrs	r3, r3, #2
 8005b20:	3302      	adds	r3, #2
 8005b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	f003 0303 	and.w	r3, r3, #3
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	220f      	movs	r2, #15
 8005b32:	fa02 f303 	lsl.w	r3, r2, r3
 8005b36:	43db      	mvns	r3, r3
 8005b38:	69ba      	ldr	r2, [r7, #24]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a4f      	ldr	r2, [pc, #316]	; (8005c80 <HAL_GPIO_Init+0x308>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d025      	beq.n	8005b92 <HAL_GPIO_Init+0x21a>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a4e      	ldr	r2, [pc, #312]	; (8005c84 <HAL_GPIO_Init+0x30c>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d01f      	beq.n	8005b8e <HAL_GPIO_Init+0x216>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a4d      	ldr	r2, [pc, #308]	; (8005c88 <HAL_GPIO_Init+0x310>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d019      	beq.n	8005b8a <HAL_GPIO_Init+0x212>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a4c      	ldr	r2, [pc, #304]	; (8005c8c <HAL_GPIO_Init+0x314>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d013      	beq.n	8005b86 <HAL_GPIO_Init+0x20e>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a4b      	ldr	r2, [pc, #300]	; (8005c90 <HAL_GPIO_Init+0x318>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d00d      	beq.n	8005b82 <HAL_GPIO_Init+0x20a>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a4a      	ldr	r2, [pc, #296]	; (8005c94 <HAL_GPIO_Init+0x31c>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d007      	beq.n	8005b7e <HAL_GPIO_Init+0x206>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a49      	ldr	r2, [pc, #292]	; (8005c98 <HAL_GPIO_Init+0x320>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d101      	bne.n	8005b7a <HAL_GPIO_Init+0x202>
 8005b76:	2306      	movs	r3, #6
 8005b78:	e00c      	b.n	8005b94 <HAL_GPIO_Init+0x21c>
 8005b7a:	2307      	movs	r3, #7
 8005b7c:	e00a      	b.n	8005b94 <HAL_GPIO_Init+0x21c>
 8005b7e:	2305      	movs	r3, #5
 8005b80:	e008      	b.n	8005b94 <HAL_GPIO_Init+0x21c>
 8005b82:	2304      	movs	r3, #4
 8005b84:	e006      	b.n	8005b94 <HAL_GPIO_Init+0x21c>
 8005b86:	2303      	movs	r3, #3
 8005b88:	e004      	b.n	8005b94 <HAL_GPIO_Init+0x21c>
 8005b8a:	2302      	movs	r3, #2
 8005b8c:	e002      	b.n	8005b94 <HAL_GPIO_Init+0x21c>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e000      	b.n	8005b94 <HAL_GPIO_Init+0x21c>
 8005b92:	2300      	movs	r3, #0
 8005b94:	69fa      	ldr	r2, [r7, #28]
 8005b96:	f002 0203 	and.w	r2, r2, #3
 8005b9a:	0092      	lsls	r2, r2, #2
 8005b9c:	4093      	lsls	r3, r2
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ba4:	4935      	ldr	r1, [pc, #212]	; (8005c7c <HAL_GPIO_Init+0x304>)
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	089b      	lsrs	r3, r3, #2
 8005baa:	3302      	adds	r3, #2
 8005bac:	69ba      	ldr	r2, [r7, #24]
 8005bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005bb2:	4b3a      	ldr	r3, [pc, #232]	; (8005c9c <HAL_GPIO_Init+0x324>)
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	43db      	mvns	r3, r3
 8005bbc:	69ba      	ldr	r2, [r7, #24]
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005bd6:	4a31      	ldr	r2, [pc, #196]	; (8005c9c <HAL_GPIO_Init+0x324>)
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005bdc:	4b2f      	ldr	r3, [pc, #188]	; (8005c9c <HAL_GPIO_Init+0x324>)
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	43db      	mvns	r3, r3
 8005be6:	69ba      	ldr	r2, [r7, #24]
 8005be8:	4013      	ands	r3, r2
 8005bea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d003      	beq.n	8005c00 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c00:	4a26      	ldr	r2, [pc, #152]	; (8005c9c <HAL_GPIO_Init+0x324>)
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005c06:	4b25      	ldr	r3, [pc, #148]	; (8005c9c <HAL_GPIO_Init+0x324>)
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	43db      	mvns	r3, r3
 8005c10:	69ba      	ldr	r2, [r7, #24]
 8005c12:	4013      	ands	r3, r2
 8005c14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d003      	beq.n	8005c2a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c2a:	4a1c      	ldr	r2, [pc, #112]	; (8005c9c <HAL_GPIO_Init+0x324>)
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c30:	4b1a      	ldr	r3, [pc, #104]	; (8005c9c <HAL_GPIO_Init+0x324>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	43db      	mvns	r3, r3
 8005c3a:	69ba      	ldr	r2, [r7, #24]
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d003      	beq.n	8005c54 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005c4c:	69ba      	ldr	r2, [r7, #24]
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c54:	4a11      	ldr	r2, [pc, #68]	; (8005c9c <HAL_GPIO_Init+0x324>)
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	61fb      	str	r3, [r7, #28]
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	2b0f      	cmp	r3, #15
 8005c64:	f67f ae96 	bls.w	8005994 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005c68:	bf00      	nop
 8005c6a:	bf00      	nop
 8005c6c:	3724      	adds	r7, #36	; 0x24
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	40023800 	.word	0x40023800
 8005c7c:	40013800 	.word	0x40013800
 8005c80:	40020000 	.word	0x40020000
 8005c84:	40020400 	.word	0x40020400
 8005c88:	40020800 	.word	0x40020800
 8005c8c:	40020c00 	.word	0x40020c00
 8005c90:	40021000 	.word	0x40021000
 8005c94:	40021400 	.word	0x40021400
 8005c98:	40021800 	.word	0x40021800
 8005c9c:	40013c00 	.word	0x40013c00

08005ca0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b087      	sub	sp, #28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005caa:	2300      	movs	r3, #0
 8005cac:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	617b      	str	r3, [r7, #20]
 8005cba:	e0c7      	b.n	8005e4c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	4013      	ands	r3, r2
 8005ccc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	f040 80b7 	bne.w	8005e46 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005cd8:	4a62      	ldr	r2, [pc, #392]	; (8005e64 <HAL_GPIO_DeInit+0x1c4>)
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	089b      	lsrs	r3, r3, #2
 8005cde:	3302      	adds	r3, #2
 8005ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ce4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f003 0303 	and.w	r3, r3, #3
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	220f      	movs	r2, #15
 8005cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a5a      	ldr	r2, [pc, #360]	; (8005e68 <HAL_GPIO_DeInit+0x1c8>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d025      	beq.n	8005d4e <HAL_GPIO_DeInit+0xae>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a59      	ldr	r2, [pc, #356]	; (8005e6c <HAL_GPIO_DeInit+0x1cc>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d01f      	beq.n	8005d4a <HAL_GPIO_DeInit+0xaa>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a58      	ldr	r2, [pc, #352]	; (8005e70 <HAL_GPIO_DeInit+0x1d0>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d019      	beq.n	8005d46 <HAL_GPIO_DeInit+0xa6>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a57      	ldr	r2, [pc, #348]	; (8005e74 <HAL_GPIO_DeInit+0x1d4>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d013      	beq.n	8005d42 <HAL_GPIO_DeInit+0xa2>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a56      	ldr	r2, [pc, #344]	; (8005e78 <HAL_GPIO_DeInit+0x1d8>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d00d      	beq.n	8005d3e <HAL_GPIO_DeInit+0x9e>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a55      	ldr	r2, [pc, #340]	; (8005e7c <HAL_GPIO_DeInit+0x1dc>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d007      	beq.n	8005d3a <HAL_GPIO_DeInit+0x9a>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a54      	ldr	r2, [pc, #336]	; (8005e80 <HAL_GPIO_DeInit+0x1e0>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d101      	bne.n	8005d36 <HAL_GPIO_DeInit+0x96>
 8005d32:	2306      	movs	r3, #6
 8005d34:	e00c      	b.n	8005d50 <HAL_GPIO_DeInit+0xb0>
 8005d36:	2307      	movs	r3, #7
 8005d38:	e00a      	b.n	8005d50 <HAL_GPIO_DeInit+0xb0>
 8005d3a:	2305      	movs	r3, #5
 8005d3c:	e008      	b.n	8005d50 <HAL_GPIO_DeInit+0xb0>
 8005d3e:	2304      	movs	r3, #4
 8005d40:	e006      	b.n	8005d50 <HAL_GPIO_DeInit+0xb0>
 8005d42:	2303      	movs	r3, #3
 8005d44:	e004      	b.n	8005d50 <HAL_GPIO_DeInit+0xb0>
 8005d46:	2302      	movs	r3, #2
 8005d48:	e002      	b.n	8005d50 <HAL_GPIO_DeInit+0xb0>
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e000      	b.n	8005d50 <HAL_GPIO_DeInit+0xb0>
 8005d4e:	2300      	movs	r3, #0
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	f002 0203 	and.w	r2, r2, #3
 8005d56:	0092      	lsls	r2, r2, #2
 8005d58:	4093      	lsls	r3, r2
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d132      	bne.n	8005dc6 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005d60:	4b48      	ldr	r3, [pc, #288]	; (8005e84 <HAL_GPIO_DeInit+0x1e4>)
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	43db      	mvns	r3, r3
 8005d68:	4946      	ldr	r1, [pc, #280]	; (8005e84 <HAL_GPIO_DeInit+0x1e4>)
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005d6e:	4b45      	ldr	r3, [pc, #276]	; (8005e84 <HAL_GPIO_DeInit+0x1e4>)
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	43db      	mvns	r3, r3
 8005d76:	4943      	ldr	r1, [pc, #268]	; (8005e84 <HAL_GPIO_DeInit+0x1e4>)
 8005d78:	4013      	ands	r3, r2
 8005d7a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005d7c:	4b41      	ldr	r3, [pc, #260]	; (8005e84 <HAL_GPIO_DeInit+0x1e4>)
 8005d7e:	68da      	ldr	r2, [r3, #12]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	43db      	mvns	r3, r3
 8005d84:	493f      	ldr	r1, [pc, #252]	; (8005e84 <HAL_GPIO_DeInit+0x1e4>)
 8005d86:	4013      	ands	r3, r2
 8005d88:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005d8a:	4b3e      	ldr	r3, [pc, #248]	; (8005e84 <HAL_GPIO_DeInit+0x1e4>)
 8005d8c:	689a      	ldr	r2, [r3, #8]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	43db      	mvns	r3, r3
 8005d92:	493c      	ldr	r1, [pc, #240]	; (8005e84 <HAL_GPIO_DeInit+0x1e4>)
 8005d94:	4013      	ands	r3, r2
 8005d96:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	f003 0303 	and.w	r3, r3, #3
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	220f      	movs	r2, #15
 8005da2:	fa02 f303 	lsl.w	r3, r2, r3
 8005da6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005da8:	4a2e      	ldr	r2, [pc, #184]	; (8005e64 <HAL_GPIO_DeInit+0x1c4>)
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	089b      	lsrs	r3, r3, #2
 8005dae:	3302      	adds	r3, #2
 8005db0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	43da      	mvns	r2, r3
 8005db8:	482a      	ldr	r0, [pc, #168]	; (8005e64 <HAL_GPIO_DeInit+0x1c4>)
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	089b      	lsrs	r3, r3, #2
 8005dbe:	400a      	ands	r2, r1
 8005dc0:	3302      	adds	r3, #2
 8005dc2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	005b      	lsls	r3, r3, #1
 8005dce:	2103      	movs	r1, #3
 8005dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd4:	43db      	mvns	r3, r3
 8005dd6:	401a      	ands	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	08da      	lsrs	r2, r3, #3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	3208      	adds	r2, #8
 8005de4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f003 0307 	and.w	r3, r3, #7
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	220f      	movs	r2, #15
 8005df2:	fa02 f303 	lsl.w	r3, r2, r3
 8005df6:	43db      	mvns	r3, r3
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	08d2      	lsrs	r2, r2, #3
 8005dfc:	4019      	ands	r1, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	3208      	adds	r2, #8
 8005e02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	005b      	lsls	r3, r3, #1
 8005e0e:	2103      	movs	r1, #3
 8005e10:	fa01 f303 	lsl.w	r3, r1, r3
 8005e14:	43db      	mvns	r3, r3
 8005e16:	401a      	ands	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	2101      	movs	r1, #1
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	fa01 f303 	lsl.w	r3, r1, r3
 8005e28:	43db      	mvns	r3, r3
 8005e2a:	401a      	ands	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689a      	ldr	r2, [r3, #8]
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	005b      	lsls	r3, r3, #1
 8005e38:	2103      	movs	r1, #3
 8005e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e3e:	43db      	mvns	r3, r3
 8005e40:	401a      	ands	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	617b      	str	r3, [r7, #20]
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	2b0f      	cmp	r3, #15
 8005e50:	f67f af34 	bls.w	8005cbc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005e54:	bf00      	nop
 8005e56:	bf00      	nop
 8005e58:	371c      	adds	r7, #28
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	40013800 	.word	0x40013800
 8005e68:	40020000 	.word	0x40020000
 8005e6c:	40020400 	.word	0x40020400
 8005e70:	40020800 	.word	0x40020800
 8005e74:	40020c00 	.word	0x40020c00
 8005e78:	40021000 	.word	0x40021000
 8005e7c:	40021400 	.word	0x40021400
 8005e80:	40021800 	.word	0x40021800
 8005e84:	40013c00 	.word	0x40013c00

08005e88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	460b      	mov	r3, r1
 8005e92:	807b      	strh	r3, [r7, #2]
 8005e94:	4613      	mov	r3, r2
 8005e96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e98:	787b      	ldrb	r3, [r7, #1]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d003      	beq.n	8005ea6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e9e:	887a      	ldrh	r2, [r7, #2]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005ea4:	e003      	b.n	8005eae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005ea6:	887b      	ldrh	r3, [r7, #2]
 8005ea8:	041a      	lsls	r2, r3, #16
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	619a      	str	r2, [r3, #24]
}
 8005eae:	bf00      	nop
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
	...

08005ebc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e0cc      	b.n	800606a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ed0:	4b68      	ldr	r3, [pc, #416]	; (8006074 <HAL_RCC_ClockConfig+0x1b8>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 030f 	and.w	r3, r3, #15
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d90c      	bls.n	8005ef8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ede:	4b65      	ldr	r3, [pc, #404]	; (8006074 <HAL_RCC_ClockConfig+0x1b8>)
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	b2d2      	uxtb	r2, r2
 8005ee4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ee6:	4b63      	ldr	r3, [pc, #396]	; (8006074 <HAL_RCC_ClockConfig+0x1b8>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 030f 	and.w	r3, r3, #15
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d001      	beq.n	8005ef8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e0b8      	b.n	800606a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d020      	beq.n	8005f46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0304 	and.w	r3, r3, #4
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d005      	beq.n	8005f1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f10:	4b59      	ldr	r3, [pc, #356]	; (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	4a58      	ldr	r2, [pc, #352]	; (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0308 	and.w	r3, r3, #8
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d005      	beq.n	8005f34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f28:	4b53      	ldr	r3, [pc, #332]	; (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	4a52      	ldr	r2, [pc, #328]	; (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f34:	4b50      	ldr	r3, [pc, #320]	; (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	494d      	ldr	r1, [pc, #308]	; (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d044      	beq.n	8005fdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d107      	bne.n	8005f6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f5a:	4b47      	ldr	r3, [pc, #284]	; (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d119      	bne.n	8005f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e07f      	b.n	800606a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d003      	beq.n	8005f7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f76:	2b03      	cmp	r3, #3
 8005f78:	d107      	bne.n	8005f8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f7a:	4b3f      	ldr	r3, [pc, #252]	; (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d109      	bne.n	8005f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e06f      	b.n	800606a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f8a:	4b3b      	ldr	r3, [pc, #236]	; (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e067      	b.n	800606a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f9a:	4b37      	ldr	r3, [pc, #220]	; (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f023 0203 	bic.w	r2, r3, #3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	4934      	ldr	r1, [pc, #208]	; (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fac:	f7fe ff34 	bl	8004e18 <HAL_GetTick>
 8005fb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fb2:	e00a      	b.n	8005fca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fb4:	f7fe ff30 	bl	8004e18 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e04f      	b.n	800606a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fca:	4b2b      	ldr	r3, [pc, #172]	; (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f003 020c 	and.w	r2, r3, #12
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d1eb      	bne.n	8005fb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fdc:	4b25      	ldr	r3, [pc, #148]	; (8006074 <HAL_RCC_ClockConfig+0x1b8>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 030f 	and.w	r3, r3, #15
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d20c      	bcs.n	8006004 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fea:	4b22      	ldr	r3, [pc, #136]	; (8006074 <HAL_RCC_ClockConfig+0x1b8>)
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	b2d2      	uxtb	r2, r2
 8005ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ff2:	4b20      	ldr	r3, [pc, #128]	; (8006074 <HAL_RCC_ClockConfig+0x1b8>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 030f 	and.w	r3, r3, #15
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d001      	beq.n	8006004 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e032      	b.n	800606a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b00      	cmp	r3, #0
 800600e:	d008      	beq.n	8006022 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006010:	4b19      	ldr	r3, [pc, #100]	; (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	4916      	ldr	r1, [pc, #88]	; (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 800601e:	4313      	orrs	r3, r2
 8006020:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0308 	and.w	r3, r3, #8
 800602a:	2b00      	cmp	r3, #0
 800602c:	d009      	beq.n	8006042 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800602e:	4b12      	ldr	r3, [pc, #72]	; (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	00db      	lsls	r3, r3, #3
 800603c:	490e      	ldr	r1, [pc, #56]	; (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 800603e:	4313      	orrs	r3, r2
 8006040:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006042:	f000 f855 	bl	80060f0 <HAL_RCC_GetSysClockFreq>
 8006046:	4602      	mov	r2, r0
 8006048:	4b0b      	ldr	r3, [pc, #44]	; (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	091b      	lsrs	r3, r3, #4
 800604e:	f003 030f 	and.w	r3, r3, #15
 8006052:	490a      	ldr	r1, [pc, #40]	; (800607c <HAL_RCC_ClockConfig+0x1c0>)
 8006054:	5ccb      	ldrb	r3, [r1, r3]
 8006056:	fa22 f303 	lsr.w	r3, r2, r3
 800605a:	4a09      	ldr	r2, [pc, #36]	; (8006080 <HAL_RCC_ClockConfig+0x1c4>)
 800605c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800605e:	4b09      	ldr	r3, [pc, #36]	; (8006084 <HAL_RCC_ClockConfig+0x1c8>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4618      	mov	r0, r3
 8006064:	f7fe fe94 	bl	8004d90 <HAL_InitTick>

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	40023c00 	.word	0x40023c00
 8006078:	40023800 	.word	0x40023800
 800607c:	08009890 	.word	0x08009890
 8006080:	20000000 	.word	0x20000000
 8006084:	20000004 	.word	0x20000004

08006088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006088:	b480      	push	{r7}
 800608a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800608c:	4b03      	ldr	r3, [pc, #12]	; (800609c <HAL_RCC_GetHCLKFreq+0x14>)
 800608e:	681b      	ldr	r3, [r3, #0]
}
 8006090:	4618      	mov	r0, r3
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	20000000 	.word	0x20000000

080060a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80060a4:	f7ff fff0 	bl	8006088 <HAL_RCC_GetHCLKFreq>
 80060a8:	4602      	mov	r2, r0
 80060aa:	4b05      	ldr	r3, [pc, #20]	; (80060c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	0a9b      	lsrs	r3, r3, #10
 80060b0:	f003 0307 	and.w	r3, r3, #7
 80060b4:	4903      	ldr	r1, [pc, #12]	; (80060c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060b6:	5ccb      	ldrb	r3, [r1, r3]
 80060b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060bc:	4618      	mov	r0, r3
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	40023800 	.word	0x40023800
 80060c4:	080098a0 	.word	0x080098a0

080060c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80060cc:	f7ff ffdc 	bl	8006088 <HAL_RCC_GetHCLKFreq>
 80060d0:	4602      	mov	r2, r0
 80060d2:	4b05      	ldr	r3, [pc, #20]	; (80060e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	0b5b      	lsrs	r3, r3, #13
 80060d8:	f003 0307 	and.w	r3, r3, #7
 80060dc:	4903      	ldr	r1, [pc, #12]	; (80060ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80060de:	5ccb      	ldrb	r3, [r1, r3]
 80060e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	40023800 	.word	0x40023800
 80060ec:	080098a0 	.word	0x080098a0

080060f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060f4:	b0ae      	sub	sp, #184	; 0xb8
 80060f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80060f8:	2300      	movs	r3, #0
 80060fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80060fe:	2300      	movs	r3, #0
 8006100:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8006104:	2300      	movs	r3, #0
 8006106:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800610a:	2300      	movs	r3, #0
 800610c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8006110:	2300      	movs	r3, #0
 8006112:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006116:	4bcb      	ldr	r3, [pc, #812]	; (8006444 <HAL_RCC_GetSysClockFreq+0x354>)
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f003 030c 	and.w	r3, r3, #12
 800611e:	2b0c      	cmp	r3, #12
 8006120:	f200 8206 	bhi.w	8006530 <HAL_RCC_GetSysClockFreq+0x440>
 8006124:	a201      	add	r2, pc, #4	; (adr r2, 800612c <HAL_RCC_GetSysClockFreq+0x3c>)
 8006126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612a:	bf00      	nop
 800612c:	08006161 	.word	0x08006161
 8006130:	08006531 	.word	0x08006531
 8006134:	08006531 	.word	0x08006531
 8006138:	08006531 	.word	0x08006531
 800613c:	08006169 	.word	0x08006169
 8006140:	08006531 	.word	0x08006531
 8006144:	08006531 	.word	0x08006531
 8006148:	08006531 	.word	0x08006531
 800614c:	08006171 	.word	0x08006171
 8006150:	08006531 	.word	0x08006531
 8006154:	08006531 	.word	0x08006531
 8006158:	08006531 	.word	0x08006531
 800615c:	08006361 	.word	0x08006361
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006160:	4bb9      	ldr	r3, [pc, #740]	; (8006448 <HAL_RCC_GetSysClockFreq+0x358>)
 8006162:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8006166:	e1e7      	b.n	8006538 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006168:	4bb8      	ldr	r3, [pc, #736]	; (800644c <HAL_RCC_GetSysClockFreq+0x35c>)
 800616a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800616e:	e1e3      	b.n	8006538 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006170:	4bb4      	ldr	r3, [pc, #720]	; (8006444 <HAL_RCC_GetSysClockFreq+0x354>)
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006178:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800617c:	4bb1      	ldr	r3, [pc, #708]	; (8006444 <HAL_RCC_GetSysClockFreq+0x354>)
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d071      	beq.n	800626c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006188:	4bae      	ldr	r3, [pc, #696]	; (8006444 <HAL_RCC_GetSysClockFreq+0x354>)
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	099b      	lsrs	r3, r3, #6
 800618e:	2200      	movs	r2, #0
 8006190:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006194:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006198:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800619c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80061a4:	2300      	movs	r3, #0
 80061a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80061aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80061ae:	4622      	mov	r2, r4
 80061b0:	462b      	mov	r3, r5
 80061b2:	f04f 0000 	mov.w	r0, #0
 80061b6:	f04f 0100 	mov.w	r1, #0
 80061ba:	0159      	lsls	r1, r3, #5
 80061bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061c0:	0150      	lsls	r0, r2, #5
 80061c2:	4602      	mov	r2, r0
 80061c4:	460b      	mov	r3, r1
 80061c6:	4621      	mov	r1, r4
 80061c8:	1a51      	subs	r1, r2, r1
 80061ca:	6439      	str	r1, [r7, #64]	; 0x40
 80061cc:	4629      	mov	r1, r5
 80061ce:	eb63 0301 	sbc.w	r3, r3, r1
 80061d2:	647b      	str	r3, [r7, #68]	; 0x44
 80061d4:	f04f 0200 	mov.w	r2, #0
 80061d8:	f04f 0300 	mov.w	r3, #0
 80061dc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80061e0:	4649      	mov	r1, r9
 80061e2:	018b      	lsls	r3, r1, #6
 80061e4:	4641      	mov	r1, r8
 80061e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80061ea:	4641      	mov	r1, r8
 80061ec:	018a      	lsls	r2, r1, #6
 80061ee:	4641      	mov	r1, r8
 80061f0:	1a51      	subs	r1, r2, r1
 80061f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80061f4:	4649      	mov	r1, r9
 80061f6:	eb63 0301 	sbc.w	r3, r3, r1
 80061fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061fc:	f04f 0200 	mov.w	r2, #0
 8006200:	f04f 0300 	mov.w	r3, #0
 8006204:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8006208:	4649      	mov	r1, r9
 800620a:	00cb      	lsls	r3, r1, #3
 800620c:	4641      	mov	r1, r8
 800620e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006212:	4641      	mov	r1, r8
 8006214:	00ca      	lsls	r2, r1, #3
 8006216:	4610      	mov	r0, r2
 8006218:	4619      	mov	r1, r3
 800621a:	4603      	mov	r3, r0
 800621c:	4622      	mov	r2, r4
 800621e:	189b      	adds	r3, r3, r2
 8006220:	633b      	str	r3, [r7, #48]	; 0x30
 8006222:	462b      	mov	r3, r5
 8006224:	460a      	mov	r2, r1
 8006226:	eb42 0303 	adc.w	r3, r2, r3
 800622a:	637b      	str	r3, [r7, #52]	; 0x34
 800622c:	f04f 0200 	mov.w	r2, #0
 8006230:	f04f 0300 	mov.w	r3, #0
 8006234:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006238:	4629      	mov	r1, r5
 800623a:	024b      	lsls	r3, r1, #9
 800623c:	4621      	mov	r1, r4
 800623e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006242:	4621      	mov	r1, r4
 8006244:	024a      	lsls	r2, r1, #9
 8006246:	4610      	mov	r0, r2
 8006248:	4619      	mov	r1, r3
 800624a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800624e:	2200      	movs	r2, #0
 8006250:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006254:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006258:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800625c:	f7fa fc52 	bl	8000b04 <__aeabi_uldivmod>
 8006260:	4602      	mov	r2, r0
 8006262:	460b      	mov	r3, r1
 8006264:	4613      	mov	r3, r2
 8006266:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800626a:	e067      	b.n	800633c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800626c:	4b75      	ldr	r3, [pc, #468]	; (8006444 <HAL_RCC_GetSysClockFreq+0x354>)
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	099b      	lsrs	r3, r3, #6
 8006272:	2200      	movs	r2, #0
 8006274:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006278:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800627c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006284:	67bb      	str	r3, [r7, #120]	; 0x78
 8006286:	2300      	movs	r3, #0
 8006288:	67fb      	str	r3, [r7, #124]	; 0x7c
 800628a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800628e:	4622      	mov	r2, r4
 8006290:	462b      	mov	r3, r5
 8006292:	f04f 0000 	mov.w	r0, #0
 8006296:	f04f 0100 	mov.w	r1, #0
 800629a:	0159      	lsls	r1, r3, #5
 800629c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062a0:	0150      	lsls	r0, r2, #5
 80062a2:	4602      	mov	r2, r0
 80062a4:	460b      	mov	r3, r1
 80062a6:	4621      	mov	r1, r4
 80062a8:	1a51      	subs	r1, r2, r1
 80062aa:	62b9      	str	r1, [r7, #40]	; 0x28
 80062ac:	4629      	mov	r1, r5
 80062ae:	eb63 0301 	sbc.w	r3, r3, r1
 80062b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062b4:	f04f 0200 	mov.w	r2, #0
 80062b8:	f04f 0300 	mov.w	r3, #0
 80062bc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80062c0:	4649      	mov	r1, r9
 80062c2:	018b      	lsls	r3, r1, #6
 80062c4:	4641      	mov	r1, r8
 80062c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80062ca:	4641      	mov	r1, r8
 80062cc:	018a      	lsls	r2, r1, #6
 80062ce:	4641      	mov	r1, r8
 80062d0:	ebb2 0a01 	subs.w	sl, r2, r1
 80062d4:	4649      	mov	r1, r9
 80062d6:	eb63 0b01 	sbc.w	fp, r3, r1
 80062da:	f04f 0200 	mov.w	r2, #0
 80062de:	f04f 0300 	mov.w	r3, #0
 80062e2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80062e6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80062ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062ee:	4692      	mov	sl, r2
 80062f0:	469b      	mov	fp, r3
 80062f2:	4623      	mov	r3, r4
 80062f4:	eb1a 0303 	adds.w	r3, sl, r3
 80062f8:	623b      	str	r3, [r7, #32]
 80062fa:	462b      	mov	r3, r5
 80062fc:	eb4b 0303 	adc.w	r3, fp, r3
 8006300:	627b      	str	r3, [r7, #36]	; 0x24
 8006302:	f04f 0200 	mov.w	r2, #0
 8006306:	f04f 0300 	mov.w	r3, #0
 800630a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800630e:	4629      	mov	r1, r5
 8006310:	028b      	lsls	r3, r1, #10
 8006312:	4621      	mov	r1, r4
 8006314:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006318:	4621      	mov	r1, r4
 800631a:	028a      	lsls	r2, r1, #10
 800631c:	4610      	mov	r0, r2
 800631e:	4619      	mov	r1, r3
 8006320:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006324:	2200      	movs	r2, #0
 8006326:	673b      	str	r3, [r7, #112]	; 0x70
 8006328:	677a      	str	r2, [r7, #116]	; 0x74
 800632a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800632e:	f7fa fbe9 	bl	8000b04 <__aeabi_uldivmod>
 8006332:	4602      	mov	r2, r0
 8006334:	460b      	mov	r3, r1
 8006336:	4613      	mov	r3, r2
 8006338:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800633c:	4b41      	ldr	r3, [pc, #260]	; (8006444 <HAL_RCC_GetSysClockFreq+0x354>)
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	0c1b      	lsrs	r3, r3, #16
 8006342:	f003 0303 	and.w	r3, r3, #3
 8006346:	3301      	adds	r3, #1
 8006348:	005b      	lsls	r3, r3, #1
 800634a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800634e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006352:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006356:	fbb2 f3f3 	udiv	r3, r2, r3
 800635a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800635e:	e0eb      	b.n	8006538 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006360:	4b38      	ldr	r3, [pc, #224]	; (8006444 <HAL_RCC_GetSysClockFreq+0x354>)
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006368:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800636c:	4b35      	ldr	r3, [pc, #212]	; (8006444 <HAL_RCC_GetSysClockFreq+0x354>)
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d06b      	beq.n	8006450 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006378:	4b32      	ldr	r3, [pc, #200]	; (8006444 <HAL_RCC_GetSysClockFreq+0x354>)
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	099b      	lsrs	r3, r3, #6
 800637e:	2200      	movs	r2, #0
 8006380:	66bb      	str	r3, [r7, #104]	; 0x68
 8006382:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006384:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800638a:	663b      	str	r3, [r7, #96]	; 0x60
 800638c:	2300      	movs	r3, #0
 800638e:	667b      	str	r3, [r7, #100]	; 0x64
 8006390:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006394:	4622      	mov	r2, r4
 8006396:	462b      	mov	r3, r5
 8006398:	f04f 0000 	mov.w	r0, #0
 800639c:	f04f 0100 	mov.w	r1, #0
 80063a0:	0159      	lsls	r1, r3, #5
 80063a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063a6:	0150      	lsls	r0, r2, #5
 80063a8:	4602      	mov	r2, r0
 80063aa:	460b      	mov	r3, r1
 80063ac:	4621      	mov	r1, r4
 80063ae:	1a51      	subs	r1, r2, r1
 80063b0:	61b9      	str	r1, [r7, #24]
 80063b2:	4629      	mov	r1, r5
 80063b4:	eb63 0301 	sbc.w	r3, r3, r1
 80063b8:	61fb      	str	r3, [r7, #28]
 80063ba:	f04f 0200 	mov.w	r2, #0
 80063be:	f04f 0300 	mov.w	r3, #0
 80063c2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80063c6:	4659      	mov	r1, fp
 80063c8:	018b      	lsls	r3, r1, #6
 80063ca:	4651      	mov	r1, sl
 80063cc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80063d0:	4651      	mov	r1, sl
 80063d2:	018a      	lsls	r2, r1, #6
 80063d4:	4651      	mov	r1, sl
 80063d6:	ebb2 0801 	subs.w	r8, r2, r1
 80063da:	4659      	mov	r1, fp
 80063dc:	eb63 0901 	sbc.w	r9, r3, r1
 80063e0:	f04f 0200 	mov.w	r2, #0
 80063e4:	f04f 0300 	mov.w	r3, #0
 80063e8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063ec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063f0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063f4:	4690      	mov	r8, r2
 80063f6:	4699      	mov	r9, r3
 80063f8:	4623      	mov	r3, r4
 80063fa:	eb18 0303 	adds.w	r3, r8, r3
 80063fe:	613b      	str	r3, [r7, #16]
 8006400:	462b      	mov	r3, r5
 8006402:	eb49 0303 	adc.w	r3, r9, r3
 8006406:	617b      	str	r3, [r7, #20]
 8006408:	f04f 0200 	mov.w	r2, #0
 800640c:	f04f 0300 	mov.w	r3, #0
 8006410:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006414:	4629      	mov	r1, r5
 8006416:	024b      	lsls	r3, r1, #9
 8006418:	4621      	mov	r1, r4
 800641a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800641e:	4621      	mov	r1, r4
 8006420:	024a      	lsls	r2, r1, #9
 8006422:	4610      	mov	r0, r2
 8006424:	4619      	mov	r1, r3
 8006426:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800642a:	2200      	movs	r2, #0
 800642c:	65bb      	str	r3, [r7, #88]	; 0x58
 800642e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006430:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006434:	f7fa fb66 	bl	8000b04 <__aeabi_uldivmod>
 8006438:	4602      	mov	r2, r0
 800643a:	460b      	mov	r3, r1
 800643c:	4613      	mov	r3, r2
 800643e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006442:	e065      	b.n	8006510 <HAL_RCC_GetSysClockFreq+0x420>
 8006444:	40023800 	.word	0x40023800
 8006448:	00f42400 	.word	0x00f42400
 800644c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006450:	4b3d      	ldr	r3, [pc, #244]	; (8006548 <HAL_RCC_GetSysClockFreq+0x458>)
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	099b      	lsrs	r3, r3, #6
 8006456:	2200      	movs	r2, #0
 8006458:	4618      	mov	r0, r3
 800645a:	4611      	mov	r1, r2
 800645c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006460:	653b      	str	r3, [r7, #80]	; 0x50
 8006462:	2300      	movs	r3, #0
 8006464:	657b      	str	r3, [r7, #84]	; 0x54
 8006466:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800646a:	4642      	mov	r2, r8
 800646c:	464b      	mov	r3, r9
 800646e:	f04f 0000 	mov.w	r0, #0
 8006472:	f04f 0100 	mov.w	r1, #0
 8006476:	0159      	lsls	r1, r3, #5
 8006478:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800647c:	0150      	lsls	r0, r2, #5
 800647e:	4602      	mov	r2, r0
 8006480:	460b      	mov	r3, r1
 8006482:	4641      	mov	r1, r8
 8006484:	1a51      	subs	r1, r2, r1
 8006486:	60b9      	str	r1, [r7, #8]
 8006488:	4649      	mov	r1, r9
 800648a:	eb63 0301 	sbc.w	r3, r3, r1
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	f04f 0200 	mov.w	r2, #0
 8006494:	f04f 0300 	mov.w	r3, #0
 8006498:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800649c:	4659      	mov	r1, fp
 800649e:	018b      	lsls	r3, r1, #6
 80064a0:	4651      	mov	r1, sl
 80064a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80064a6:	4651      	mov	r1, sl
 80064a8:	018a      	lsls	r2, r1, #6
 80064aa:	4651      	mov	r1, sl
 80064ac:	1a54      	subs	r4, r2, r1
 80064ae:	4659      	mov	r1, fp
 80064b0:	eb63 0501 	sbc.w	r5, r3, r1
 80064b4:	f04f 0200 	mov.w	r2, #0
 80064b8:	f04f 0300 	mov.w	r3, #0
 80064bc:	00eb      	lsls	r3, r5, #3
 80064be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064c2:	00e2      	lsls	r2, r4, #3
 80064c4:	4614      	mov	r4, r2
 80064c6:	461d      	mov	r5, r3
 80064c8:	4643      	mov	r3, r8
 80064ca:	18e3      	adds	r3, r4, r3
 80064cc:	603b      	str	r3, [r7, #0]
 80064ce:	464b      	mov	r3, r9
 80064d0:	eb45 0303 	adc.w	r3, r5, r3
 80064d4:	607b      	str	r3, [r7, #4]
 80064d6:	f04f 0200 	mov.w	r2, #0
 80064da:	f04f 0300 	mov.w	r3, #0
 80064de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80064e2:	4629      	mov	r1, r5
 80064e4:	028b      	lsls	r3, r1, #10
 80064e6:	4621      	mov	r1, r4
 80064e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80064ec:	4621      	mov	r1, r4
 80064ee:	028a      	lsls	r2, r1, #10
 80064f0:	4610      	mov	r0, r2
 80064f2:	4619      	mov	r1, r3
 80064f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064f8:	2200      	movs	r2, #0
 80064fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80064fc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80064fe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006502:	f7fa faff 	bl	8000b04 <__aeabi_uldivmod>
 8006506:	4602      	mov	r2, r0
 8006508:	460b      	mov	r3, r1
 800650a:	4613      	mov	r3, r2
 800650c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006510:	4b0d      	ldr	r3, [pc, #52]	; (8006548 <HAL_RCC_GetSysClockFreq+0x458>)
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	0f1b      	lsrs	r3, r3, #28
 8006516:	f003 0307 	and.w	r3, r3, #7
 800651a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800651e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006522:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006526:	fbb2 f3f3 	udiv	r3, r2, r3
 800652a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800652e:	e003      	b.n	8006538 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006530:	4b06      	ldr	r3, [pc, #24]	; (800654c <HAL_RCC_GetSysClockFreq+0x45c>)
 8006532:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006536:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006538:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800653c:	4618      	mov	r0, r3
 800653e:	37b8      	adds	r7, #184	; 0xb8
 8006540:	46bd      	mov	sp, r7
 8006542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006546:	bf00      	nop
 8006548:	40023800 	.word	0x40023800
 800654c:	00f42400 	.word	0x00f42400

08006550 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e28d      	b.n	8006a7e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	f000 8083 	beq.w	8006676 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006570:	4b94      	ldr	r3, [pc, #592]	; (80067c4 <HAL_RCC_OscConfig+0x274>)
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f003 030c 	and.w	r3, r3, #12
 8006578:	2b04      	cmp	r3, #4
 800657a:	d019      	beq.n	80065b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800657c:	4b91      	ldr	r3, [pc, #580]	; (80067c4 <HAL_RCC_OscConfig+0x274>)
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006584:	2b08      	cmp	r3, #8
 8006586:	d106      	bne.n	8006596 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006588:	4b8e      	ldr	r3, [pc, #568]	; (80067c4 <HAL_RCC_OscConfig+0x274>)
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006590:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006594:	d00c      	beq.n	80065b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006596:	4b8b      	ldr	r3, [pc, #556]	; (80067c4 <HAL_RCC_OscConfig+0x274>)
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800659e:	2b0c      	cmp	r3, #12
 80065a0:	d112      	bne.n	80065c8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065a2:	4b88      	ldr	r3, [pc, #544]	; (80067c4 <HAL_RCC_OscConfig+0x274>)
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065ae:	d10b      	bne.n	80065c8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065b0:	4b84      	ldr	r3, [pc, #528]	; (80067c4 <HAL_RCC_OscConfig+0x274>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d05b      	beq.n	8006674 <HAL_RCC_OscConfig+0x124>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d157      	bne.n	8006674 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e25a      	b.n	8006a7e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065d0:	d106      	bne.n	80065e0 <HAL_RCC_OscConfig+0x90>
 80065d2:	4b7c      	ldr	r3, [pc, #496]	; (80067c4 <HAL_RCC_OscConfig+0x274>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a7b      	ldr	r2, [pc, #492]	; (80067c4 <HAL_RCC_OscConfig+0x274>)
 80065d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065dc:	6013      	str	r3, [r2, #0]
 80065de:	e01d      	b.n	800661c <HAL_RCC_OscConfig+0xcc>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065e8:	d10c      	bne.n	8006604 <HAL_RCC_OscConfig+0xb4>
 80065ea:	4b76      	ldr	r3, [pc, #472]	; (80067c4 <HAL_RCC_OscConfig+0x274>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a75      	ldr	r2, [pc, #468]	; (80067c4 <HAL_RCC_OscConfig+0x274>)
 80065f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065f4:	6013      	str	r3, [r2, #0]
 80065f6:	4b73      	ldr	r3, [pc, #460]	; (80067c4 <HAL_RCC_OscConfig+0x274>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a72      	ldr	r2, [pc, #456]	; (80067c4 <HAL_RCC_OscConfig+0x274>)
 80065fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006600:	6013      	str	r3, [r2, #0]
 8006602:	e00b      	b.n	800661c <HAL_RCC_OscConfig+0xcc>
 8006604:	4b6f      	ldr	r3, [pc, #444]	; (80067c4 <HAL_RCC_OscConfig+0x274>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a6e      	ldr	r2, [pc, #440]	; (80067c4 <HAL_RCC_OscConfig+0x274>)
 800660a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800660e:	6013      	str	r3, [r2, #0]
 8006610:	4b6c      	ldr	r3, [pc, #432]	; (80067c4 <HAL_RCC_OscConfig+0x274>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a6b      	ldr	r2, [pc, #428]	; (80067c4 <HAL_RCC_OscConfig+0x274>)
 8006616:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800661a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d013      	beq.n	800664c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006624:	f7fe fbf8 	bl	8004e18 <HAL_GetTick>
 8006628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800662a:	e008      	b.n	800663e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800662c:	f7fe fbf4 	bl	8004e18 <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	2b64      	cmp	r3, #100	; 0x64
 8006638:	d901      	bls.n	800663e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e21f      	b.n	8006a7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800663e:	4b61      	ldr	r3, [pc, #388]	; (80067c4 <HAL_RCC_OscConfig+0x274>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d0f0      	beq.n	800662c <HAL_RCC_OscConfig+0xdc>
 800664a:	e014      	b.n	8006676 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800664c:	f7fe fbe4 	bl	8004e18 <HAL_GetTick>
 8006650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006652:	e008      	b.n	8006666 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006654:	f7fe fbe0 	bl	8004e18 <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	2b64      	cmp	r3, #100	; 0x64
 8006660:	d901      	bls.n	8006666 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e20b      	b.n	8006a7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006666:	4b57      	ldr	r3, [pc, #348]	; (80067c4 <HAL_RCC_OscConfig+0x274>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1f0      	bne.n	8006654 <HAL_RCC_OscConfig+0x104>
 8006672:	e000      	b.n	8006676 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0302 	and.w	r3, r3, #2
 800667e:	2b00      	cmp	r3, #0
 8006680:	d06f      	beq.n	8006762 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006682:	4b50      	ldr	r3, [pc, #320]	; (80067c4 <HAL_RCC_OscConfig+0x274>)
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f003 030c 	and.w	r3, r3, #12
 800668a:	2b00      	cmp	r3, #0
 800668c:	d017      	beq.n	80066be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800668e:	4b4d      	ldr	r3, [pc, #308]	; (80067c4 <HAL_RCC_OscConfig+0x274>)
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006696:	2b08      	cmp	r3, #8
 8006698:	d105      	bne.n	80066a6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800669a:	4b4a      	ldr	r3, [pc, #296]	; (80067c4 <HAL_RCC_OscConfig+0x274>)
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00b      	beq.n	80066be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066a6:	4b47      	ldr	r3, [pc, #284]	; (80067c4 <HAL_RCC_OscConfig+0x274>)
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80066ae:	2b0c      	cmp	r3, #12
 80066b0:	d11c      	bne.n	80066ec <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066b2:	4b44      	ldr	r3, [pc, #272]	; (80067c4 <HAL_RCC_OscConfig+0x274>)
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d116      	bne.n	80066ec <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066be:	4b41      	ldr	r3, [pc, #260]	; (80067c4 <HAL_RCC_OscConfig+0x274>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d005      	beq.n	80066d6 <HAL_RCC_OscConfig+0x186>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d001      	beq.n	80066d6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e1d3      	b.n	8006a7e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066d6:	4b3b      	ldr	r3, [pc, #236]	; (80067c4 <HAL_RCC_OscConfig+0x274>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	00db      	lsls	r3, r3, #3
 80066e4:	4937      	ldr	r1, [pc, #220]	; (80067c4 <HAL_RCC_OscConfig+0x274>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066ea:	e03a      	b.n	8006762 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d020      	beq.n	8006736 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066f4:	4b34      	ldr	r3, [pc, #208]	; (80067c8 <HAL_RCC_OscConfig+0x278>)
 80066f6:	2201      	movs	r2, #1
 80066f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066fa:	f7fe fb8d 	bl	8004e18 <HAL_GetTick>
 80066fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006700:	e008      	b.n	8006714 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006702:	f7fe fb89 	bl	8004e18 <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	2b02      	cmp	r3, #2
 800670e:	d901      	bls.n	8006714 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e1b4      	b.n	8006a7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006714:	4b2b      	ldr	r3, [pc, #172]	; (80067c4 <HAL_RCC_OscConfig+0x274>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0302 	and.w	r3, r3, #2
 800671c:	2b00      	cmp	r3, #0
 800671e:	d0f0      	beq.n	8006702 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006720:	4b28      	ldr	r3, [pc, #160]	; (80067c4 <HAL_RCC_OscConfig+0x274>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	00db      	lsls	r3, r3, #3
 800672e:	4925      	ldr	r1, [pc, #148]	; (80067c4 <HAL_RCC_OscConfig+0x274>)
 8006730:	4313      	orrs	r3, r2
 8006732:	600b      	str	r3, [r1, #0]
 8006734:	e015      	b.n	8006762 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006736:	4b24      	ldr	r3, [pc, #144]	; (80067c8 <HAL_RCC_OscConfig+0x278>)
 8006738:	2200      	movs	r2, #0
 800673a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800673c:	f7fe fb6c 	bl	8004e18 <HAL_GetTick>
 8006740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006742:	e008      	b.n	8006756 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006744:	f7fe fb68 	bl	8004e18 <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	2b02      	cmp	r3, #2
 8006750:	d901      	bls.n	8006756 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e193      	b.n	8006a7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006756:	4b1b      	ldr	r3, [pc, #108]	; (80067c4 <HAL_RCC_OscConfig+0x274>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0302 	and.w	r3, r3, #2
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1f0      	bne.n	8006744 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0308 	and.w	r3, r3, #8
 800676a:	2b00      	cmp	r3, #0
 800676c:	d036      	beq.n	80067dc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d016      	beq.n	80067a4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006776:	4b15      	ldr	r3, [pc, #84]	; (80067cc <HAL_RCC_OscConfig+0x27c>)
 8006778:	2201      	movs	r2, #1
 800677a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800677c:	f7fe fb4c 	bl	8004e18 <HAL_GetTick>
 8006780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006782:	e008      	b.n	8006796 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006784:	f7fe fb48 	bl	8004e18 <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	2b02      	cmp	r3, #2
 8006790:	d901      	bls.n	8006796 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e173      	b.n	8006a7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006796:	4b0b      	ldr	r3, [pc, #44]	; (80067c4 <HAL_RCC_OscConfig+0x274>)
 8006798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800679a:	f003 0302 	and.w	r3, r3, #2
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d0f0      	beq.n	8006784 <HAL_RCC_OscConfig+0x234>
 80067a2:	e01b      	b.n	80067dc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067a4:	4b09      	ldr	r3, [pc, #36]	; (80067cc <HAL_RCC_OscConfig+0x27c>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067aa:	f7fe fb35 	bl	8004e18 <HAL_GetTick>
 80067ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067b0:	e00e      	b.n	80067d0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067b2:	f7fe fb31 	bl	8004e18 <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d907      	bls.n	80067d0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e15c      	b.n	8006a7e <HAL_RCC_OscConfig+0x52e>
 80067c4:	40023800 	.word	0x40023800
 80067c8:	42470000 	.word	0x42470000
 80067cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067d0:	4b8a      	ldr	r3, [pc, #552]	; (80069fc <HAL_RCC_OscConfig+0x4ac>)
 80067d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067d4:	f003 0302 	and.w	r3, r3, #2
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1ea      	bne.n	80067b2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0304 	and.w	r3, r3, #4
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f000 8097 	beq.w	8006918 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067ea:	2300      	movs	r3, #0
 80067ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067ee:	4b83      	ldr	r3, [pc, #524]	; (80069fc <HAL_RCC_OscConfig+0x4ac>)
 80067f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10f      	bne.n	800681a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067fa:	2300      	movs	r3, #0
 80067fc:	60bb      	str	r3, [r7, #8]
 80067fe:	4b7f      	ldr	r3, [pc, #508]	; (80069fc <HAL_RCC_OscConfig+0x4ac>)
 8006800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006802:	4a7e      	ldr	r2, [pc, #504]	; (80069fc <HAL_RCC_OscConfig+0x4ac>)
 8006804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006808:	6413      	str	r3, [r2, #64]	; 0x40
 800680a:	4b7c      	ldr	r3, [pc, #496]	; (80069fc <HAL_RCC_OscConfig+0x4ac>)
 800680c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006812:	60bb      	str	r3, [r7, #8]
 8006814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006816:	2301      	movs	r3, #1
 8006818:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800681a:	4b79      	ldr	r3, [pc, #484]	; (8006a00 <HAL_RCC_OscConfig+0x4b0>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006822:	2b00      	cmp	r3, #0
 8006824:	d118      	bne.n	8006858 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006826:	4b76      	ldr	r3, [pc, #472]	; (8006a00 <HAL_RCC_OscConfig+0x4b0>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a75      	ldr	r2, [pc, #468]	; (8006a00 <HAL_RCC_OscConfig+0x4b0>)
 800682c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006832:	f7fe faf1 	bl	8004e18 <HAL_GetTick>
 8006836:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006838:	e008      	b.n	800684c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800683a:	f7fe faed 	bl	8004e18 <HAL_GetTick>
 800683e:	4602      	mov	r2, r0
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	2b02      	cmp	r3, #2
 8006846:	d901      	bls.n	800684c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e118      	b.n	8006a7e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800684c:	4b6c      	ldr	r3, [pc, #432]	; (8006a00 <HAL_RCC_OscConfig+0x4b0>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006854:	2b00      	cmp	r3, #0
 8006856:	d0f0      	beq.n	800683a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d106      	bne.n	800686e <HAL_RCC_OscConfig+0x31e>
 8006860:	4b66      	ldr	r3, [pc, #408]	; (80069fc <HAL_RCC_OscConfig+0x4ac>)
 8006862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006864:	4a65      	ldr	r2, [pc, #404]	; (80069fc <HAL_RCC_OscConfig+0x4ac>)
 8006866:	f043 0301 	orr.w	r3, r3, #1
 800686a:	6713      	str	r3, [r2, #112]	; 0x70
 800686c:	e01c      	b.n	80068a8 <HAL_RCC_OscConfig+0x358>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	2b05      	cmp	r3, #5
 8006874:	d10c      	bne.n	8006890 <HAL_RCC_OscConfig+0x340>
 8006876:	4b61      	ldr	r3, [pc, #388]	; (80069fc <HAL_RCC_OscConfig+0x4ac>)
 8006878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800687a:	4a60      	ldr	r2, [pc, #384]	; (80069fc <HAL_RCC_OscConfig+0x4ac>)
 800687c:	f043 0304 	orr.w	r3, r3, #4
 8006880:	6713      	str	r3, [r2, #112]	; 0x70
 8006882:	4b5e      	ldr	r3, [pc, #376]	; (80069fc <HAL_RCC_OscConfig+0x4ac>)
 8006884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006886:	4a5d      	ldr	r2, [pc, #372]	; (80069fc <HAL_RCC_OscConfig+0x4ac>)
 8006888:	f043 0301 	orr.w	r3, r3, #1
 800688c:	6713      	str	r3, [r2, #112]	; 0x70
 800688e:	e00b      	b.n	80068a8 <HAL_RCC_OscConfig+0x358>
 8006890:	4b5a      	ldr	r3, [pc, #360]	; (80069fc <HAL_RCC_OscConfig+0x4ac>)
 8006892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006894:	4a59      	ldr	r2, [pc, #356]	; (80069fc <HAL_RCC_OscConfig+0x4ac>)
 8006896:	f023 0301 	bic.w	r3, r3, #1
 800689a:	6713      	str	r3, [r2, #112]	; 0x70
 800689c:	4b57      	ldr	r3, [pc, #348]	; (80069fc <HAL_RCC_OscConfig+0x4ac>)
 800689e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a0:	4a56      	ldr	r2, [pc, #344]	; (80069fc <HAL_RCC_OscConfig+0x4ac>)
 80068a2:	f023 0304 	bic.w	r3, r3, #4
 80068a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d015      	beq.n	80068dc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068b0:	f7fe fab2 	bl	8004e18 <HAL_GetTick>
 80068b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068b6:	e00a      	b.n	80068ce <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068b8:	f7fe faae 	bl	8004e18 <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d901      	bls.n	80068ce <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e0d7      	b.n	8006a7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068ce:	4b4b      	ldr	r3, [pc, #300]	; (80069fc <HAL_RCC_OscConfig+0x4ac>)
 80068d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068d2:	f003 0302 	and.w	r3, r3, #2
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d0ee      	beq.n	80068b8 <HAL_RCC_OscConfig+0x368>
 80068da:	e014      	b.n	8006906 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068dc:	f7fe fa9c 	bl	8004e18 <HAL_GetTick>
 80068e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068e2:	e00a      	b.n	80068fa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068e4:	f7fe fa98 	bl	8004e18 <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d901      	bls.n	80068fa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e0c1      	b.n	8006a7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068fa:	4b40      	ldr	r3, [pc, #256]	; (80069fc <HAL_RCC_OscConfig+0x4ac>)
 80068fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1ee      	bne.n	80068e4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006906:	7dfb      	ldrb	r3, [r7, #23]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d105      	bne.n	8006918 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800690c:	4b3b      	ldr	r3, [pc, #236]	; (80069fc <HAL_RCC_OscConfig+0x4ac>)
 800690e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006910:	4a3a      	ldr	r2, [pc, #232]	; (80069fc <HAL_RCC_OscConfig+0x4ac>)
 8006912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006916:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 80ad 	beq.w	8006a7c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006922:	4b36      	ldr	r3, [pc, #216]	; (80069fc <HAL_RCC_OscConfig+0x4ac>)
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f003 030c 	and.w	r3, r3, #12
 800692a:	2b08      	cmp	r3, #8
 800692c:	d060      	beq.n	80069f0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	2b02      	cmp	r3, #2
 8006934:	d145      	bne.n	80069c2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006936:	4b33      	ldr	r3, [pc, #204]	; (8006a04 <HAL_RCC_OscConfig+0x4b4>)
 8006938:	2200      	movs	r2, #0
 800693a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800693c:	f7fe fa6c 	bl	8004e18 <HAL_GetTick>
 8006940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006942:	e008      	b.n	8006956 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006944:	f7fe fa68 	bl	8004e18 <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	2b02      	cmp	r3, #2
 8006950:	d901      	bls.n	8006956 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e093      	b.n	8006a7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006956:	4b29      	ldr	r3, [pc, #164]	; (80069fc <HAL_RCC_OscConfig+0x4ac>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1f0      	bne.n	8006944 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	69da      	ldr	r2, [r3, #28]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	431a      	orrs	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006970:	019b      	lsls	r3, r3, #6
 8006972:	431a      	orrs	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006978:	085b      	lsrs	r3, r3, #1
 800697a:	3b01      	subs	r3, #1
 800697c:	041b      	lsls	r3, r3, #16
 800697e:	431a      	orrs	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006984:	061b      	lsls	r3, r3, #24
 8006986:	431a      	orrs	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698c:	071b      	lsls	r3, r3, #28
 800698e:	491b      	ldr	r1, [pc, #108]	; (80069fc <HAL_RCC_OscConfig+0x4ac>)
 8006990:	4313      	orrs	r3, r2
 8006992:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006994:	4b1b      	ldr	r3, [pc, #108]	; (8006a04 <HAL_RCC_OscConfig+0x4b4>)
 8006996:	2201      	movs	r2, #1
 8006998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800699a:	f7fe fa3d 	bl	8004e18 <HAL_GetTick>
 800699e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069a0:	e008      	b.n	80069b4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069a2:	f7fe fa39 	bl	8004e18 <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d901      	bls.n	80069b4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e064      	b.n	8006a7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069b4:	4b11      	ldr	r3, [pc, #68]	; (80069fc <HAL_RCC_OscConfig+0x4ac>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d0f0      	beq.n	80069a2 <HAL_RCC_OscConfig+0x452>
 80069c0:	e05c      	b.n	8006a7c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069c2:	4b10      	ldr	r3, [pc, #64]	; (8006a04 <HAL_RCC_OscConfig+0x4b4>)
 80069c4:	2200      	movs	r2, #0
 80069c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c8:	f7fe fa26 	bl	8004e18 <HAL_GetTick>
 80069cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069ce:	e008      	b.n	80069e2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069d0:	f7fe fa22 	bl	8004e18 <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d901      	bls.n	80069e2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e04d      	b.n	8006a7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069e2:	4b06      	ldr	r3, [pc, #24]	; (80069fc <HAL_RCC_OscConfig+0x4ac>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1f0      	bne.n	80069d0 <HAL_RCC_OscConfig+0x480>
 80069ee:	e045      	b.n	8006a7c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d107      	bne.n	8006a08 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e040      	b.n	8006a7e <HAL_RCC_OscConfig+0x52e>
 80069fc:	40023800 	.word	0x40023800
 8006a00:	40007000 	.word	0x40007000
 8006a04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a08:	4b1f      	ldr	r3, [pc, #124]	; (8006a88 <HAL_RCC_OscConfig+0x538>)
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d030      	beq.n	8006a78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d129      	bne.n	8006a78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d122      	bne.n	8006a78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006a38:	4013      	ands	r3, r2
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006a3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d119      	bne.n	8006a78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4e:	085b      	lsrs	r3, r3, #1
 8006a50:	3b01      	subs	r3, #1
 8006a52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d10f      	bne.n	8006a78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d107      	bne.n	8006a78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a72:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d001      	beq.n	8006a7c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e000      	b.n	8006a7e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3718      	adds	r7, #24
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	40023800 	.word	0x40023800

08006a8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e041      	b.n	8006b22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d106      	bne.n	8006ab8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7fd ff50 	bl	8004958 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2202      	movs	r2, #2
 8006abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	3304      	adds	r3, #4
 8006ac8:	4619      	mov	r1, r3
 8006aca:	4610      	mov	r0, r2
 8006acc:	f000 fda4 	bl	8007618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
	...

08006b2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d001      	beq.n	8006b44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e04e      	b.n	8006be2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2202      	movs	r2, #2
 8006b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68da      	ldr	r2, [r3, #12]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f042 0201 	orr.w	r2, r2, #1
 8006b5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a23      	ldr	r2, [pc, #140]	; (8006bf0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d022      	beq.n	8006bac <HAL_TIM_Base_Start_IT+0x80>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b6e:	d01d      	beq.n	8006bac <HAL_TIM_Base_Start_IT+0x80>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a1f      	ldr	r2, [pc, #124]	; (8006bf4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d018      	beq.n	8006bac <HAL_TIM_Base_Start_IT+0x80>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a1e      	ldr	r2, [pc, #120]	; (8006bf8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d013      	beq.n	8006bac <HAL_TIM_Base_Start_IT+0x80>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a1c      	ldr	r2, [pc, #112]	; (8006bfc <HAL_TIM_Base_Start_IT+0xd0>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d00e      	beq.n	8006bac <HAL_TIM_Base_Start_IT+0x80>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a1b      	ldr	r2, [pc, #108]	; (8006c00 <HAL_TIM_Base_Start_IT+0xd4>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d009      	beq.n	8006bac <HAL_TIM_Base_Start_IT+0x80>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a19      	ldr	r2, [pc, #100]	; (8006c04 <HAL_TIM_Base_Start_IT+0xd8>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d004      	beq.n	8006bac <HAL_TIM_Base_Start_IT+0x80>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a18      	ldr	r2, [pc, #96]	; (8006c08 <HAL_TIM_Base_Start_IT+0xdc>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d111      	bne.n	8006bd0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f003 0307 	and.w	r3, r3, #7
 8006bb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2b06      	cmp	r3, #6
 8006bbc:	d010      	beq.n	8006be0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f042 0201 	orr.w	r2, r2, #1
 8006bcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bce:	e007      	b.n	8006be0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f042 0201 	orr.w	r2, r2, #1
 8006bde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3714      	adds	r7, #20
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	40010000 	.word	0x40010000
 8006bf4:	40000400 	.word	0x40000400
 8006bf8:	40000800 	.word	0x40000800
 8006bfc:	40000c00 	.word	0x40000c00
 8006c00:	40010400 	.word	0x40010400
 8006c04:	40014000 	.word	0x40014000
 8006c08:	40001800 	.word	0x40001800

08006c0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e041      	b.n	8006ca2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d106      	bne.n	8006c38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7fd feb8 	bl	80049a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	3304      	adds	r3, #4
 8006c48:	4619      	mov	r1, r3
 8006c4a:	4610      	mov	r0, r2
 8006c4c:	f000 fce4 	bl	8007618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3708      	adds	r7, #8
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
	...

08006cac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d109      	bne.n	8006cd0 <HAL_TIM_PWM_Start+0x24>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	bf14      	ite	ne
 8006cc8:	2301      	movne	r3, #1
 8006cca:	2300      	moveq	r3, #0
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	e022      	b.n	8006d16 <HAL_TIM_PWM_Start+0x6a>
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	2b04      	cmp	r3, #4
 8006cd4:	d109      	bne.n	8006cea <HAL_TIM_PWM_Start+0x3e>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	bf14      	ite	ne
 8006ce2:	2301      	movne	r3, #1
 8006ce4:	2300      	moveq	r3, #0
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	e015      	b.n	8006d16 <HAL_TIM_PWM_Start+0x6a>
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2b08      	cmp	r3, #8
 8006cee:	d109      	bne.n	8006d04 <HAL_TIM_PWM_Start+0x58>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	bf14      	ite	ne
 8006cfc:	2301      	movne	r3, #1
 8006cfe:	2300      	moveq	r3, #0
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	e008      	b.n	8006d16 <HAL_TIM_PWM_Start+0x6a>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	bf14      	ite	ne
 8006d10:	2301      	movne	r3, #1
 8006d12:	2300      	moveq	r3, #0
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d001      	beq.n	8006d1e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e07c      	b.n	8006e18 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d104      	bne.n	8006d2e <HAL_TIM_PWM_Start+0x82>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2202      	movs	r2, #2
 8006d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d2c:	e013      	b.n	8006d56 <HAL_TIM_PWM_Start+0xaa>
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	2b04      	cmp	r3, #4
 8006d32:	d104      	bne.n	8006d3e <HAL_TIM_PWM_Start+0x92>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2202      	movs	r2, #2
 8006d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d3c:	e00b      	b.n	8006d56 <HAL_TIM_PWM_Start+0xaa>
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	2b08      	cmp	r3, #8
 8006d42:	d104      	bne.n	8006d4e <HAL_TIM_PWM_Start+0xa2>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2202      	movs	r2, #2
 8006d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d4c:	e003      	b.n	8006d56 <HAL_TIM_PWM_Start+0xaa>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2202      	movs	r2, #2
 8006d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	6839      	ldr	r1, [r7, #0]
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f000 ff44 	bl	8007bec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a2d      	ldr	r2, [pc, #180]	; (8006e20 <HAL_TIM_PWM_Start+0x174>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d004      	beq.n	8006d78 <HAL_TIM_PWM_Start+0xcc>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a2c      	ldr	r2, [pc, #176]	; (8006e24 <HAL_TIM_PWM_Start+0x178>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d101      	bne.n	8006d7c <HAL_TIM_PWM_Start+0xd0>
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e000      	b.n	8006d7e <HAL_TIM_PWM_Start+0xd2>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d007      	beq.n	8006d92 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a22      	ldr	r2, [pc, #136]	; (8006e20 <HAL_TIM_PWM_Start+0x174>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d022      	beq.n	8006de2 <HAL_TIM_PWM_Start+0x136>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006da4:	d01d      	beq.n	8006de2 <HAL_TIM_PWM_Start+0x136>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a1f      	ldr	r2, [pc, #124]	; (8006e28 <HAL_TIM_PWM_Start+0x17c>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d018      	beq.n	8006de2 <HAL_TIM_PWM_Start+0x136>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a1d      	ldr	r2, [pc, #116]	; (8006e2c <HAL_TIM_PWM_Start+0x180>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d013      	beq.n	8006de2 <HAL_TIM_PWM_Start+0x136>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a1c      	ldr	r2, [pc, #112]	; (8006e30 <HAL_TIM_PWM_Start+0x184>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d00e      	beq.n	8006de2 <HAL_TIM_PWM_Start+0x136>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a16      	ldr	r2, [pc, #88]	; (8006e24 <HAL_TIM_PWM_Start+0x178>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d009      	beq.n	8006de2 <HAL_TIM_PWM_Start+0x136>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a18      	ldr	r2, [pc, #96]	; (8006e34 <HAL_TIM_PWM_Start+0x188>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d004      	beq.n	8006de2 <HAL_TIM_PWM_Start+0x136>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a16      	ldr	r2, [pc, #88]	; (8006e38 <HAL_TIM_PWM_Start+0x18c>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d111      	bne.n	8006e06 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f003 0307 	and.w	r3, r3, #7
 8006dec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2b06      	cmp	r3, #6
 8006df2:	d010      	beq.n	8006e16 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f042 0201 	orr.w	r2, r2, #1
 8006e02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e04:	e007      	b.n	8006e16 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f042 0201 	orr.w	r2, r2, #1
 8006e14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	40010000 	.word	0x40010000
 8006e24:	40010400 	.word	0x40010400
 8006e28:	40000400 	.word	0x40000400
 8006e2c:	40000800 	.word	0x40000800
 8006e30:	40000c00 	.word	0x40000c00
 8006e34:	40014000 	.word	0x40014000
 8006e38:	40001800 	.word	0x40001800

08006e3c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b086      	sub	sp, #24
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d101      	bne.n	8006e50 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e097      	b.n	8006f80 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d106      	bne.n	8006e6a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7fd fc91 	bl	800478c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2202      	movs	r2, #2
 8006e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	6812      	ldr	r2, [r2, #0]
 8006e7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e80:	f023 0307 	bic.w	r3, r3, #7
 8006e84:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	3304      	adds	r3, #4
 8006e8e:	4619      	mov	r1, r3
 8006e90:	4610      	mov	r0, r2
 8006e92:	f000 fbc1 	bl	8007618 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	6a1b      	ldr	r3, [r3, #32]
 8006eac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ebe:	f023 0303 	bic.w	r3, r3, #3
 8006ec2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	689a      	ldr	r2, [r3, #8]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	021b      	lsls	r3, r3, #8
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	693a      	ldr	r2, [r7, #16]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006edc:	f023 030c 	bic.w	r3, r3, #12
 8006ee0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ee8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006eec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	68da      	ldr	r2, [r3, #12]
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	69db      	ldr	r3, [r3, #28]
 8006ef6:	021b      	lsls	r3, r3, #8
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	011a      	lsls	r2, r3, #4
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	6a1b      	ldr	r3, [r3, #32]
 8006f0a:	031b      	lsls	r3, r3, #12
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006f1a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006f22:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685a      	ldr	r2, [r3, #4]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	695b      	ldr	r3, [r3, #20]
 8006f2c:	011b      	lsls	r3, r3, #4
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	693a      	ldr	r2, [r7, #16]
 8006f44:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2201      	movs	r2, #1
 8006f72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3718      	adds	r7, #24
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f98:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006fa0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006fa8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006fb0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d110      	bne.n	8006fda <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fb8:	7bfb      	ldrb	r3, [r7, #15]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d102      	bne.n	8006fc4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fbe:	7b7b      	ldrb	r3, [r7, #13]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d001      	beq.n	8006fc8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e069      	b.n	800709c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2202      	movs	r2, #2
 8006fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fd8:	e031      	b.n	800703e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	2b04      	cmp	r3, #4
 8006fde:	d110      	bne.n	8007002 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fe0:	7bbb      	ldrb	r3, [r7, #14]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d102      	bne.n	8006fec <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fe6:	7b3b      	ldrb	r3, [r7, #12]
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d001      	beq.n	8006ff0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e055      	b.n	800709c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007000:	e01d      	b.n	800703e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007002:	7bfb      	ldrb	r3, [r7, #15]
 8007004:	2b01      	cmp	r3, #1
 8007006:	d108      	bne.n	800701a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007008:	7bbb      	ldrb	r3, [r7, #14]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d105      	bne.n	800701a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800700e:	7b7b      	ldrb	r3, [r7, #13]
 8007010:	2b01      	cmp	r3, #1
 8007012:	d102      	bne.n	800701a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007014:	7b3b      	ldrb	r3, [r7, #12]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d001      	beq.n	800701e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e03e      	b.n	800709c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2202      	movs	r2, #2
 8007022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2202      	movs	r2, #2
 800702a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2202      	movs	r2, #2
 8007032:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2202      	movs	r2, #2
 800703a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d003      	beq.n	800704c <HAL_TIM_Encoder_Start+0xc4>
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	2b04      	cmp	r3, #4
 8007048:	d008      	beq.n	800705c <HAL_TIM_Encoder_Start+0xd4>
 800704a:	e00f      	b.n	800706c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2201      	movs	r2, #1
 8007052:	2100      	movs	r1, #0
 8007054:	4618      	mov	r0, r3
 8007056:	f000 fdc9 	bl	8007bec <TIM_CCxChannelCmd>
      break;
 800705a:	e016      	b.n	800708a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2201      	movs	r2, #1
 8007062:	2104      	movs	r1, #4
 8007064:	4618      	mov	r0, r3
 8007066:	f000 fdc1 	bl	8007bec <TIM_CCxChannelCmd>
      break;
 800706a:	e00e      	b.n	800708a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2201      	movs	r2, #1
 8007072:	2100      	movs	r1, #0
 8007074:	4618      	mov	r0, r3
 8007076:	f000 fdb9 	bl	8007bec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2201      	movs	r2, #1
 8007080:	2104      	movs	r1, #4
 8007082:	4618      	mov	r0, r3
 8007084:	f000 fdb2 	bl	8007bec <TIM_CCxChannelCmd>
      break;
 8007088:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f042 0201 	orr.w	r2, r2, #1
 8007098:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	f003 0302 	and.w	r3, r3, #2
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d122      	bne.n	8007100 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	f003 0302 	and.w	r3, r3, #2
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d11b      	bne.n	8007100 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f06f 0202 	mvn.w	r2, #2
 80070d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2201      	movs	r2, #1
 80070d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	f003 0303 	and.w	r3, r3, #3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d003      	beq.n	80070ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fa77 	bl	80075da <HAL_TIM_IC_CaptureCallback>
 80070ec:	e005      	b.n	80070fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fa69 	bl	80075c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fa7a 	bl	80075ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	f003 0304 	and.w	r3, r3, #4
 800710a:	2b04      	cmp	r3, #4
 800710c:	d122      	bne.n	8007154 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	f003 0304 	and.w	r3, r3, #4
 8007118:	2b04      	cmp	r3, #4
 800711a:	d11b      	bne.n	8007154 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f06f 0204 	mvn.w	r2, #4
 8007124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2202      	movs	r2, #2
 800712a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007136:	2b00      	cmp	r3, #0
 8007138:	d003      	beq.n	8007142 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fa4d 	bl	80075da <HAL_TIM_IC_CaptureCallback>
 8007140:	e005      	b.n	800714e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fa3f 	bl	80075c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 fa50 	bl	80075ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	f003 0308 	and.w	r3, r3, #8
 800715e:	2b08      	cmp	r3, #8
 8007160:	d122      	bne.n	80071a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	f003 0308 	and.w	r3, r3, #8
 800716c:	2b08      	cmp	r3, #8
 800716e:	d11b      	bne.n	80071a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f06f 0208 	mvn.w	r2, #8
 8007178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2204      	movs	r2, #4
 800717e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	69db      	ldr	r3, [r3, #28]
 8007186:	f003 0303 	and.w	r3, r3, #3
 800718a:	2b00      	cmp	r3, #0
 800718c:	d003      	beq.n	8007196 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 fa23 	bl	80075da <HAL_TIM_IC_CaptureCallback>
 8007194:	e005      	b.n	80071a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fa15 	bl	80075c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 fa26 	bl	80075ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	f003 0310 	and.w	r3, r3, #16
 80071b2:	2b10      	cmp	r3, #16
 80071b4:	d122      	bne.n	80071fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	f003 0310 	and.w	r3, r3, #16
 80071c0:	2b10      	cmp	r3, #16
 80071c2:	d11b      	bne.n	80071fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f06f 0210 	mvn.w	r2, #16
 80071cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2208      	movs	r2, #8
 80071d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	69db      	ldr	r3, [r3, #28]
 80071da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d003      	beq.n	80071ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f9f9 	bl	80075da <HAL_TIM_IC_CaptureCallback>
 80071e8:	e005      	b.n	80071f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f9eb 	bl	80075c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f9fc 	bl	80075ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	f003 0301 	and.w	r3, r3, #1
 8007206:	2b01      	cmp	r3, #1
 8007208:	d10e      	bne.n	8007228 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	f003 0301 	and.w	r3, r3, #1
 8007214:	2b01      	cmp	r3, #1
 8007216:	d107      	bne.n	8007228 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f06f 0201 	mvn.w	r2, #1
 8007220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f7fa fb10 	bl	8001848 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007232:	2b80      	cmp	r3, #128	; 0x80
 8007234:	d10e      	bne.n	8007254 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007240:	2b80      	cmp	r3, #128	; 0x80
 8007242:	d107      	bne.n	8007254 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800724c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 fdca 	bl	8007de8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800725e:	2b40      	cmp	r3, #64	; 0x40
 8007260:	d10e      	bne.n	8007280 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800726c:	2b40      	cmp	r3, #64	; 0x40
 800726e:	d107      	bne.n	8007280 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f9c1 	bl	8007602 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	f003 0320 	and.w	r3, r3, #32
 800728a:	2b20      	cmp	r3, #32
 800728c:	d10e      	bne.n	80072ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	f003 0320 	and.w	r3, r3, #32
 8007298:	2b20      	cmp	r3, #32
 800729a:	d107      	bne.n	80072ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f06f 0220 	mvn.w	r2, #32
 80072a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 fd94 	bl	8007dd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072ac:	bf00      	nop
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072c0:	2300      	movs	r3, #0
 80072c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d101      	bne.n	80072d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80072ce:	2302      	movs	r3, #2
 80072d0:	e0ae      	b.n	8007430 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2201      	movs	r2, #1
 80072d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2b0c      	cmp	r3, #12
 80072de:	f200 809f 	bhi.w	8007420 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80072e2:	a201      	add	r2, pc, #4	; (adr r2, 80072e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80072e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e8:	0800731d 	.word	0x0800731d
 80072ec:	08007421 	.word	0x08007421
 80072f0:	08007421 	.word	0x08007421
 80072f4:	08007421 	.word	0x08007421
 80072f8:	0800735d 	.word	0x0800735d
 80072fc:	08007421 	.word	0x08007421
 8007300:	08007421 	.word	0x08007421
 8007304:	08007421 	.word	0x08007421
 8007308:	0800739f 	.word	0x0800739f
 800730c:	08007421 	.word	0x08007421
 8007310:	08007421 	.word	0x08007421
 8007314:	08007421 	.word	0x08007421
 8007318:	080073df 	.word	0x080073df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68b9      	ldr	r1, [r7, #8]
 8007322:	4618      	mov	r0, r3
 8007324:	f000 fa18 	bl	8007758 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	699a      	ldr	r2, [r3, #24]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f042 0208 	orr.w	r2, r2, #8
 8007336:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	699a      	ldr	r2, [r3, #24]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f022 0204 	bic.w	r2, r2, #4
 8007346:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	6999      	ldr	r1, [r3, #24]
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	691a      	ldr	r2, [r3, #16]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	430a      	orrs	r2, r1
 8007358:	619a      	str	r2, [r3, #24]
      break;
 800735a:	e064      	b.n	8007426 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68b9      	ldr	r1, [r7, #8]
 8007362:	4618      	mov	r0, r3
 8007364:	f000 fa68 	bl	8007838 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	699a      	ldr	r2, [r3, #24]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007376:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	699a      	ldr	r2, [r3, #24]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007386:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	6999      	ldr	r1, [r3, #24]
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	021a      	lsls	r2, r3, #8
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	430a      	orrs	r2, r1
 800739a:	619a      	str	r2, [r3, #24]
      break;
 800739c:	e043      	b.n	8007426 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68b9      	ldr	r1, [r7, #8]
 80073a4:	4618      	mov	r0, r3
 80073a6:	f000 fabd 	bl	8007924 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	69da      	ldr	r2, [r3, #28]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f042 0208 	orr.w	r2, r2, #8
 80073b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	69da      	ldr	r2, [r3, #28]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f022 0204 	bic.w	r2, r2, #4
 80073c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	69d9      	ldr	r1, [r3, #28]
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	691a      	ldr	r2, [r3, #16]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	430a      	orrs	r2, r1
 80073da:	61da      	str	r2, [r3, #28]
      break;
 80073dc:	e023      	b.n	8007426 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68b9      	ldr	r1, [r7, #8]
 80073e4:	4618      	mov	r0, r3
 80073e6:	f000 fb11 	bl	8007a0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	69da      	ldr	r2, [r3, #28]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	69da      	ldr	r2, [r3, #28]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007408:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	69d9      	ldr	r1, [r3, #28]
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	021a      	lsls	r2, r3, #8
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	430a      	orrs	r2, r1
 800741c:	61da      	str	r2, [r3, #28]
      break;
 800741e:	e002      	b.n	8007426 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	75fb      	strb	r3, [r7, #23]
      break;
 8007424:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800742e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007430:	4618      	mov	r0, r3
 8007432:	3718      	adds	r7, #24
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007442:	2300      	movs	r3, #0
 8007444:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800744c:	2b01      	cmp	r3, #1
 800744e:	d101      	bne.n	8007454 <HAL_TIM_ConfigClockSource+0x1c>
 8007450:	2302      	movs	r3, #2
 8007452:	e0b4      	b.n	80075be <HAL_TIM_ConfigClockSource+0x186>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2202      	movs	r2, #2
 8007460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007472:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800747a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800748c:	d03e      	beq.n	800750c <HAL_TIM_ConfigClockSource+0xd4>
 800748e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007492:	f200 8087 	bhi.w	80075a4 <HAL_TIM_ConfigClockSource+0x16c>
 8007496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800749a:	f000 8086 	beq.w	80075aa <HAL_TIM_ConfigClockSource+0x172>
 800749e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074a2:	d87f      	bhi.n	80075a4 <HAL_TIM_ConfigClockSource+0x16c>
 80074a4:	2b70      	cmp	r3, #112	; 0x70
 80074a6:	d01a      	beq.n	80074de <HAL_TIM_ConfigClockSource+0xa6>
 80074a8:	2b70      	cmp	r3, #112	; 0x70
 80074aa:	d87b      	bhi.n	80075a4 <HAL_TIM_ConfigClockSource+0x16c>
 80074ac:	2b60      	cmp	r3, #96	; 0x60
 80074ae:	d050      	beq.n	8007552 <HAL_TIM_ConfigClockSource+0x11a>
 80074b0:	2b60      	cmp	r3, #96	; 0x60
 80074b2:	d877      	bhi.n	80075a4 <HAL_TIM_ConfigClockSource+0x16c>
 80074b4:	2b50      	cmp	r3, #80	; 0x50
 80074b6:	d03c      	beq.n	8007532 <HAL_TIM_ConfigClockSource+0xfa>
 80074b8:	2b50      	cmp	r3, #80	; 0x50
 80074ba:	d873      	bhi.n	80075a4 <HAL_TIM_ConfigClockSource+0x16c>
 80074bc:	2b40      	cmp	r3, #64	; 0x40
 80074be:	d058      	beq.n	8007572 <HAL_TIM_ConfigClockSource+0x13a>
 80074c0:	2b40      	cmp	r3, #64	; 0x40
 80074c2:	d86f      	bhi.n	80075a4 <HAL_TIM_ConfigClockSource+0x16c>
 80074c4:	2b30      	cmp	r3, #48	; 0x30
 80074c6:	d064      	beq.n	8007592 <HAL_TIM_ConfigClockSource+0x15a>
 80074c8:	2b30      	cmp	r3, #48	; 0x30
 80074ca:	d86b      	bhi.n	80075a4 <HAL_TIM_ConfigClockSource+0x16c>
 80074cc:	2b20      	cmp	r3, #32
 80074ce:	d060      	beq.n	8007592 <HAL_TIM_ConfigClockSource+0x15a>
 80074d0:	2b20      	cmp	r3, #32
 80074d2:	d867      	bhi.n	80075a4 <HAL_TIM_ConfigClockSource+0x16c>
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d05c      	beq.n	8007592 <HAL_TIM_ConfigClockSource+0x15a>
 80074d8:	2b10      	cmp	r3, #16
 80074da:	d05a      	beq.n	8007592 <HAL_TIM_ConfigClockSource+0x15a>
 80074dc:	e062      	b.n	80075a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6818      	ldr	r0, [r3, #0]
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	6899      	ldr	r1, [r3, #8]
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	685a      	ldr	r2, [r3, #4]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	f000 fb5d 	bl	8007bac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007500:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	609a      	str	r2, [r3, #8]
      break;
 800750a:	e04f      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6818      	ldr	r0, [r3, #0]
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	6899      	ldr	r1, [r3, #8]
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	685a      	ldr	r2, [r3, #4]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	f000 fb46 	bl	8007bac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	689a      	ldr	r2, [r3, #8]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800752e:	609a      	str	r2, [r3, #8]
      break;
 8007530:	e03c      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6818      	ldr	r0, [r3, #0]
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	6859      	ldr	r1, [r3, #4]
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	461a      	mov	r2, r3
 8007540:	f000 faba 	bl	8007ab8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2150      	movs	r1, #80	; 0x50
 800754a:	4618      	mov	r0, r3
 800754c:	f000 fb13 	bl	8007b76 <TIM_ITRx_SetConfig>
      break;
 8007550:	e02c      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6818      	ldr	r0, [r3, #0]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	6859      	ldr	r1, [r3, #4]
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	461a      	mov	r2, r3
 8007560:	f000 fad9 	bl	8007b16 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2160      	movs	r1, #96	; 0x60
 800756a:	4618      	mov	r0, r3
 800756c:	f000 fb03 	bl	8007b76 <TIM_ITRx_SetConfig>
      break;
 8007570:	e01c      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6818      	ldr	r0, [r3, #0]
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	6859      	ldr	r1, [r3, #4]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	461a      	mov	r2, r3
 8007580:	f000 fa9a 	bl	8007ab8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2140      	movs	r1, #64	; 0x40
 800758a:	4618      	mov	r0, r3
 800758c:	f000 faf3 	bl	8007b76 <TIM_ITRx_SetConfig>
      break;
 8007590:	e00c      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4619      	mov	r1, r3
 800759c:	4610      	mov	r0, r2
 800759e:	f000 faea 	bl	8007b76 <TIM_ITRx_SetConfig>
      break;
 80075a2:	e003      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	73fb      	strb	r3, [r7, #15]
      break;
 80075a8:	e000      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80075aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075c6:	b480      	push	{r7}
 80075c8:	b083      	sub	sp, #12
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075ce:	bf00      	nop
 80075d0:	370c      	adds	r7, #12
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075da:	b480      	push	{r7}
 80075dc:	b083      	sub	sp, #12
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075e2:	bf00      	nop
 80075e4:	370c      	adds	r7, #12
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr

080075ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075ee:	b480      	push	{r7}
 80075f0:	b083      	sub	sp, #12
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075f6:	bf00      	nop
 80075f8:	370c      	adds	r7, #12
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr

08007602 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007602:	b480      	push	{r7}
 8007604:	b083      	sub	sp, #12
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800760a:	bf00      	nop
 800760c:	370c      	adds	r7, #12
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
	...

08007618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a40      	ldr	r2, [pc, #256]	; (800772c <TIM_Base_SetConfig+0x114>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d013      	beq.n	8007658 <TIM_Base_SetConfig+0x40>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007636:	d00f      	beq.n	8007658 <TIM_Base_SetConfig+0x40>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a3d      	ldr	r2, [pc, #244]	; (8007730 <TIM_Base_SetConfig+0x118>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d00b      	beq.n	8007658 <TIM_Base_SetConfig+0x40>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a3c      	ldr	r2, [pc, #240]	; (8007734 <TIM_Base_SetConfig+0x11c>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d007      	beq.n	8007658 <TIM_Base_SetConfig+0x40>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a3b      	ldr	r2, [pc, #236]	; (8007738 <TIM_Base_SetConfig+0x120>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d003      	beq.n	8007658 <TIM_Base_SetConfig+0x40>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a3a      	ldr	r2, [pc, #232]	; (800773c <TIM_Base_SetConfig+0x124>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d108      	bne.n	800766a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800765e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	4313      	orrs	r3, r2
 8007668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a2f      	ldr	r2, [pc, #188]	; (800772c <TIM_Base_SetConfig+0x114>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d02b      	beq.n	80076ca <TIM_Base_SetConfig+0xb2>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007678:	d027      	beq.n	80076ca <TIM_Base_SetConfig+0xb2>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a2c      	ldr	r2, [pc, #176]	; (8007730 <TIM_Base_SetConfig+0x118>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d023      	beq.n	80076ca <TIM_Base_SetConfig+0xb2>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a2b      	ldr	r2, [pc, #172]	; (8007734 <TIM_Base_SetConfig+0x11c>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d01f      	beq.n	80076ca <TIM_Base_SetConfig+0xb2>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a2a      	ldr	r2, [pc, #168]	; (8007738 <TIM_Base_SetConfig+0x120>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d01b      	beq.n	80076ca <TIM_Base_SetConfig+0xb2>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a29      	ldr	r2, [pc, #164]	; (800773c <TIM_Base_SetConfig+0x124>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d017      	beq.n	80076ca <TIM_Base_SetConfig+0xb2>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a28      	ldr	r2, [pc, #160]	; (8007740 <TIM_Base_SetConfig+0x128>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d013      	beq.n	80076ca <TIM_Base_SetConfig+0xb2>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a27      	ldr	r2, [pc, #156]	; (8007744 <TIM_Base_SetConfig+0x12c>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d00f      	beq.n	80076ca <TIM_Base_SetConfig+0xb2>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a26      	ldr	r2, [pc, #152]	; (8007748 <TIM_Base_SetConfig+0x130>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d00b      	beq.n	80076ca <TIM_Base_SetConfig+0xb2>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a25      	ldr	r2, [pc, #148]	; (800774c <TIM_Base_SetConfig+0x134>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d007      	beq.n	80076ca <TIM_Base_SetConfig+0xb2>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a24      	ldr	r2, [pc, #144]	; (8007750 <TIM_Base_SetConfig+0x138>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d003      	beq.n	80076ca <TIM_Base_SetConfig+0xb2>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a23      	ldr	r2, [pc, #140]	; (8007754 <TIM_Base_SetConfig+0x13c>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d108      	bne.n	80076dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	4313      	orrs	r3, r2
 80076da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	689a      	ldr	r2, [r3, #8]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a0a      	ldr	r2, [pc, #40]	; (800772c <TIM_Base_SetConfig+0x114>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d003      	beq.n	8007710 <TIM_Base_SetConfig+0xf8>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a0c      	ldr	r2, [pc, #48]	; (800773c <TIM_Base_SetConfig+0x124>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d103      	bne.n	8007718 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	691a      	ldr	r2, [r3, #16]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	615a      	str	r2, [r3, #20]
}
 800771e:	bf00      	nop
 8007720:	3714      	adds	r7, #20
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	40010000 	.word	0x40010000
 8007730:	40000400 	.word	0x40000400
 8007734:	40000800 	.word	0x40000800
 8007738:	40000c00 	.word	0x40000c00
 800773c:	40010400 	.word	0x40010400
 8007740:	40014000 	.word	0x40014000
 8007744:	40014400 	.word	0x40014400
 8007748:	40014800 	.word	0x40014800
 800774c:	40001800 	.word	0x40001800
 8007750:	40001c00 	.word	0x40001c00
 8007754:	40002000 	.word	0x40002000

08007758 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007758:	b480      	push	{r7}
 800775a:	b087      	sub	sp, #28
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a1b      	ldr	r3, [r3, #32]
 8007766:	f023 0201 	bic.w	r2, r3, #1
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a1b      	ldr	r3, [r3, #32]
 8007772:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	699b      	ldr	r3, [r3, #24]
 800777e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f023 0303 	bic.w	r3, r3, #3
 800778e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	4313      	orrs	r3, r2
 8007798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	f023 0302 	bic.w	r3, r3, #2
 80077a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	697a      	ldr	r2, [r7, #20]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a20      	ldr	r2, [pc, #128]	; (8007830 <TIM_OC1_SetConfig+0xd8>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d003      	beq.n	80077bc <TIM_OC1_SetConfig+0x64>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a1f      	ldr	r2, [pc, #124]	; (8007834 <TIM_OC1_SetConfig+0xdc>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d10c      	bne.n	80077d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	f023 0308 	bic.w	r3, r3, #8
 80077c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	697a      	ldr	r2, [r7, #20]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	f023 0304 	bic.w	r3, r3, #4
 80077d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a15      	ldr	r2, [pc, #84]	; (8007830 <TIM_OC1_SetConfig+0xd8>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d003      	beq.n	80077e6 <TIM_OC1_SetConfig+0x8e>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a14      	ldr	r2, [pc, #80]	; (8007834 <TIM_OC1_SetConfig+0xdc>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d111      	bne.n	800780a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	693a      	ldr	r2, [r7, #16]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	699b      	ldr	r3, [r3, #24]
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	4313      	orrs	r3, r2
 8007808:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	693a      	ldr	r2, [r7, #16]
 800780e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	685a      	ldr	r2, [r3, #4]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	697a      	ldr	r2, [r7, #20]
 8007822:	621a      	str	r2, [r3, #32]
}
 8007824:	bf00      	nop
 8007826:	371c      	adds	r7, #28
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr
 8007830:	40010000 	.word	0x40010000
 8007834:	40010400 	.word	0x40010400

08007838 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007838:	b480      	push	{r7}
 800783a:	b087      	sub	sp, #28
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a1b      	ldr	r3, [r3, #32]
 8007846:	f023 0210 	bic.w	r2, r3, #16
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800786e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	021b      	lsls	r3, r3, #8
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	4313      	orrs	r3, r2
 800787a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	f023 0320 	bic.w	r3, r3, #32
 8007882:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	011b      	lsls	r3, r3, #4
 800788a:	697a      	ldr	r2, [r7, #20]
 800788c:	4313      	orrs	r3, r2
 800788e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a22      	ldr	r2, [pc, #136]	; (800791c <TIM_OC2_SetConfig+0xe4>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d003      	beq.n	80078a0 <TIM_OC2_SetConfig+0x68>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a21      	ldr	r2, [pc, #132]	; (8007920 <TIM_OC2_SetConfig+0xe8>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d10d      	bne.n	80078bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	011b      	lsls	r3, r3, #4
 80078ae:	697a      	ldr	r2, [r7, #20]
 80078b0:	4313      	orrs	r3, r2
 80078b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a17      	ldr	r2, [pc, #92]	; (800791c <TIM_OC2_SetConfig+0xe4>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d003      	beq.n	80078cc <TIM_OC2_SetConfig+0x94>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4a16      	ldr	r2, [pc, #88]	; (8007920 <TIM_OC2_SetConfig+0xe8>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d113      	bne.n	80078f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	695b      	ldr	r3, [r3, #20]
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	693a      	ldr	r2, [r7, #16]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	699b      	ldr	r3, [r3, #24]
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	693a      	ldr	r2, [r7, #16]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	693a      	ldr	r2, [r7, #16]
 80078f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	685a      	ldr	r2, [r3, #4]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	621a      	str	r2, [r3, #32]
}
 800790e:	bf00      	nop
 8007910:	371c      	adds	r7, #28
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	40010000 	.word	0x40010000
 8007920:	40010400 	.word	0x40010400

08007924 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007924:	b480      	push	{r7}
 8007926:	b087      	sub	sp, #28
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a1b      	ldr	r3, [r3, #32]
 800793e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	69db      	ldr	r3, [r3, #28]
 800794a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f023 0303 	bic.w	r3, r3, #3
 800795a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	4313      	orrs	r3, r2
 8007964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800796c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	021b      	lsls	r3, r3, #8
 8007974:	697a      	ldr	r2, [r7, #20]
 8007976:	4313      	orrs	r3, r2
 8007978:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a21      	ldr	r2, [pc, #132]	; (8007a04 <TIM_OC3_SetConfig+0xe0>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d003      	beq.n	800798a <TIM_OC3_SetConfig+0x66>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a20      	ldr	r2, [pc, #128]	; (8007a08 <TIM_OC3_SetConfig+0xe4>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d10d      	bne.n	80079a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007990:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	021b      	lsls	r3, r3, #8
 8007998:	697a      	ldr	r2, [r7, #20]
 800799a:	4313      	orrs	r3, r2
 800799c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a16      	ldr	r2, [pc, #88]	; (8007a04 <TIM_OC3_SetConfig+0xe0>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d003      	beq.n	80079b6 <TIM_OC3_SetConfig+0x92>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a15      	ldr	r2, [pc, #84]	; (8007a08 <TIM_OC3_SetConfig+0xe4>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d113      	bne.n	80079de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	695b      	ldr	r3, [r3, #20]
 80079ca:	011b      	lsls	r3, r3, #4
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	699b      	ldr	r3, [r3, #24]
 80079d6:	011b      	lsls	r3, r3, #4
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	4313      	orrs	r3, r2
 80079dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	693a      	ldr	r2, [r7, #16]
 80079e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	685a      	ldr	r2, [r3, #4]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	697a      	ldr	r2, [r7, #20]
 80079f6:	621a      	str	r2, [r3, #32]
}
 80079f8:	bf00      	nop
 80079fa:	371c      	adds	r7, #28
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr
 8007a04:	40010000 	.word	0x40010000
 8007a08:	40010400 	.word	0x40010400

08007a0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b087      	sub	sp, #28
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a1b      	ldr	r3, [r3, #32]
 8007a1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	69db      	ldr	r3, [r3, #28]
 8007a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	021b      	lsls	r3, r3, #8
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	031b      	lsls	r3, r3, #12
 8007a5e:	693a      	ldr	r2, [r7, #16]
 8007a60:	4313      	orrs	r3, r2
 8007a62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a12      	ldr	r2, [pc, #72]	; (8007ab0 <TIM_OC4_SetConfig+0xa4>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d003      	beq.n	8007a74 <TIM_OC4_SetConfig+0x68>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a11      	ldr	r2, [pc, #68]	; (8007ab4 <TIM_OC4_SetConfig+0xa8>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d109      	bne.n	8007a88 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	695b      	ldr	r3, [r3, #20]
 8007a80:	019b      	lsls	r3, r3, #6
 8007a82:	697a      	ldr	r2, [r7, #20]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	697a      	ldr	r2, [r7, #20]
 8007a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	685a      	ldr	r2, [r3, #4]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	693a      	ldr	r2, [r7, #16]
 8007aa0:	621a      	str	r2, [r3, #32]
}
 8007aa2:	bf00      	nop
 8007aa4:	371c      	adds	r7, #28
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	40010000 	.word	0x40010000
 8007ab4:	40010400 	.word	0x40010400

08007ab8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b087      	sub	sp, #28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6a1b      	ldr	r3, [r3, #32]
 8007ac8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6a1b      	ldr	r3, [r3, #32]
 8007ace:	f023 0201 	bic.w	r2, r3, #1
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ae2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	011b      	lsls	r3, r3, #4
 8007ae8:	693a      	ldr	r2, [r7, #16]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	f023 030a 	bic.w	r3, r3, #10
 8007af4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007af6:	697a      	ldr	r2, [r7, #20]
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	693a      	ldr	r2, [r7, #16]
 8007b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	697a      	ldr	r2, [r7, #20]
 8007b08:	621a      	str	r2, [r3, #32]
}
 8007b0a:	bf00      	nop
 8007b0c:	371c      	adds	r7, #28
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr

08007b16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b16:	b480      	push	{r7}
 8007b18:	b087      	sub	sp, #28
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	60f8      	str	r0, [r7, #12]
 8007b1e:	60b9      	str	r1, [r7, #8]
 8007b20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6a1b      	ldr	r3, [r3, #32]
 8007b26:	f023 0210 	bic.w	r2, r3, #16
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	699b      	ldr	r3, [r3, #24]
 8007b32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6a1b      	ldr	r3, [r3, #32]
 8007b38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	031b      	lsls	r3, r3, #12
 8007b46:	697a      	ldr	r2, [r7, #20]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	011b      	lsls	r3, r3, #4
 8007b58:	693a      	ldr	r2, [r7, #16]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	697a      	ldr	r2, [r7, #20]
 8007b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	621a      	str	r2, [r3, #32]
}
 8007b6a:	bf00      	nop
 8007b6c:	371c      	adds	r7, #28
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b76:	b480      	push	{r7}
 8007b78:	b085      	sub	sp, #20
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	f043 0307 	orr.w	r3, r3, #7
 8007b98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	609a      	str	r2, [r3, #8]
}
 8007ba0:	bf00      	nop
 8007ba2:	3714      	adds	r7, #20
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b087      	sub	sp, #28
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]
 8007bb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007bc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	021a      	lsls	r2, r3, #8
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	431a      	orrs	r2, r3
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	697a      	ldr	r2, [r7, #20]
 8007bde:	609a      	str	r2, [r3, #8]
}
 8007be0:	bf00      	nop
 8007be2:	371c      	adds	r7, #28
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b087      	sub	sp, #28
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	f003 031f 	and.w	r3, r3, #31
 8007bfe:	2201      	movs	r2, #1
 8007c00:	fa02 f303 	lsl.w	r3, r2, r3
 8007c04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6a1a      	ldr	r2, [r3, #32]
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	43db      	mvns	r3, r3
 8007c0e:	401a      	ands	r2, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6a1a      	ldr	r2, [r3, #32]
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	f003 031f 	and.w	r3, r3, #31
 8007c1e:	6879      	ldr	r1, [r7, #4]
 8007c20:	fa01 f303 	lsl.w	r3, r1, r3
 8007c24:	431a      	orrs	r2, r3
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	621a      	str	r2, [r3, #32]
}
 8007c2a:	bf00      	nop
 8007c2c:	371c      	adds	r7, #28
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
	...

08007c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d101      	bne.n	8007c50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c4c:	2302      	movs	r3, #2
 8007c4e:	e05a      	b.n	8007d06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2202      	movs	r2, #2
 8007c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a21      	ldr	r2, [pc, #132]	; (8007d14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d022      	beq.n	8007cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c9c:	d01d      	beq.n	8007cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a1d      	ldr	r2, [pc, #116]	; (8007d18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d018      	beq.n	8007cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a1b      	ldr	r2, [pc, #108]	; (8007d1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d013      	beq.n	8007cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a1a      	ldr	r2, [pc, #104]	; (8007d20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d00e      	beq.n	8007cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a18      	ldr	r2, [pc, #96]	; (8007d24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d009      	beq.n	8007cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a17      	ldr	r2, [pc, #92]	; (8007d28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d004      	beq.n	8007cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a15      	ldr	r2, [pc, #84]	; (8007d2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d10c      	bne.n	8007cf4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ce0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	68ba      	ldr	r2, [r7, #8]
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68ba      	ldr	r2, [r7, #8]
 8007cf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3714      	adds	r7, #20
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	40010000 	.word	0x40010000
 8007d18:	40000400 	.word	0x40000400
 8007d1c:	40000800 	.word	0x40000800
 8007d20:	40000c00 	.word	0x40000c00
 8007d24:	40010400 	.word	0x40010400
 8007d28:	40014000 	.word	0x40014000
 8007d2c:	40001800 	.word	0x40001800

08007d30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d101      	bne.n	8007d4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007d48:	2302      	movs	r3, #2
 8007d4a:	e03d      	b.n	8007dc8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	4313      	orrs	r3, r2
 8007d98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	695b      	ldr	r3, [r3, #20]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	69db      	ldr	r3, [r3, #28]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3714      	adds	r7, #20
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d101      	bne.n	8007e0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e03f      	b.n	8007e8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d106      	bne.n	8007e28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f7fc fe86 	bl	8004b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2224      	movs	r2, #36	; 0x24
 8007e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68da      	ldr	r2, [r3, #12]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 ff71 	bl	8008d28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	691a      	ldr	r2, [r3, #16]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	695a      	ldr	r2, [r3, #20]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	68da      	ldr	r2, [r3, #12]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2220      	movs	r2, #32
 8007e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2220      	movs	r2, #32
 8007e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3708      	adds	r7, #8
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b082      	sub	sp, #8
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d101      	bne.n	8007ea8 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e021      	b.n	8007eec <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2224      	movs	r2, #36	; 0x24
 8007eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68da      	ldr	r2, [r3, #12]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ebe:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f7fc feef 	bl	8004ca4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007eea:	2300      	movs	r3, #0
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3708      	adds	r7, #8
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b08c      	sub	sp, #48	; 0x30
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	4613      	mov	r3, r2
 8007f00:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	2b20      	cmp	r3, #32
 8007f0c:	d165      	bne.n	8007fda <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d002      	beq.n	8007f1a <HAL_UART_Transmit_DMA+0x26>
 8007f14:	88fb      	ldrh	r3, [r7, #6]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d101      	bne.n	8007f1e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e05e      	b.n	8007fdc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d101      	bne.n	8007f2c <HAL_UART_Transmit_DMA+0x38>
 8007f28:	2302      	movs	r3, #2
 8007f2a:	e057      	b.n	8007fdc <HAL_UART_Transmit_DMA+0xe8>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007f34:	68ba      	ldr	r2, [r7, #8]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	88fa      	ldrh	r2, [r7, #6]
 8007f3e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	88fa      	ldrh	r2, [r7, #6]
 8007f44:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2221      	movs	r2, #33	; 0x21
 8007f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f58:	4a22      	ldr	r2, [pc, #136]	; (8007fe4 <HAL_UART_Transmit_DMA+0xf0>)
 8007f5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f60:	4a21      	ldr	r2, [pc, #132]	; (8007fe8 <HAL_UART_Transmit_DMA+0xf4>)
 8007f62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f68:	4a20      	ldr	r2, [pc, #128]	; (8007fec <HAL_UART_Transmit_DMA+0xf8>)
 8007f6a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f70:	2200      	movs	r2, #0
 8007f72:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007f74:	f107 0308 	add.w	r3, r7, #8
 8007f78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f80:	6819      	ldr	r1, [r3, #0]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	3304      	adds	r3, #4
 8007f88:	461a      	mov	r2, r3
 8007f8a:	88fb      	ldrh	r3, [r7, #6]
 8007f8c:	f7fd f9a0 	bl	80052d0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007f98:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	3314      	adds	r3, #20
 8007fa8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	e853 3f00 	ldrex	r3, [r3]
 8007fb0:	617b      	str	r3, [r7, #20]
   return(result);
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	3314      	adds	r3, #20
 8007fc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fc2:	627a      	str	r2, [r7, #36]	; 0x24
 8007fc4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc6:	6a39      	ldr	r1, [r7, #32]
 8007fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fca:	e841 2300 	strex	r3, r2, [r1]
 8007fce:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1e5      	bne.n	8007fa2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	e000      	b.n	8007fdc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007fda:	2302      	movs	r3, #2
  }
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3730      	adds	r7, #48	; 0x30
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	080085c1 	.word	0x080085c1
 8007fe8:	0800865b 	.word	0x0800865b
 8007fec:	080087d3 	.word	0x080087d3

08007ff0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008004:	b2db      	uxtb	r3, r3
 8008006:	2b20      	cmp	r3, #32
 8008008:	d11d      	bne.n	8008046 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d002      	beq.n	8008016 <HAL_UART_Receive_DMA+0x26>
 8008010:	88fb      	ldrh	r3, [r7, #6]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d101      	bne.n	800801a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e016      	b.n	8008048 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008020:	2b01      	cmp	r3, #1
 8008022:	d101      	bne.n	8008028 <HAL_UART_Receive_DMA+0x38>
 8008024:	2302      	movs	r3, #2
 8008026:	e00f      	b.n	8008048 <HAL_UART_Receive_DMA+0x58>
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2200      	movs	r2, #0
 8008034:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008036:	88fb      	ldrh	r3, [r7, #6]
 8008038:	461a      	mov	r2, r3
 800803a:	68b9      	ldr	r1, [r7, #8]
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f000 fc13 	bl	8008868 <UART_Start_Receive_DMA>
 8008042:	4603      	mov	r3, r0
 8008044:	e000      	b.n	8008048 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008046:	2302      	movs	r3, #2
  }
}
 8008048:	4618      	mov	r0, r3
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b0ba      	sub	sp, #232	; 0xe8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	695b      	ldr	r3, [r3, #20]
 8008072:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008076:	2300      	movs	r3, #0
 8008078:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800807c:	2300      	movs	r3, #0
 800807e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008086:	f003 030f 	and.w	r3, r3, #15
 800808a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800808e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008092:	2b00      	cmp	r3, #0
 8008094:	d10f      	bne.n	80080b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800809a:	f003 0320 	and.w	r3, r3, #32
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d009      	beq.n	80080b6 <HAL_UART_IRQHandler+0x66>
 80080a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080a6:	f003 0320 	and.w	r3, r3, #32
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d003      	beq.n	80080b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 fd7f 	bl	8008bb2 <UART_Receive_IT>
      return;
 80080b4:	e256      	b.n	8008564 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80080b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	f000 80de 	beq.w	800827c <HAL_UART_IRQHandler+0x22c>
 80080c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080c4:	f003 0301 	and.w	r3, r3, #1
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d106      	bne.n	80080da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80080cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f000 80d1 	beq.w	800827c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80080da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080de:	f003 0301 	and.w	r3, r3, #1
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00b      	beq.n	80080fe <HAL_UART_IRQHandler+0xae>
 80080e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d005      	beq.n	80080fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f6:	f043 0201 	orr.w	r2, r3, #1
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80080fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008102:	f003 0304 	and.w	r3, r3, #4
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00b      	beq.n	8008122 <HAL_UART_IRQHandler+0xd2>
 800810a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800810e:	f003 0301 	and.w	r3, r3, #1
 8008112:	2b00      	cmp	r3, #0
 8008114:	d005      	beq.n	8008122 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800811a:	f043 0202 	orr.w	r2, r3, #2
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008126:	f003 0302 	and.w	r3, r3, #2
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00b      	beq.n	8008146 <HAL_UART_IRQHandler+0xf6>
 800812e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008132:	f003 0301 	and.w	r3, r3, #1
 8008136:	2b00      	cmp	r3, #0
 8008138:	d005      	beq.n	8008146 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813e:	f043 0204 	orr.w	r2, r3, #4
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800814a:	f003 0308 	and.w	r3, r3, #8
 800814e:	2b00      	cmp	r3, #0
 8008150:	d011      	beq.n	8008176 <HAL_UART_IRQHandler+0x126>
 8008152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008156:	f003 0320 	and.w	r3, r3, #32
 800815a:	2b00      	cmp	r3, #0
 800815c:	d105      	bne.n	800816a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800815e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008162:	f003 0301 	and.w	r3, r3, #1
 8008166:	2b00      	cmp	r3, #0
 8008168:	d005      	beq.n	8008176 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816e:	f043 0208 	orr.w	r2, r3, #8
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817a:	2b00      	cmp	r3, #0
 800817c:	f000 81ed 	beq.w	800855a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008184:	f003 0320 	and.w	r3, r3, #32
 8008188:	2b00      	cmp	r3, #0
 800818a:	d008      	beq.n	800819e <HAL_UART_IRQHandler+0x14e>
 800818c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008190:	f003 0320 	and.w	r3, r3, #32
 8008194:	2b00      	cmp	r3, #0
 8008196:	d002      	beq.n	800819e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fd0a 	bl	8008bb2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	695b      	ldr	r3, [r3, #20]
 80081a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a8:	2b40      	cmp	r3, #64	; 0x40
 80081aa:	bf0c      	ite	eq
 80081ac:	2301      	moveq	r3, #1
 80081ae:	2300      	movne	r3, #0
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ba:	f003 0308 	and.w	r3, r3, #8
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d103      	bne.n	80081ca <HAL_UART_IRQHandler+0x17a>
 80081c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d04f      	beq.n	800826a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fc12 	bl	80089f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	695b      	ldr	r3, [r3, #20]
 80081d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081da:	2b40      	cmp	r3, #64	; 0x40
 80081dc:	d141      	bne.n	8008262 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	3314      	adds	r3, #20
 80081e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081ec:	e853 3f00 	ldrex	r3, [r3]
 80081f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80081f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	3314      	adds	r3, #20
 8008206:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800820a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800820e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008212:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008216:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800821a:	e841 2300 	strex	r3, r2, [r1]
 800821e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008222:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1d9      	bne.n	80081de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822e:	2b00      	cmp	r3, #0
 8008230:	d013      	beq.n	800825a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008236:	4a7d      	ldr	r2, [pc, #500]	; (800842c <HAL_UART_IRQHandler+0x3dc>)
 8008238:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823e:	4618      	mov	r0, r3
 8008240:	f7fd f90e 	bl	8005460 <HAL_DMA_Abort_IT>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d016      	beq.n	8008278 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008254:	4610      	mov	r0, r2
 8008256:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008258:	e00e      	b.n	8008278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f7f9 fb1a 	bl	8001894 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008260:	e00a      	b.n	8008278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f7f9 fb16 	bl	8001894 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008268:	e006      	b.n	8008278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f7f9 fb12 	bl	8001894 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008276:	e170      	b.n	800855a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008278:	bf00      	nop
    return;
 800827a:	e16e      	b.n	800855a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008280:	2b01      	cmp	r3, #1
 8008282:	f040 814a 	bne.w	800851a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800828a:	f003 0310 	and.w	r3, r3, #16
 800828e:	2b00      	cmp	r3, #0
 8008290:	f000 8143 	beq.w	800851a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008298:	f003 0310 	and.w	r3, r3, #16
 800829c:	2b00      	cmp	r3, #0
 800829e:	f000 813c 	beq.w	800851a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80082a2:	2300      	movs	r3, #0
 80082a4:	60bb      	str	r3, [r7, #8]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	60bb      	str	r3, [r7, #8]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	60bb      	str	r3, [r7, #8]
 80082b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	695b      	ldr	r3, [r3, #20]
 80082be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082c2:	2b40      	cmp	r3, #64	; 0x40
 80082c4:	f040 80b4 	bne.w	8008430 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80082d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f000 8140 	beq.w	800855e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80082e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80082e6:	429a      	cmp	r2, r3
 80082e8:	f080 8139 	bcs.w	800855e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80082f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f8:	69db      	ldr	r3, [r3, #28]
 80082fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082fe:	f000 8088 	beq.w	8008412 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	330c      	adds	r3, #12
 8008308:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008310:	e853 3f00 	ldrex	r3, [r3]
 8008314:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008318:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800831c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008320:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	330c      	adds	r3, #12
 800832a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800832e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008332:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008336:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800833a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800833e:	e841 2300 	strex	r3, r2, [r1]
 8008342:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008346:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1d9      	bne.n	8008302 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	3314      	adds	r3, #20
 8008354:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008358:	e853 3f00 	ldrex	r3, [r3]
 800835c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800835e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008360:	f023 0301 	bic.w	r3, r3, #1
 8008364:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	3314      	adds	r3, #20
 800836e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008372:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008376:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008378:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800837a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800837e:	e841 2300 	strex	r3, r2, [r1]
 8008382:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008384:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1e1      	bne.n	800834e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	3314      	adds	r3, #20
 8008390:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008392:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008394:	e853 3f00 	ldrex	r3, [r3]
 8008398:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800839a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800839c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	3314      	adds	r3, #20
 80083aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80083ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80083b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80083b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80083b6:	e841 2300 	strex	r3, r2, [r1]
 80083ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80083bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d1e3      	bne.n	800838a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2220      	movs	r2, #32
 80083c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	330c      	adds	r3, #12
 80083d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083da:	e853 3f00 	ldrex	r3, [r3]
 80083de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80083e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083e2:	f023 0310 	bic.w	r3, r3, #16
 80083e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	330c      	adds	r3, #12
 80083f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80083f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80083f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80083fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80083fc:	e841 2300 	strex	r3, r2, [r1]
 8008400:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008404:	2b00      	cmp	r3, #0
 8008406:	d1e3      	bne.n	80083d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840c:	4618      	mov	r0, r3
 800840e:	f7fc ffb7 	bl	8005380 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800841a:	b29b      	uxth	r3, r3
 800841c:	1ad3      	subs	r3, r2, r3
 800841e:	b29b      	uxth	r3, r3
 8008420:	4619      	mov	r1, r3
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f8c0 	bl	80085a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008428:	e099      	b.n	800855e <HAL_UART_IRQHandler+0x50e>
 800842a:	bf00      	nop
 800842c:	08008abb 	.word	0x08008abb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008438:	b29b      	uxth	r3, r3
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008444:	b29b      	uxth	r3, r3
 8008446:	2b00      	cmp	r3, #0
 8008448:	f000 808b 	beq.w	8008562 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800844c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008450:	2b00      	cmp	r3, #0
 8008452:	f000 8086 	beq.w	8008562 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	330c      	adds	r3, #12
 800845c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008460:	e853 3f00 	ldrex	r3, [r3]
 8008464:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008468:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800846c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	330c      	adds	r3, #12
 8008476:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800847a:	647a      	str	r2, [r7, #68]	; 0x44
 800847c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008480:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008482:	e841 2300 	strex	r3, r2, [r1]
 8008486:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1e3      	bne.n	8008456 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	3314      	adds	r3, #20
 8008494:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008498:	e853 3f00 	ldrex	r3, [r3]
 800849c:	623b      	str	r3, [r7, #32]
   return(result);
 800849e:	6a3b      	ldr	r3, [r7, #32]
 80084a0:	f023 0301 	bic.w	r3, r3, #1
 80084a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	3314      	adds	r3, #20
 80084ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80084b2:	633a      	str	r2, [r7, #48]	; 0x30
 80084b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084ba:	e841 2300 	strex	r3, r2, [r1]
 80084be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1e3      	bne.n	800848e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2220      	movs	r2, #32
 80084ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	330c      	adds	r3, #12
 80084da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	e853 3f00 	ldrex	r3, [r3]
 80084e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f023 0310 	bic.w	r3, r3, #16
 80084ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	330c      	adds	r3, #12
 80084f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80084f8:	61fa      	str	r2, [r7, #28]
 80084fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fc:	69b9      	ldr	r1, [r7, #24]
 80084fe:	69fa      	ldr	r2, [r7, #28]
 8008500:	e841 2300 	strex	r3, r2, [r1]
 8008504:	617b      	str	r3, [r7, #20]
   return(result);
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1e3      	bne.n	80084d4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800850c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008510:	4619      	mov	r1, r3
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f848 	bl	80085a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008518:	e023      	b.n	8008562 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800851a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800851e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008522:	2b00      	cmp	r3, #0
 8008524:	d009      	beq.n	800853a <HAL_UART_IRQHandler+0x4ea>
 8008526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800852a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800852e:	2b00      	cmp	r3, #0
 8008530:	d003      	beq.n	800853a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 fad5 	bl	8008ae2 <UART_Transmit_IT>
    return;
 8008538:	e014      	b.n	8008564 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800853a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800853e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00e      	beq.n	8008564 <HAL_UART_IRQHandler+0x514>
 8008546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800854a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800854e:	2b00      	cmp	r3, #0
 8008550:	d008      	beq.n	8008564 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fb15 	bl	8008b82 <UART_EndTransmit_IT>
    return;
 8008558:	e004      	b.n	8008564 <HAL_UART_IRQHandler+0x514>
    return;
 800855a:	bf00      	nop
 800855c:	e002      	b.n	8008564 <HAL_UART_IRQHandler+0x514>
      return;
 800855e:	bf00      	nop
 8008560:	e000      	b.n	8008564 <HAL_UART_IRQHandler+0x514>
      return;
 8008562:	bf00      	nop
  }
}
 8008564:	37e8      	adds	r7, #232	; 0xe8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop

0800856c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008574:	bf00      	nop
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008588:	bf00      	nop
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800859c:	bf00      	nop
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	460b      	mov	r3, r1
 80085b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80085b4:	bf00      	nop
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b090      	sub	sp, #64	; 0x40
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d137      	bne.n	800864c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80085dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085de:	2200      	movs	r2, #0
 80085e0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80085e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	3314      	adds	r3, #20
 80085e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ec:	e853 3f00 	ldrex	r3, [r3]
 80085f0:	623b      	str	r3, [r7, #32]
   return(result);
 80085f2:	6a3b      	ldr	r3, [r7, #32]
 80085f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80085fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	3314      	adds	r3, #20
 8008600:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008602:	633a      	str	r2, [r7, #48]	; 0x30
 8008604:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008606:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800860a:	e841 2300 	strex	r3, r2, [r1]
 800860e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1e5      	bne.n	80085e2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	330c      	adds	r3, #12
 800861c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	e853 3f00 	ldrex	r3, [r3]
 8008624:	60fb      	str	r3, [r7, #12]
   return(result);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800862c:	637b      	str	r3, [r7, #52]	; 0x34
 800862e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	330c      	adds	r3, #12
 8008634:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008636:	61fa      	str	r2, [r7, #28]
 8008638:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863a:	69b9      	ldr	r1, [r7, #24]
 800863c:	69fa      	ldr	r2, [r7, #28]
 800863e:	e841 2300 	strex	r3, r2, [r1]
 8008642:	617b      	str	r3, [r7, #20]
   return(result);
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d1e5      	bne.n	8008616 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800864a:	e002      	b.n	8008652 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800864c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800864e:	f7fa fe8f 	bl	8003370 <HAL_UART_TxCpltCallback>
}
 8008652:	bf00      	nop
 8008654:	3740      	adds	r7, #64	; 0x40
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b084      	sub	sp, #16
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008666:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f7ff ff7f 	bl	800856c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800866e:	bf00      	nop
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b09c      	sub	sp, #112	; 0x70
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008682:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800868e:	2b00      	cmp	r3, #0
 8008690:	d172      	bne.n	8008778 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008694:	2200      	movs	r2, #0
 8008696:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	330c      	adds	r3, #12
 800869e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086a2:	e853 3f00 	ldrex	r3, [r3]
 80086a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80086a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80086b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	330c      	adds	r3, #12
 80086b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80086b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80086ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80086be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80086c0:	e841 2300 	strex	r3, r2, [r1]
 80086c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80086c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d1e5      	bne.n	8008698 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	3314      	adds	r3, #20
 80086d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d6:	e853 3f00 	ldrex	r3, [r3]
 80086da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80086dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086de:	f023 0301 	bic.w	r3, r3, #1
 80086e2:	667b      	str	r3, [r7, #100]	; 0x64
 80086e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	3314      	adds	r3, #20
 80086ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80086ec:	647a      	str	r2, [r7, #68]	; 0x44
 80086ee:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80086f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086f4:	e841 2300 	strex	r3, r2, [r1]
 80086f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80086fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d1e5      	bne.n	80086cc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	3314      	adds	r3, #20
 8008706:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870a:	e853 3f00 	ldrex	r3, [r3]
 800870e:	623b      	str	r3, [r7, #32]
   return(result);
 8008710:	6a3b      	ldr	r3, [r7, #32]
 8008712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008716:	663b      	str	r3, [r7, #96]	; 0x60
 8008718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	3314      	adds	r3, #20
 800871e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008720:	633a      	str	r2, [r7, #48]	; 0x30
 8008722:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008724:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008728:	e841 2300 	strex	r3, r2, [r1]
 800872c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800872e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008730:	2b00      	cmp	r3, #0
 8008732:	d1e5      	bne.n	8008700 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008736:	2220      	movs	r2, #32
 8008738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800873c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800873e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008740:	2b01      	cmp	r3, #1
 8008742:	d119      	bne.n	8008778 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	330c      	adds	r3, #12
 800874a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	e853 3f00 	ldrex	r3, [r3]
 8008752:	60fb      	str	r3, [r7, #12]
   return(result);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f023 0310 	bic.w	r3, r3, #16
 800875a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800875c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	330c      	adds	r3, #12
 8008762:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008764:	61fa      	str	r2, [r7, #28]
 8008766:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008768:	69b9      	ldr	r1, [r7, #24]
 800876a:	69fa      	ldr	r2, [r7, #28]
 800876c:	e841 2300 	strex	r3, r2, [r1]
 8008770:	617b      	str	r3, [r7, #20]
   return(result);
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d1e5      	bne.n	8008744 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800877a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800877c:	2b01      	cmp	r3, #1
 800877e:	d106      	bne.n	800878e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008782:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008784:	4619      	mov	r1, r3
 8008786:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008788:	f7ff ff0e 	bl	80085a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800878c:	e002      	b.n	8008794 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800878e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008790:	f7ff fef6 	bl	8008580 <HAL_UART_RxCpltCallback>
}
 8008794:	bf00      	nop
 8008796:	3770      	adds	r7, #112	; 0x70
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d108      	bne.n	80087c4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80087b6:	085b      	lsrs	r3, r3, #1
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	4619      	mov	r1, r3
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	f7ff fef3 	bl	80085a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80087c2:	e002      	b.n	80087ca <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f7ff fee5 	bl	8008594 <HAL_UART_RxHalfCpltCallback>
}
 80087ca:	bf00      	nop
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b084      	sub	sp, #16
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80087da:	2300      	movs	r3, #0
 80087dc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	695b      	ldr	r3, [r3, #20]
 80087ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ee:	2b80      	cmp	r3, #128	; 0x80
 80087f0:	bf0c      	ite	eq
 80087f2:	2301      	moveq	r3, #1
 80087f4:	2300      	movne	r3, #0
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008800:	b2db      	uxtb	r3, r3
 8008802:	2b21      	cmp	r3, #33	; 0x21
 8008804:	d108      	bne.n	8008818 <UART_DMAError+0x46>
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d005      	beq.n	8008818 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	2200      	movs	r2, #0
 8008810:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008812:	68b8      	ldr	r0, [r7, #8]
 8008814:	f000 f8c6 	bl	80089a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	695b      	ldr	r3, [r3, #20]
 800881e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008822:	2b40      	cmp	r3, #64	; 0x40
 8008824:	bf0c      	ite	eq
 8008826:	2301      	moveq	r3, #1
 8008828:	2300      	movne	r3, #0
 800882a:	b2db      	uxtb	r3, r3
 800882c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008834:	b2db      	uxtb	r3, r3
 8008836:	2b22      	cmp	r3, #34	; 0x22
 8008838:	d108      	bne.n	800884c <UART_DMAError+0x7a>
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d005      	beq.n	800884c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	2200      	movs	r2, #0
 8008844:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008846:	68b8      	ldr	r0, [r7, #8]
 8008848:	f000 f8d4 	bl	80089f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008850:	f043 0210 	orr.w	r2, r3, #16
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008858:	68b8      	ldr	r0, [r7, #8]
 800885a:	f7f9 f81b 	bl	8001894 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800885e:	bf00      	nop
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
	...

08008868 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b098      	sub	sp, #96	; 0x60
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	4613      	mov	r3, r2
 8008874:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008876:	68ba      	ldr	r2, [r7, #8]
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	88fa      	ldrh	r2, [r7, #6]
 8008880:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2222      	movs	r2, #34	; 0x22
 800888c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008894:	4a40      	ldr	r2, [pc, #256]	; (8008998 <UART_Start_Receive_DMA+0x130>)
 8008896:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800889c:	4a3f      	ldr	r2, [pc, #252]	; (800899c <UART_Start_Receive_DMA+0x134>)
 800889e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a4:	4a3e      	ldr	r2, [pc, #248]	; (80089a0 <UART_Start_Receive_DMA+0x138>)
 80088a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ac:	2200      	movs	r2, #0
 80088ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80088b0:	f107 0308 	add.w	r3, r7, #8
 80088b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	3304      	adds	r3, #4
 80088c0:	4619      	mov	r1, r3
 80088c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	88fb      	ldrh	r3, [r7, #6]
 80088c8:	f7fc fd02 	bl	80052d0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80088cc:	2300      	movs	r3, #0
 80088ce:	613b      	str	r3, [r7, #16]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	613b      	str	r3, [r7, #16]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	613b      	str	r3, [r7, #16]
 80088e0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d019      	beq.n	8008926 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	330c      	adds	r3, #12
 80088f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088fc:	e853 3f00 	ldrex	r3, [r3]
 8008900:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008908:	65bb      	str	r3, [r7, #88]	; 0x58
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	330c      	adds	r3, #12
 8008910:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008912:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008914:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008916:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008918:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800891a:	e841 2300 	strex	r3, r2, [r1]
 800891e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008922:	2b00      	cmp	r3, #0
 8008924:	d1e5      	bne.n	80088f2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	3314      	adds	r3, #20
 800892c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008930:	e853 3f00 	ldrex	r3, [r3]
 8008934:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008938:	f043 0301 	orr.w	r3, r3, #1
 800893c:	657b      	str	r3, [r7, #84]	; 0x54
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	3314      	adds	r3, #20
 8008944:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008946:	63ba      	str	r2, [r7, #56]	; 0x38
 8008948:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800894c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800894e:	e841 2300 	strex	r3, r2, [r1]
 8008952:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1e5      	bne.n	8008926 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	3314      	adds	r3, #20
 8008960:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	e853 3f00 	ldrex	r3, [r3]
 8008968:	617b      	str	r3, [r7, #20]
   return(result);
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008970:	653b      	str	r3, [r7, #80]	; 0x50
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	3314      	adds	r3, #20
 8008978:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800897a:	627a      	str	r2, [r7, #36]	; 0x24
 800897c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897e:	6a39      	ldr	r1, [r7, #32]
 8008980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008982:	e841 2300 	strex	r3, r2, [r1]
 8008986:	61fb      	str	r3, [r7, #28]
   return(result);
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1e5      	bne.n	800895a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	3760      	adds	r7, #96	; 0x60
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	08008677 	.word	0x08008677
 800899c:	0800879d 	.word	0x0800879d
 80089a0:	080087d3 	.word	0x080087d3

080089a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b089      	sub	sp, #36	; 0x24
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	330c      	adds	r3, #12
 80089b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	e853 3f00 	ldrex	r3, [r3]
 80089ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80089c2:	61fb      	str	r3, [r7, #28]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	330c      	adds	r3, #12
 80089ca:	69fa      	ldr	r2, [r7, #28]
 80089cc:	61ba      	str	r2, [r7, #24]
 80089ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d0:	6979      	ldr	r1, [r7, #20]
 80089d2:	69ba      	ldr	r2, [r7, #24]
 80089d4:	e841 2300 	strex	r3, r2, [r1]
 80089d8:	613b      	str	r3, [r7, #16]
   return(result);
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d1e5      	bne.n	80089ac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2220      	movs	r2, #32
 80089e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80089e8:	bf00      	nop
 80089ea:	3724      	adds	r7, #36	; 0x24
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b095      	sub	sp, #84	; 0x54
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	330c      	adds	r3, #12
 8008a02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a06:	e853 3f00 	ldrex	r3, [r3]
 8008a0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	330c      	adds	r3, #12
 8008a1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a1c:	643a      	str	r2, [r7, #64]	; 0x40
 8008a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a24:	e841 2300 	strex	r3, r2, [r1]
 8008a28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1e5      	bne.n	80089fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	3314      	adds	r3, #20
 8008a36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a38:	6a3b      	ldr	r3, [r7, #32]
 8008a3a:	e853 3f00 	ldrex	r3, [r3]
 8008a3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	f023 0301 	bic.w	r3, r3, #1
 8008a46:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	3314      	adds	r3, #20
 8008a4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a58:	e841 2300 	strex	r3, r2, [r1]
 8008a5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d1e5      	bne.n	8008a30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d119      	bne.n	8008aa0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	330c      	adds	r3, #12
 8008a72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	e853 3f00 	ldrex	r3, [r3]
 8008a7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	f023 0310 	bic.w	r3, r3, #16
 8008a82:	647b      	str	r3, [r7, #68]	; 0x44
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	330c      	adds	r3, #12
 8008a8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a8c:	61ba      	str	r2, [r7, #24]
 8008a8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a90:	6979      	ldr	r1, [r7, #20]
 8008a92:	69ba      	ldr	r2, [r7, #24]
 8008a94:	e841 2300 	strex	r3, r2, [r1]
 8008a98:	613b      	str	r3, [r7, #16]
   return(result);
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d1e5      	bne.n	8008a6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2220      	movs	r2, #32
 8008aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008aae:	bf00      	nop
 8008ab0:	3754      	adds	r7, #84	; 0x54
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr

08008aba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b084      	sub	sp, #16
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2200      	movs	r2, #0
 8008acc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ad4:	68f8      	ldr	r0, [r7, #12]
 8008ad6:	f7f8 fedd 	bl	8001894 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ada:	bf00      	nop
 8008adc:	3710      	adds	r7, #16
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008ae2:	b480      	push	{r7}
 8008ae4:	b085      	sub	sp, #20
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	2b21      	cmp	r3, #33	; 0x21
 8008af4:	d13e      	bne.n	8008b74 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008afe:	d114      	bne.n	8008b2a <UART_Transmit_IT+0x48>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	691b      	ldr	r3, [r3, #16]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d110      	bne.n	8008b2a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6a1b      	ldr	r3, [r3, #32]
 8008b0c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	881b      	ldrh	r3, [r3, #0]
 8008b12:	461a      	mov	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b1c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	1c9a      	adds	r2, r3, #2
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	621a      	str	r2, [r3, #32]
 8008b28:	e008      	b.n	8008b3c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a1b      	ldr	r3, [r3, #32]
 8008b2e:	1c59      	adds	r1, r3, #1
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	6211      	str	r1, [r2, #32]
 8008b34:	781a      	ldrb	r2, [r3, #0]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	3b01      	subs	r3, #1
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	4619      	mov	r1, r3
 8008b4a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d10f      	bne.n	8008b70 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68da      	ldr	r2, [r3, #12]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b5e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	68da      	ldr	r2, [r3, #12]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b6e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008b70:	2300      	movs	r3, #0
 8008b72:	e000      	b.n	8008b76 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008b74:	2302      	movs	r3, #2
  }
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3714      	adds	r7, #20
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr

08008b82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b082      	sub	sp, #8
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68da      	ldr	r2, [r3, #12]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2220      	movs	r2, #32
 8008b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f7fa fbe4 	bl	8003370 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3708      	adds	r7, #8
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b08c      	sub	sp, #48	; 0x30
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	2b22      	cmp	r3, #34	; 0x22
 8008bc4:	f040 80ab 	bne.w	8008d1e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bd0:	d117      	bne.n	8008c02 <UART_Receive_IT+0x50>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d113      	bne.n	8008c02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bfa:	1c9a      	adds	r2, r3, #2
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	629a      	str	r2, [r3, #40]	; 0x28
 8008c00:	e026      	b.n	8008c50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c06:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c14:	d007      	beq.n	8008c26 <UART_Receive_IT+0x74>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d10a      	bne.n	8008c34 <UART_Receive_IT+0x82>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	691b      	ldr	r3, [r3, #16]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d106      	bne.n	8008c34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	b2da      	uxtb	r2, r3
 8008c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c30:	701a      	strb	r2, [r3, #0]
 8008c32:	e008      	b.n	8008c46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c40:	b2da      	uxtb	r2, r3
 8008c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c4a:	1c5a      	adds	r2, r3, #1
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	3b01      	subs	r3, #1
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d15a      	bne.n	8008d1a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	68da      	ldr	r2, [r3, #12]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f022 0220 	bic.w	r2, r2, #32
 8008c72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	68da      	ldr	r2, [r3, #12]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	695a      	ldr	r2, [r3, #20]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f022 0201 	bic.w	r2, r2, #1
 8008c92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2220      	movs	r2, #32
 8008c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d135      	bne.n	8008d10 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	330c      	adds	r3, #12
 8008cb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	e853 3f00 	ldrex	r3, [r3]
 8008cb8:	613b      	str	r3, [r7, #16]
   return(result);
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	f023 0310 	bic.w	r3, r3, #16
 8008cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	330c      	adds	r3, #12
 8008cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cca:	623a      	str	r2, [r7, #32]
 8008ccc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cce:	69f9      	ldr	r1, [r7, #28]
 8008cd0:	6a3a      	ldr	r2, [r7, #32]
 8008cd2:	e841 2300 	strex	r3, r2, [r1]
 8008cd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1e5      	bne.n	8008caa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f003 0310 	and.w	r3, r3, #16
 8008ce8:	2b10      	cmp	r3, #16
 8008cea:	d10a      	bne.n	8008d02 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008cec:	2300      	movs	r3, #0
 8008cee:	60fb      	str	r3, [r7, #12]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	60fb      	str	r3, [r7, #12]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	60fb      	str	r3, [r7, #12]
 8008d00:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008d06:	4619      	mov	r1, r3
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f7ff fc4d 	bl	80085a8 <HAL_UARTEx_RxEventCallback>
 8008d0e:	e002      	b.n	8008d16 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f7ff fc35 	bl	8008580 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008d16:	2300      	movs	r3, #0
 8008d18:	e002      	b.n	8008d20 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	e000      	b.n	8008d20 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008d1e:	2302      	movs	r3, #2
  }
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3730      	adds	r7, #48	; 0x30
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d2c:	b0c0      	sub	sp, #256	; 0x100
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	691b      	ldr	r3, [r3, #16]
 8008d3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d44:	68d9      	ldr	r1, [r3, #12]
 8008d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	ea40 0301 	orr.w	r3, r0, r1
 8008d50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d56:	689a      	ldr	r2, [r3, #8]
 8008d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d5c:	691b      	ldr	r3, [r3, #16]
 8008d5e:	431a      	orrs	r2, r3
 8008d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d64:	695b      	ldr	r3, [r3, #20]
 8008d66:	431a      	orrs	r2, r3
 8008d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d6c:	69db      	ldr	r3, [r3, #28]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008d80:	f021 010c 	bic.w	r1, r1, #12
 8008d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008d8e:	430b      	orrs	r3, r1
 8008d90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	695b      	ldr	r3, [r3, #20]
 8008d9a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008da2:	6999      	ldr	r1, [r3, #24]
 8008da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	ea40 0301 	orr.w	r3, r0, r1
 8008dae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	4b8f      	ldr	r3, [pc, #572]	; (8008ff4 <UART_SetConfig+0x2cc>)
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d005      	beq.n	8008dc8 <UART_SetConfig+0xa0>
 8008dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	4b8d      	ldr	r3, [pc, #564]	; (8008ff8 <UART_SetConfig+0x2d0>)
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d104      	bne.n	8008dd2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008dc8:	f7fd f97e 	bl	80060c8 <HAL_RCC_GetPCLK2Freq>
 8008dcc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008dd0:	e003      	b.n	8008dda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008dd2:	f7fd f965 	bl	80060a0 <HAL_RCC_GetPCLK1Freq>
 8008dd6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dde:	69db      	ldr	r3, [r3, #28]
 8008de0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008de4:	f040 810c 	bne.w	8009000 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008de8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dec:	2200      	movs	r2, #0
 8008dee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008df2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008df6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008dfa:	4622      	mov	r2, r4
 8008dfc:	462b      	mov	r3, r5
 8008dfe:	1891      	adds	r1, r2, r2
 8008e00:	65b9      	str	r1, [r7, #88]	; 0x58
 8008e02:	415b      	adcs	r3, r3
 8008e04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008e0a:	4621      	mov	r1, r4
 8008e0c:	eb12 0801 	adds.w	r8, r2, r1
 8008e10:	4629      	mov	r1, r5
 8008e12:	eb43 0901 	adc.w	r9, r3, r1
 8008e16:	f04f 0200 	mov.w	r2, #0
 8008e1a:	f04f 0300 	mov.w	r3, #0
 8008e1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008e22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008e26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e2a:	4690      	mov	r8, r2
 8008e2c:	4699      	mov	r9, r3
 8008e2e:	4623      	mov	r3, r4
 8008e30:	eb18 0303 	adds.w	r3, r8, r3
 8008e34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008e38:	462b      	mov	r3, r5
 8008e3a:	eb49 0303 	adc.w	r3, r9, r3
 8008e3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008e4e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008e52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008e56:	460b      	mov	r3, r1
 8008e58:	18db      	adds	r3, r3, r3
 8008e5a:	653b      	str	r3, [r7, #80]	; 0x50
 8008e5c:	4613      	mov	r3, r2
 8008e5e:	eb42 0303 	adc.w	r3, r2, r3
 8008e62:	657b      	str	r3, [r7, #84]	; 0x54
 8008e64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008e68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008e6c:	f7f7 fe4a 	bl	8000b04 <__aeabi_uldivmod>
 8008e70:	4602      	mov	r2, r0
 8008e72:	460b      	mov	r3, r1
 8008e74:	4b61      	ldr	r3, [pc, #388]	; (8008ffc <UART_SetConfig+0x2d4>)
 8008e76:	fba3 2302 	umull	r2, r3, r3, r2
 8008e7a:	095b      	lsrs	r3, r3, #5
 8008e7c:	011c      	lsls	r4, r3, #4
 8008e7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e82:	2200      	movs	r2, #0
 8008e84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e88:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008e8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008e90:	4642      	mov	r2, r8
 8008e92:	464b      	mov	r3, r9
 8008e94:	1891      	adds	r1, r2, r2
 8008e96:	64b9      	str	r1, [r7, #72]	; 0x48
 8008e98:	415b      	adcs	r3, r3
 8008e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008ea0:	4641      	mov	r1, r8
 8008ea2:	eb12 0a01 	adds.w	sl, r2, r1
 8008ea6:	4649      	mov	r1, r9
 8008ea8:	eb43 0b01 	adc.w	fp, r3, r1
 8008eac:	f04f 0200 	mov.w	r2, #0
 8008eb0:	f04f 0300 	mov.w	r3, #0
 8008eb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008eb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008ebc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ec0:	4692      	mov	sl, r2
 8008ec2:	469b      	mov	fp, r3
 8008ec4:	4643      	mov	r3, r8
 8008ec6:	eb1a 0303 	adds.w	r3, sl, r3
 8008eca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ece:	464b      	mov	r3, r9
 8008ed0:	eb4b 0303 	adc.w	r3, fp, r3
 8008ed4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ee4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008ee8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008eec:	460b      	mov	r3, r1
 8008eee:	18db      	adds	r3, r3, r3
 8008ef0:	643b      	str	r3, [r7, #64]	; 0x40
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	eb42 0303 	adc.w	r3, r2, r3
 8008ef8:	647b      	str	r3, [r7, #68]	; 0x44
 8008efa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008efe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008f02:	f7f7 fdff 	bl	8000b04 <__aeabi_uldivmod>
 8008f06:	4602      	mov	r2, r0
 8008f08:	460b      	mov	r3, r1
 8008f0a:	4611      	mov	r1, r2
 8008f0c:	4b3b      	ldr	r3, [pc, #236]	; (8008ffc <UART_SetConfig+0x2d4>)
 8008f0e:	fba3 2301 	umull	r2, r3, r3, r1
 8008f12:	095b      	lsrs	r3, r3, #5
 8008f14:	2264      	movs	r2, #100	; 0x64
 8008f16:	fb02 f303 	mul.w	r3, r2, r3
 8008f1a:	1acb      	subs	r3, r1, r3
 8008f1c:	00db      	lsls	r3, r3, #3
 8008f1e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008f22:	4b36      	ldr	r3, [pc, #216]	; (8008ffc <UART_SetConfig+0x2d4>)
 8008f24:	fba3 2302 	umull	r2, r3, r3, r2
 8008f28:	095b      	lsrs	r3, r3, #5
 8008f2a:	005b      	lsls	r3, r3, #1
 8008f2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008f30:	441c      	add	r4, r3
 8008f32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f36:	2200      	movs	r2, #0
 8008f38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008f3c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008f40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008f44:	4642      	mov	r2, r8
 8008f46:	464b      	mov	r3, r9
 8008f48:	1891      	adds	r1, r2, r2
 8008f4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8008f4c:	415b      	adcs	r3, r3
 8008f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008f54:	4641      	mov	r1, r8
 8008f56:	1851      	adds	r1, r2, r1
 8008f58:	6339      	str	r1, [r7, #48]	; 0x30
 8008f5a:	4649      	mov	r1, r9
 8008f5c:	414b      	adcs	r3, r1
 8008f5e:	637b      	str	r3, [r7, #52]	; 0x34
 8008f60:	f04f 0200 	mov.w	r2, #0
 8008f64:	f04f 0300 	mov.w	r3, #0
 8008f68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008f6c:	4659      	mov	r1, fp
 8008f6e:	00cb      	lsls	r3, r1, #3
 8008f70:	4651      	mov	r1, sl
 8008f72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f76:	4651      	mov	r1, sl
 8008f78:	00ca      	lsls	r2, r1, #3
 8008f7a:	4610      	mov	r0, r2
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	4603      	mov	r3, r0
 8008f80:	4642      	mov	r2, r8
 8008f82:	189b      	adds	r3, r3, r2
 8008f84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f88:	464b      	mov	r3, r9
 8008f8a:	460a      	mov	r2, r1
 8008f8c:	eb42 0303 	adc.w	r3, r2, r3
 8008f90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008fa0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008fa4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008fa8:	460b      	mov	r3, r1
 8008faa:	18db      	adds	r3, r3, r3
 8008fac:	62bb      	str	r3, [r7, #40]	; 0x28
 8008fae:	4613      	mov	r3, r2
 8008fb0:	eb42 0303 	adc.w	r3, r2, r3
 8008fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008fba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008fbe:	f7f7 fda1 	bl	8000b04 <__aeabi_uldivmod>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	4b0d      	ldr	r3, [pc, #52]	; (8008ffc <UART_SetConfig+0x2d4>)
 8008fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8008fcc:	095b      	lsrs	r3, r3, #5
 8008fce:	2164      	movs	r1, #100	; 0x64
 8008fd0:	fb01 f303 	mul.w	r3, r1, r3
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	00db      	lsls	r3, r3, #3
 8008fd8:	3332      	adds	r3, #50	; 0x32
 8008fda:	4a08      	ldr	r2, [pc, #32]	; (8008ffc <UART_SetConfig+0x2d4>)
 8008fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8008fe0:	095b      	lsrs	r3, r3, #5
 8008fe2:	f003 0207 	and.w	r2, r3, #7
 8008fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4422      	add	r2, r4
 8008fee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008ff0:	e105      	b.n	80091fe <UART_SetConfig+0x4d6>
 8008ff2:	bf00      	nop
 8008ff4:	40011000 	.word	0x40011000
 8008ff8:	40011400 	.word	0x40011400
 8008ffc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009000:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009004:	2200      	movs	r2, #0
 8009006:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800900a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800900e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009012:	4642      	mov	r2, r8
 8009014:	464b      	mov	r3, r9
 8009016:	1891      	adds	r1, r2, r2
 8009018:	6239      	str	r1, [r7, #32]
 800901a:	415b      	adcs	r3, r3
 800901c:	627b      	str	r3, [r7, #36]	; 0x24
 800901e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009022:	4641      	mov	r1, r8
 8009024:	1854      	adds	r4, r2, r1
 8009026:	4649      	mov	r1, r9
 8009028:	eb43 0501 	adc.w	r5, r3, r1
 800902c:	f04f 0200 	mov.w	r2, #0
 8009030:	f04f 0300 	mov.w	r3, #0
 8009034:	00eb      	lsls	r3, r5, #3
 8009036:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800903a:	00e2      	lsls	r2, r4, #3
 800903c:	4614      	mov	r4, r2
 800903e:	461d      	mov	r5, r3
 8009040:	4643      	mov	r3, r8
 8009042:	18e3      	adds	r3, r4, r3
 8009044:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009048:	464b      	mov	r3, r9
 800904a:	eb45 0303 	adc.w	r3, r5, r3
 800904e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	2200      	movs	r2, #0
 800905a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800905e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009062:	f04f 0200 	mov.w	r2, #0
 8009066:	f04f 0300 	mov.w	r3, #0
 800906a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800906e:	4629      	mov	r1, r5
 8009070:	008b      	lsls	r3, r1, #2
 8009072:	4621      	mov	r1, r4
 8009074:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009078:	4621      	mov	r1, r4
 800907a:	008a      	lsls	r2, r1, #2
 800907c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009080:	f7f7 fd40 	bl	8000b04 <__aeabi_uldivmod>
 8009084:	4602      	mov	r2, r0
 8009086:	460b      	mov	r3, r1
 8009088:	4b60      	ldr	r3, [pc, #384]	; (800920c <UART_SetConfig+0x4e4>)
 800908a:	fba3 2302 	umull	r2, r3, r3, r2
 800908e:	095b      	lsrs	r3, r3, #5
 8009090:	011c      	lsls	r4, r3, #4
 8009092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009096:	2200      	movs	r2, #0
 8009098:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800909c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80090a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80090a4:	4642      	mov	r2, r8
 80090a6:	464b      	mov	r3, r9
 80090a8:	1891      	adds	r1, r2, r2
 80090aa:	61b9      	str	r1, [r7, #24]
 80090ac:	415b      	adcs	r3, r3
 80090ae:	61fb      	str	r3, [r7, #28]
 80090b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80090b4:	4641      	mov	r1, r8
 80090b6:	1851      	adds	r1, r2, r1
 80090b8:	6139      	str	r1, [r7, #16]
 80090ba:	4649      	mov	r1, r9
 80090bc:	414b      	adcs	r3, r1
 80090be:	617b      	str	r3, [r7, #20]
 80090c0:	f04f 0200 	mov.w	r2, #0
 80090c4:	f04f 0300 	mov.w	r3, #0
 80090c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80090cc:	4659      	mov	r1, fp
 80090ce:	00cb      	lsls	r3, r1, #3
 80090d0:	4651      	mov	r1, sl
 80090d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090d6:	4651      	mov	r1, sl
 80090d8:	00ca      	lsls	r2, r1, #3
 80090da:	4610      	mov	r0, r2
 80090dc:	4619      	mov	r1, r3
 80090de:	4603      	mov	r3, r0
 80090e0:	4642      	mov	r2, r8
 80090e2:	189b      	adds	r3, r3, r2
 80090e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80090e8:	464b      	mov	r3, r9
 80090ea:	460a      	mov	r2, r1
 80090ec:	eb42 0303 	adc.w	r3, r2, r3
 80090f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80090f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80090fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009100:	f04f 0200 	mov.w	r2, #0
 8009104:	f04f 0300 	mov.w	r3, #0
 8009108:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800910c:	4649      	mov	r1, r9
 800910e:	008b      	lsls	r3, r1, #2
 8009110:	4641      	mov	r1, r8
 8009112:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009116:	4641      	mov	r1, r8
 8009118:	008a      	lsls	r2, r1, #2
 800911a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800911e:	f7f7 fcf1 	bl	8000b04 <__aeabi_uldivmod>
 8009122:	4602      	mov	r2, r0
 8009124:	460b      	mov	r3, r1
 8009126:	4b39      	ldr	r3, [pc, #228]	; (800920c <UART_SetConfig+0x4e4>)
 8009128:	fba3 1302 	umull	r1, r3, r3, r2
 800912c:	095b      	lsrs	r3, r3, #5
 800912e:	2164      	movs	r1, #100	; 0x64
 8009130:	fb01 f303 	mul.w	r3, r1, r3
 8009134:	1ad3      	subs	r3, r2, r3
 8009136:	011b      	lsls	r3, r3, #4
 8009138:	3332      	adds	r3, #50	; 0x32
 800913a:	4a34      	ldr	r2, [pc, #208]	; (800920c <UART_SetConfig+0x4e4>)
 800913c:	fba2 2303 	umull	r2, r3, r2, r3
 8009140:	095b      	lsrs	r3, r3, #5
 8009142:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009146:	441c      	add	r4, r3
 8009148:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800914c:	2200      	movs	r2, #0
 800914e:	673b      	str	r3, [r7, #112]	; 0x70
 8009150:	677a      	str	r2, [r7, #116]	; 0x74
 8009152:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009156:	4642      	mov	r2, r8
 8009158:	464b      	mov	r3, r9
 800915a:	1891      	adds	r1, r2, r2
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	415b      	adcs	r3, r3
 8009160:	60fb      	str	r3, [r7, #12]
 8009162:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009166:	4641      	mov	r1, r8
 8009168:	1851      	adds	r1, r2, r1
 800916a:	6039      	str	r1, [r7, #0]
 800916c:	4649      	mov	r1, r9
 800916e:	414b      	adcs	r3, r1
 8009170:	607b      	str	r3, [r7, #4]
 8009172:	f04f 0200 	mov.w	r2, #0
 8009176:	f04f 0300 	mov.w	r3, #0
 800917a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800917e:	4659      	mov	r1, fp
 8009180:	00cb      	lsls	r3, r1, #3
 8009182:	4651      	mov	r1, sl
 8009184:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009188:	4651      	mov	r1, sl
 800918a:	00ca      	lsls	r2, r1, #3
 800918c:	4610      	mov	r0, r2
 800918e:	4619      	mov	r1, r3
 8009190:	4603      	mov	r3, r0
 8009192:	4642      	mov	r2, r8
 8009194:	189b      	adds	r3, r3, r2
 8009196:	66bb      	str	r3, [r7, #104]	; 0x68
 8009198:	464b      	mov	r3, r9
 800919a:	460a      	mov	r2, r1
 800919c:	eb42 0303 	adc.w	r3, r2, r3
 80091a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80091a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	663b      	str	r3, [r7, #96]	; 0x60
 80091ac:	667a      	str	r2, [r7, #100]	; 0x64
 80091ae:	f04f 0200 	mov.w	r2, #0
 80091b2:	f04f 0300 	mov.w	r3, #0
 80091b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80091ba:	4649      	mov	r1, r9
 80091bc:	008b      	lsls	r3, r1, #2
 80091be:	4641      	mov	r1, r8
 80091c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091c4:	4641      	mov	r1, r8
 80091c6:	008a      	lsls	r2, r1, #2
 80091c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80091cc:	f7f7 fc9a 	bl	8000b04 <__aeabi_uldivmod>
 80091d0:	4602      	mov	r2, r0
 80091d2:	460b      	mov	r3, r1
 80091d4:	4b0d      	ldr	r3, [pc, #52]	; (800920c <UART_SetConfig+0x4e4>)
 80091d6:	fba3 1302 	umull	r1, r3, r3, r2
 80091da:	095b      	lsrs	r3, r3, #5
 80091dc:	2164      	movs	r1, #100	; 0x64
 80091de:	fb01 f303 	mul.w	r3, r1, r3
 80091e2:	1ad3      	subs	r3, r2, r3
 80091e4:	011b      	lsls	r3, r3, #4
 80091e6:	3332      	adds	r3, #50	; 0x32
 80091e8:	4a08      	ldr	r2, [pc, #32]	; (800920c <UART_SetConfig+0x4e4>)
 80091ea:	fba2 2303 	umull	r2, r3, r2, r3
 80091ee:	095b      	lsrs	r3, r3, #5
 80091f0:	f003 020f 	and.w	r2, r3, #15
 80091f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4422      	add	r2, r4
 80091fc:	609a      	str	r2, [r3, #8]
}
 80091fe:	bf00      	nop
 8009200:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009204:	46bd      	mov	sp, r7
 8009206:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800920a:	bf00      	nop
 800920c:	51eb851f 	.word	0x51eb851f

08009210 <__cxa_pure_virtual>:
 8009210:	b508      	push	{r3, lr}
 8009212:	f000 f80d 	bl	8009230 <_ZSt9terminatev>

08009216 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8009216:	b508      	push	{r3, lr}
 8009218:	4780      	blx	r0
 800921a:	f000 f80e 	bl	800923a <abort>
	...

08009220 <_ZSt13get_terminatev>:
 8009220:	4b02      	ldr	r3, [pc, #8]	; (800922c <_ZSt13get_terminatev+0xc>)
 8009222:	6818      	ldr	r0, [r3, #0]
 8009224:	f3bf 8f5b 	dmb	ish
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop
 800922c:	2000000c 	.word	0x2000000c

08009230 <_ZSt9terminatev>:
 8009230:	b508      	push	{r3, lr}
 8009232:	f7ff fff5 	bl	8009220 <_ZSt13get_terminatev>
 8009236:	f7ff ffee 	bl	8009216 <_ZN10__cxxabiv111__terminateEPFvvE>

0800923a <abort>:
 800923a:	b508      	push	{r3, lr}
 800923c:	2006      	movs	r0, #6
 800923e:	f000 f873 	bl	8009328 <raise>
 8009242:	2001      	movs	r0, #1
 8009244:	f7fb f834 	bl	80042b0 <_exit>

08009248 <__errno>:
 8009248:	4b01      	ldr	r3, [pc, #4]	; (8009250 <__errno+0x8>)
 800924a:	6818      	ldr	r0, [r3, #0]
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop
 8009250:	20000010 	.word	0x20000010

08009254 <__libc_init_array>:
 8009254:	b570      	push	{r4, r5, r6, lr}
 8009256:	4d0d      	ldr	r5, [pc, #52]	; (800928c <__libc_init_array+0x38>)
 8009258:	4c0d      	ldr	r4, [pc, #52]	; (8009290 <__libc_init_array+0x3c>)
 800925a:	1b64      	subs	r4, r4, r5
 800925c:	10a4      	asrs	r4, r4, #2
 800925e:	2600      	movs	r6, #0
 8009260:	42a6      	cmp	r6, r4
 8009262:	d109      	bne.n	8009278 <__libc_init_array+0x24>
 8009264:	4d0b      	ldr	r5, [pc, #44]	; (8009294 <__libc_init_array+0x40>)
 8009266:	4c0c      	ldr	r4, [pc, #48]	; (8009298 <__libc_init_array+0x44>)
 8009268:	f000 f9b0 	bl	80095cc <_init>
 800926c:	1b64      	subs	r4, r4, r5
 800926e:	10a4      	asrs	r4, r4, #2
 8009270:	2600      	movs	r6, #0
 8009272:	42a6      	cmp	r6, r4
 8009274:	d105      	bne.n	8009282 <__libc_init_array+0x2e>
 8009276:	bd70      	pop	{r4, r5, r6, pc}
 8009278:	f855 3b04 	ldr.w	r3, [r5], #4
 800927c:	4798      	blx	r3
 800927e:	3601      	adds	r6, #1
 8009280:	e7ee      	b.n	8009260 <__libc_init_array+0xc>
 8009282:	f855 3b04 	ldr.w	r3, [r5], #4
 8009286:	4798      	blx	r3
 8009288:	3601      	adds	r6, #1
 800928a:	e7f2      	b.n	8009272 <__libc_init_array+0x1e>
 800928c:	080098b8 	.word	0x080098b8
 8009290:	080098b8 	.word	0x080098b8
 8009294:	080098b8 	.word	0x080098b8
 8009298:	080098c0 	.word	0x080098c0

0800929c <memcpy>:
 800929c:	440a      	add	r2, r1
 800929e:	4291      	cmp	r1, r2
 80092a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80092a4:	d100      	bne.n	80092a8 <memcpy+0xc>
 80092a6:	4770      	bx	lr
 80092a8:	b510      	push	{r4, lr}
 80092aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092b2:	4291      	cmp	r1, r2
 80092b4:	d1f9      	bne.n	80092aa <memcpy+0xe>
 80092b6:	bd10      	pop	{r4, pc}

080092b8 <memset>:
 80092b8:	4402      	add	r2, r0
 80092ba:	4603      	mov	r3, r0
 80092bc:	4293      	cmp	r3, r2
 80092be:	d100      	bne.n	80092c2 <memset+0xa>
 80092c0:	4770      	bx	lr
 80092c2:	f803 1b01 	strb.w	r1, [r3], #1
 80092c6:	e7f9      	b.n	80092bc <memset+0x4>

080092c8 <realloc>:
 80092c8:	4b02      	ldr	r3, [pc, #8]	; (80092d4 <realloc+0xc>)
 80092ca:	460a      	mov	r2, r1
 80092cc:	4601      	mov	r1, r0
 80092ce:	6818      	ldr	r0, [r3, #0]
 80092d0:	f000 b8da 	b.w	8009488 <_realloc_r>
 80092d4:	20000010 	.word	0x20000010

080092d8 <_raise_r>:
 80092d8:	291f      	cmp	r1, #31
 80092da:	b538      	push	{r3, r4, r5, lr}
 80092dc:	4604      	mov	r4, r0
 80092de:	460d      	mov	r5, r1
 80092e0:	d904      	bls.n	80092ec <_raise_r+0x14>
 80092e2:	2316      	movs	r3, #22
 80092e4:	6003      	str	r3, [r0, #0]
 80092e6:	f04f 30ff 	mov.w	r0, #4294967295
 80092ea:	bd38      	pop	{r3, r4, r5, pc}
 80092ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80092ee:	b112      	cbz	r2, 80092f6 <_raise_r+0x1e>
 80092f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80092f4:	b94b      	cbnz	r3, 800930a <_raise_r+0x32>
 80092f6:	4620      	mov	r0, r4
 80092f8:	f000 f830 	bl	800935c <_getpid_r>
 80092fc:	462a      	mov	r2, r5
 80092fe:	4601      	mov	r1, r0
 8009300:	4620      	mov	r0, r4
 8009302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009306:	f000 b817 	b.w	8009338 <_kill_r>
 800930a:	2b01      	cmp	r3, #1
 800930c:	d00a      	beq.n	8009324 <_raise_r+0x4c>
 800930e:	1c59      	adds	r1, r3, #1
 8009310:	d103      	bne.n	800931a <_raise_r+0x42>
 8009312:	2316      	movs	r3, #22
 8009314:	6003      	str	r3, [r0, #0]
 8009316:	2001      	movs	r0, #1
 8009318:	e7e7      	b.n	80092ea <_raise_r+0x12>
 800931a:	2400      	movs	r4, #0
 800931c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009320:	4628      	mov	r0, r5
 8009322:	4798      	blx	r3
 8009324:	2000      	movs	r0, #0
 8009326:	e7e0      	b.n	80092ea <_raise_r+0x12>

08009328 <raise>:
 8009328:	4b02      	ldr	r3, [pc, #8]	; (8009334 <raise+0xc>)
 800932a:	4601      	mov	r1, r0
 800932c:	6818      	ldr	r0, [r3, #0]
 800932e:	f7ff bfd3 	b.w	80092d8 <_raise_r>
 8009332:	bf00      	nop
 8009334:	20000010 	.word	0x20000010

08009338 <_kill_r>:
 8009338:	b538      	push	{r3, r4, r5, lr}
 800933a:	4d07      	ldr	r5, [pc, #28]	; (8009358 <_kill_r+0x20>)
 800933c:	2300      	movs	r3, #0
 800933e:	4604      	mov	r4, r0
 8009340:	4608      	mov	r0, r1
 8009342:	4611      	mov	r1, r2
 8009344:	602b      	str	r3, [r5, #0]
 8009346:	f7fa ffa3 	bl	8004290 <_kill>
 800934a:	1c43      	adds	r3, r0, #1
 800934c:	d102      	bne.n	8009354 <_kill_r+0x1c>
 800934e:	682b      	ldr	r3, [r5, #0]
 8009350:	b103      	cbz	r3, 8009354 <_kill_r+0x1c>
 8009352:	6023      	str	r3, [r4, #0]
 8009354:	bd38      	pop	{r3, r4, r5, pc}
 8009356:	bf00      	nop
 8009358:	2000185c 	.word	0x2000185c

0800935c <_getpid_r>:
 800935c:	f7fa bf90 	b.w	8004280 <_getpid>

08009360 <sbrk_aligned>:
 8009360:	b570      	push	{r4, r5, r6, lr}
 8009362:	4e0e      	ldr	r6, [pc, #56]	; (800939c <sbrk_aligned+0x3c>)
 8009364:	460c      	mov	r4, r1
 8009366:	6831      	ldr	r1, [r6, #0]
 8009368:	4605      	mov	r5, r0
 800936a:	b911      	cbnz	r1, 8009372 <sbrk_aligned+0x12>
 800936c:	f000 f8bc 	bl	80094e8 <_sbrk_r>
 8009370:	6030      	str	r0, [r6, #0]
 8009372:	4621      	mov	r1, r4
 8009374:	4628      	mov	r0, r5
 8009376:	f000 f8b7 	bl	80094e8 <_sbrk_r>
 800937a:	1c43      	adds	r3, r0, #1
 800937c:	d00a      	beq.n	8009394 <sbrk_aligned+0x34>
 800937e:	1cc4      	adds	r4, r0, #3
 8009380:	f024 0403 	bic.w	r4, r4, #3
 8009384:	42a0      	cmp	r0, r4
 8009386:	d007      	beq.n	8009398 <sbrk_aligned+0x38>
 8009388:	1a21      	subs	r1, r4, r0
 800938a:	4628      	mov	r0, r5
 800938c:	f000 f8ac 	bl	80094e8 <_sbrk_r>
 8009390:	3001      	adds	r0, #1
 8009392:	d101      	bne.n	8009398 <sbrk_aligned+0x38>
 8009394:	f04f 34ff 	mov.w	r4, #4294967295
 8009398:	4620      	mov	r0, r4
 800939a:	bd70      	pop	{r4, r5, r6, pc}
 800939c:	20001858 	.word	0x20001858

080093a0 <_malloc_r>:
 80093a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093a4:	1ccd      	adds	r5, r1, #3
 80093a6:	f025 0503 	bic.w	r5, r5, #3
 80093aa:	3508      	adds	r5, #8
 80093ac:	2d0c      	cmp	r5, #12
 80093ae:	bf38      	it	cc
 80093b0:	250c      	movcc	r5, #12
 80093b2:	2d00      	cmp	r5, #0
 80093b4:	4607      	mov	r7, r0
 80093b6:	db01      	blt.n	80093bc <_malloc_r+0x1c>
 80093b8:	42a9      	cmp	r1, r5
 80093ba:	d905      	bls.n	80093c8 <_malloc_r+0x28>
 80093bc:	230c      	movs	r3, #12
 80093be:	603b      	str	r3, [r7, #0]
 80093c0:	2600      	movs	r6, #0
 80093c2:	4630      	mov	r0, r6
 80093c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093c8:	4e2e      	ldr	r6, [pc, #184]	; (8009484 <_malloc_r+0xe4>)
 80093ca:	f000 f89d 	bl	8009508 <__malloc_lock>
 80093ce:	6833      	ldr	r3, [r6, #0]
 80093d0:	461c      	mov	r4, r3
 80093d2:	bb34      	cbnz	r4, 8009422 <_malloc_r+0x82>
 80093d4:	4629      	mov	r1, r5
 80093d6:	4638      	mov	r0, r7
 80093d8:	f7ff ffc2 	bl	8009360 <sbrk_aligned>
 80093dc:	1c43      	adds	r3, r0, #1
 80093de:	4604      	mov	r4, r0
 80093e0:	d14d      	bne.n	800947e <_malloc_r+0xde>
 80093e2:	6834      	ldr	r4, [r6, #0]
 80093e4:	4626      	mov	r6, r4
 80093e6:	2e00      	cmp	r6, #0
 80093e8:	d140      	bne.n	800946c <_malloc_r+0xcc>
 80093ea:	6823      	ldr	r3, [r4, #0]
 80093ec:	4631      	mov	r1, r6
 80093ee:	4638      	mov	r0, r7
 80093f0:	eb04 0803 	add.w	r8, r4, r3
 80093f4:	f000 f878 	bl	80094e8 <_sbrk_r>
 80093f8:	4580      	cmp	r8, r0
 80093fa:	d13a      	bne.n	8009472 <_malloc_r+0xd2>
 80093fc:	6821      	ldr	r1, [r4, #0]
 80093fe:	3503      	adds	r5, #3
 8009400:	1a6d      	subs	r5, r5, r1
 8009402:	f025 0503 	bic.w	r5, r5, #3
 8009406:	3508      	adds	r5, #8
 8009408:	2d0c      	cmp	r5, #12
 800940a:	bf38      	it	cc
 800940c:	250c      	movcc	r5, #12
 800940e:	4629      	mov	r1, r5
 8009410:	4638      	mov	r0, r7
 8009412:	f7ff ffa5 	bl	8009360 <sbrk_aligned>
 8009416:	3001      	adds	r0, #1
 8009418:	d02b      	beq.n	8009472 <_malloc_r+0xd2>
 800941a:	6823      	ldr	r3, [r4, #0]
 800941c:	442b      	add	r3, r5
 800941e:	6023      	str	r3, [r4, #0]
 8009420:	e00e      	b.n	8009440 <_malloc_r+0xa0>
 8009422:	6822      	ldr	r2, [r4, #0]
 8009424:	1b52      	subs	r2, r2, r5
 8009426:	d41e      	bmi.n	8009466 <_malloc_r+0xc6>
 8009428:	2a0b      	cmp	r2, #11
 800942a:	d916      	bls.n	800945a <_malloc_r+0xba>
 800942c:	1961      	adds	r1, r4, r5
 800942e:	42a3      	cmp	r3, r4
 8009430:	6025      	str	r5, [r4, #0]
 8009432:	bf18      	it	ne
 8009434:	6059      	strne	r1, [r3, #4]
 8009436:	6863      	ldr	r3, [r4, #4]
 8009438:	bf08      	it	eq
 800943a:	6031      	streq	r1, [r6, #0]
 800943c:	5162      	str	r2, [r4, r5]
 800943e:	604b      	str	r3, [r1, #4]
 8009440:	4638      	mov	r0, r7
 8009442:	f104 060b 	add.w	r6, r4, #11
 8009446:	f000 f865 	bl	8009514 <__malloc_unlock>
 800944a:	f026 0607 	bic.w	r6, r6, #7
 800944e:	1d23      	adds	r3, r4, #4
 8009450:	1af2      	subs	r2, r6, r3
 8009452:	d0b6      	beq.n	80093c2 <_malloc_r+0x22>
 8009454:	1b9b      	subs	r3, r3, r6
 8009456:	50a3      	str	r3, [r4, r2]
 8009458:	e7b3      	b.n	80093c2 <_malloc_r+0x22>
 800945a:	6862      	ldr	r2, [r4, #4]
 800945c:	42a3      	cmp	r3, r4
 800945e:	bf0c      	ite	eq
 8009460:	6032      	streq	r2, [r6, #0]
 8009462:	605a      	strne	r2, [r3, #4]
 8009464:	e7ec      	b.n	8009440 <_malloc_r+0xa0>
 8009466:	4623      	mov	r3, r4
 8009468:	6864      	ldr	r4, [r4, #4]
 800946a:	e7b2      	b.n	80093d2 <_malloc_r+0x32>
 800946c:	4634      	mov	r4, r6
 800946e:	6876      	ldr	r6, [r6, #4]
 8009470:	e7b9      	b.n	80093e6 <_malloc_r+0x46>
 8009472:	230c      	movs	r3, #12
 8009474:	603b      	str	r3, [r7, #0]
 8009476:	4638      	mov	r0, r7
 8009478:	f000 f84c 	bl	8009514 <__malloc_unlock>
 800947c:	e7a1      	b.n	80093c2 <_malloc_r+0x22>
 800947e:	6025      	str	r5, [r4, #0]
 8009480:	e7de      	b.n	8009440 <_malloc_r+0xa0>
 8009482:	bf00      	nop
 8009484:	20001854 	.word	0x20001854

08009488 <_realloc_r>:
 8009488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800948c:	4680      	mov	r8, r0
 800948e:	4614      	mov	r4, r2
 8009490:	460e      	mov	r6, r1
 8009492:	b921      	cbnz	r1, 800949e <_realloc_r+0x16>
 8009494:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009498:	4611      	mov	r1, r2
 800949a:	f7ff bf81 	b.w	80093a0 <_malloc_r>
 800949e:	b92a      	cbnz	r2, 80094ac <_realloc_r+0x24>
 80094a0:	f000 f83e 	bl	8009520 <_free_r>
 80094a4:	4625      	mov	r5, r4
 80094a6:	4628      	mov	r0, r5
 80094a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094ac:	f000 f884 	bl	80095b8 <_malloc_usable_size_r>
 80094b0:	4284      	cmp	r4, r0
 80094b2:	4607      	mov	r7, r0
 80094b4:	d802      	bhi.n	80094bc <_realloc_r+0x34>
 80094b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80094ba:	d812      	bhi.n	80094e2 <_realloc_r+0x5a>
 80094bc:	4621      	mov	r1, r4
 80094be:	4640      	mov	r0, r8
 80094c0:	f7ff ff6e 	bl	80093a0 <_malloc_r>
 80094c4:	4605      	mov	r5, r0
 80094c6:	2800      	cmp	r0, #0
 80094c8:	d0ed      	beq.n	80094a6 <_realloc_r+0x1e>
 80094ca:	42bc      	cmp	r4, r7
 80094cc:	4622      	mov	r2, r4
 80094ce:	4631      	mov	r1, r6
 80094d0:	bf28      	it	cs
 80094d2:	463a      	movcs	r2, r7
 80094d4:	f7ff fee2 	bl	800929c <memcpy>
 80094d8:	4631      	mov	r1, r6
 80094da:	4640      	mov	r0, r8
 80094dc:	f000 f820 	bl	8009520 <_free_r>
 80094e0:	e7e1      	b.n	80094a6 <_realloc_r+0x1e>
 80094e2:	4635      	mov	r5, r6
 80094e4:	e7df      	b.n	80094a6 <_realloc_r+0x1e>
	...

080094e8 <_sbrk_r>:
 80094e8:	b538      	push	{r3, r4, r5, lr}
 80094ea:	4d06      	ldr	r5, [pc, #24]	; (8009504 <_sbrk_r+0x1c>)
 80094ec:	2300      	movs	r3, #0
 80094ee:	4604      	mov	r4, r0
 80094f0:	4608      	mov	r0, r1
 80094f2:	602b      	str	r3, [r5, #0]
 80094f4:	f7fa fee6 	bl	80042c4 <_sbrk>
 80094f8:	1c43      	adds	r3, r0, #1
 80094fa:	d102      	bne.n	8009502 <_sbrk_r+0x1a>
 80094fc:	682b      	ldr	r3, [r5, #0]
 80094fe:	b103      	cbz	r3, 8009502 <_sbrk_r+0x1a>
 8009500:	6023      	str	r3, [r4, #0]
 8009502:	bd38      	pop	{r3, r4, r5, pc}
 8009504:	2000185c 	.word	0x2000185c

08009508 <__malloc_lock>:
 8009508:	4801      	ldr	r0, [pc, #4]	; (8009510 <__malloc_lock+0x8>)
 800950a:	f000 b85d 	b.w	80095c8 <__retarget_lock_acquire_recursive>
 800950e:	bf00      	nop
 8009510:	20001860 	.word	0x20001860

08009514 <__malloc_unlock>:
 8009514:	4801      	ldr	r0, [pc, #4]	; (800951c <__malloc_unlock+0x8>)
 8009516:	f000 b858 	b.w	80095ca <__retarget_lock_release_recursive>
 800951a:	bf00      	nop
 800951c:	20001860 	.word	0x20001860

08009520 <_free_r>:
 8009520:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009522:	2900      	cmp	r1, #0
 8009524:	d044      	beq.n	80095b0 <_free_r+0x90>
 8009526:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800952a:	9001      	str	r0, [sp, #4]
 800952c:	2b00      	cmp	r3, #0
 800952e:	f1a1 0404 	sub.w	r4, r1, #4
 8009532:	bfb8      	it	lt
 8009534:	18e4      	addlt	r4, r4, r3
 8009536:	f7ff ffe7 	bl	8009508 <__malloc_lock>
 800953a:	4a1e      	ldr	r2, [pc, #120]	; (80095b4 <_free_r+0x94>)
 800953c:	9801      	ldr	r0, [sp, #4]
 800953e:	6813      	ldr	r3, [r2, #0]
 8009540:	b933      	cbnz	r3, 8009550 <_free_r+0x30>
 8009542:	6063      	str	r3, [r4, #4]
 8009544:	6014      	str	r4, [r2, #0]
 8009546:	b003      	add	sp, #12
 8009548:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800954c:	f7ff bfe2 	b.w	8009514 <__malloc_unlock>
 8009550:	42a3      	cmp	r3, r4
 8009552:	d908      	bls.n	8009566 <_free_r+0x46>
 8009554:	6825      	ldr	r5, [r4, #0]
 8009556:	1961      	adds	r1, r4, r5
 8009558:	428b      	cmp	r3, r1
 800955a:	bf01      	itttt	eq
 800955c:	6819      	ldreq	r1, [r3, #0]
 800955e:	685b      	ldreq	r3, [r3, #4]
 8009560:	1949      	addeq	r1, r1, r5
 8009562:	6021      	streq	r1, [r4, #0]
 8009564:	e7ed      	b.n	8009542 <_free_r+0x22>
 8009566:	461a      	mov	r2, r3
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	b10b      	cbz	r3, 8009570 <_free_r+0x50>
 800956c:	42a3      	cmp	r3, r4
 800956e:	d9fa      	bls.n	8009566 <_free_r+0x46>
 8009570:	6811      	ldr	r1, [r2, #0]
 8009572:	1855      	adds	r5, r2, r1
 8009574:	42a5      	cmp	r5, r4
 8009576:	d10b      	bne.n	8009590 <_free_r+0x70>
 8009578:	6824      	ldr	r4, [r4, #0]
 800957a:	4421      	add	r1, r4
 800957c:	1854      	adds	r4, r2, r1
 800957e:	42a3      	cmp	r3, r4
 8009580:	6011      	str	r1, [r2, #0]
 8009582:	d1e0      	bne.n	8009546 <_free_r+0x26>
 8009584:	681c      	ldr	r4, [r3, #0]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	6053      	str	r3, [r2, #4]
 800958a:	4421      	add	r1, r4
 800958c:	6011      	str	r1, [r2, #0]
 800958e:	e7da      	b.n	8009546 <_free_r+0x26>
 8009590:	d902      	bls.n	8009598 <_free_r+0x78>
 8009592:	230c      	movs	r3, #12
 8009594:	6003      	str	r3, [r0, #0]
 8009596:	e7d6      	b.n	8009546 <_free_r+0x26>
 8009598:	6825      	ldr	r5, [r4, #0]
 800959a:	1961      	adds	r1, r4, r5
 800959c:	428b      	cmp	r3, r1
 800959e:	bf04      	itt	eq
 80095a0:	6819      	ldreq	r1, [r3, #0]
 80095a2:	685b      	ldreq	r3, [r3, #4]
 80095a4:	6063      	str	r3, [r4, #4]
 80095a6:	bf04      	itt	eq
 80095a8:	1949      	addeq	r1, r1, r5
 80095aa:	6021      	streq	r1, [r4, #0]
 80095ac:	6054      	str	r4, [r2, #4]
 80095ae:	e7ca      	b.n	8009546 <_free_r+0x26>
 80095b0:	b003      	add	sp, #12
 80095b2:	bd30      	pop	{r4, r5, pc}
 80095b4:	20001854 	.word	0x20001854

080095b8 <_malloc_usable_size_r>:
 80095b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095bc:	1f18      	subs	r0, r3, #4
 80095be:	2b00      	cmp	r3, #0
 80095c0:	bfbc      	itt	lt
 80095c2:	580b      	ldrlt	r3, [r1, r0]
 80095c4:	18c0      	addlt	r0, r0, r3
 80095c6:	4770      	bx	lr

080095c8 <__retarget_lock_acquire_recursive>:
 80095c8:	4770      	bx	lr

080095ca <__retarget_lock_release_recursive>:
 80095ca:	4770      	bx	lr

080095cc <_init>:
 80095cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ce:	bf00      	nop
 80095d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095d2:	bc08      	pop	{r3}
 80095d4:	469e      	mov	lr, r3
 80095d6:	4770      	bx	lr

080095d8 <_fini>:
 80095d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095da:	bf00      	nop
 80095dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095de:	bc08      	pop	{r3}
 80095e0:	469e      	mov	lr, r3
 80095e2:	4770      	bx	lr
